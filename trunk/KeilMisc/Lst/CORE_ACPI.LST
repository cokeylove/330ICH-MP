C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE CORE_ACPI
OBJECT MODULE PLACED IN Code\CORE\CORE_ACPI.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\CORE\CORE_ACPI.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\
                    -INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*----------------------------------------------------------------------------
   2           * TITLE: CORE_ACPI.C - ACPI Handler
   3           *
   4           * SCI event generation.
   5           * ACPI SMBus transfer initiated by ACPI command.
   6           *
   7           * Copyright (c) 1983-2007, Insyde Software Corporation. All Rights Reserved.
   8           *
   9           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
  10           * transmit, broadcast, present, recite, release, license or otherwise exploit
  11           * any part of this publication in any form, by any means, without the prior
  12           * written permission of Insyde Software Corporation.
  13           *---------------------------------------------------------------------------*/
  14          
  15          #include <CORE_INCLUDE.H>
  16          #include <OEM_INCLUDE.H>
  17          
  18          //----------------------------------------------------------------------------
  19          // Process Command/Data received from System via the 2nd Host interface
  20          //----------------------------------------------------------------------------
  21          void service_pci2(void)
  22          {
  23   1          if ( IS_MASK_CLEAR(PM1STS,P_IBF) )
  24   1          {
  25   2                      return;
  26   2          }
  27   1              SetTotalBurstTime();    // Set Burst mode total time (2ms)
  28   1              service_pci2f();                // Process Command/Data
  29   1      }
  30          
  31          //----------------------------------------------------------------------------
  32          // Process Command/Data received from System via the 2nd Host interface
  33          //----------------------------------------------------------------------------
  34          void service_pci2f(void)
  35          {
  36   1              do
  37   1              {
  38   2                      if ( PM1STS & P_C_D )                   // Command port
  39   2                      {
  40   3                              PM1Cmd  = PM1DI;                        // Load command
  41   3                      PM1Step =0x00;
  42   3                      if (PM1Cmd==0x80) ACPI_Cmd_80();                        
  43   3                              else if (PM1Cmd==0x81) ACPI_Cmd_81();   
  44   3                              else if (PM1Cmd==0x82) ACPI_Cmd_82();   
  45   3                              else if (PM1Cmd==0x83) ACPI_Cmd_83();   
  46   3                              else
  47   3                          {
  48   4                                      Core_66Port(PM1Cmd);
  49   4                              Hook_66Port(PM1Cmd);
  50   4                      }
  51   3                      }
  52   2                      else                                                    // Data port
  53   2                      {
  54   3                              PM1Data2 = PM1Data1;
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 2   

  55   3                              PM1Data1 = PM1Data;
  56   3                              PM1Data = PM1DI;                        // Load data
  57   3                              if (PM1Step!=0x00)
  58   3                              {                       
  59   4                                      if (PM1Cmd==0x80) ACPI_Cmd_80Data();                    
  60   4                                      else if (PM1Cmd==0x81) ACPI_Cmd_81Data();
  61   4                                      else
  62   4                                      {                                       
  63   5                                              Core_62Port(PM1Cmd);    // Handle command data
  64   5                                          Hook_62Port(PM1Cmd);
  65   5                      } 
  66   4                                      PM1Step--;
  67   4                              }
  68   3                      }
  69   2              }while((IS_MASK_SET(PM1STS,BURST)||ECCheckBurstMode)&&(CheckBurstMode()==1));
  70   1      
  71   1              TR1 = 0;                        // disable timer1
  72   1              TF1 = 0;                        // clear overflow flag
  73   1              ET1 = 1;                        // Enable timer1 interrupt
  74   1              EnableAllInterrupt();
  75   1              EnablePMCIBFInt();
  76   1              Hook_ACPICommand();
  77   1      }
  78          
  79          //----------------------------------------------------------------------------
  80          // Handle ACPI commands.
  81          //----------------------------------------------------------------------------
  82          //----------------------------------------------------------------------------
  83          // Handle ACPI command 8x.
  84          //----------------------------------------------------------------------------
  85          void ACPI_Cmd_80(void)        // Read Embedded Controller.
  86          {
  87   1              ACPI_Gen_Int(ACPICmdSCI);
  88   1              PM1Step =0x01;
  89   1      }
  90          
  91          void ACPI_Cmd_81(void)        // Write Embedded Controller.
  92          {
  93   1              ACPI_Gen_Int(ACPICmdSCI);
  94   1              PM1Step =0x02;
  95   1      }
  96          
  97          void ACPI_Cmd_82(void)        // Burst Enable Embedded Controller.
  98          {
  99   1          SET_MASK(SYS_MISC1,ACPI_OS);
 100   1              SET_MASK(PM1STS,BURST); // PM1STS.4 Set Burst mode flag
 101   1              SendFromAcpi(0x90);             // Get Burst Acknowledge byte to send to Host.
 102   1      }
 103          
 104          void ACPI_Cmd_83(void)        // Burst Disable Embedded Controller.
 105          {
 106   1              CLEAR_MASK(PM1STS,BURST);       // PM1STS.4 Set Burst mode flag
 107   1              ACPI_Gen_Int(ACPICmdSCI);   // Clear Burst bit in secondary Host interface status register.
 108   1      }
 109          
 110          void ACPI_Cmd_84(void)        // Query Embedded Controller.
 111          {
 112   1              ITempB05 = 0x00;
 113   1              if (SCI_Event_Out_Index != SCI_Event_In_Index)
 114   1              {
 115   2                      ITempB05 = SCI_Event_Buffer[SCI_Event_Out_Index];
 116   2              SCI_Event_Out_Index++;
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 3   

 117   2              if (SCI_Event_Out_Index >= EVENT_BUFFER_SIZE)
 118   2                      {
 119   3                      SCI_Event_Out_Index = 0;
 120   3                      }
 121   2                      if (SCI_Event_Out_Index == SCI_Event_In_Index)
 122   2                      CLEAR_MASK(PM1STS,SCIEVT);
 123   2      
 124   2                      SendFromAcpi(ITempB05);
 125   2              }
 126   1              else
 127   1              {
 128   2                      CLEAR_MASK(PM1STS,SCIEVT);
 129   2              }
 130   1      
 131   1      }
 132          
 133          //----------------------------------------------------------------------------
 134          // Handle ACPI command 9x.
 135          //----------------------------------------------------------------------------
 136          void ACPI_Cmd_92(void)          // Oem function of reading EC external ram
 137          {
 138   1              PM1Step = 0x02;
 139   1      }
 140          
 141          void ACPI_Cmd_93(void)          // Oem function of writing EC external ram
 142          {
 143   1              PM1Step =0x03;
 144   1      }
 145          
 146          //----------------------------------------------------------------------------
 147          // Handle ACPI command Dx.
 148          //----------------------------------------------------------------------------
 149          void ACPI_Cmd_DC(void)
 150          {
 151   1          #if WDT_Support
 152   1          DisableInternalWDT();  //G64:Add disable watch dog when flash EC with CMD 0xDC.
 153   1          #endif
 154   1              ITE_Flash_Utility();    // for 8500
 155   1      }
 156          
 157          //----------------------------------------------------------------------------
 158          // Handle ACPI command Fx.
 159          //----------------------------------------------------------------------------
 160          void ACPI_Cmd_F0(void)
 161          {
 162   1              KeyScanACK = KU_ACK_Start;
 163   1      }
 164          
 165          //----------------------------------------------------------------------------
 166          // Handle ACPI command data.
 167          //----------------------------------------------------------------------------
 168          void SendFromAcpi(BYTE ecdata)
 169          {
 170   1              PM1DO = ecdata;
 171   1              ACPI_Gen_Int(ACPICmdSCI);
 172   1      }
 173          
 174          //----------------------------------------------------------------------------
 175          // Handle the data of ACPI command 8x
 176          //----------------------------------------------------------------------------
 177          void ACPI_Cmd_80Data(void)
 178          {
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 4   

 179   1              if (PM1Step == 1)
 180   1              {
 181   2                      SendFromAcpi(Hook_ReadMapECSpace(PM1Data));
 182   2              ECCheckBurstMode = 0;
 183   2              }
 184   1      }
 185          
 186          void ACPI_Cmd_81Data(void)
 187          {
 188   1              ACPI_Gen_Int(ACPICmdSCI);
 189   1              if (PM1Step == 2)
 190   1              {
 191   2              PM1Data1=PM1Data;
 192   2              }
 193   1              else if(PM1Step == 1)
 194   1              {
 195   2                      Hook_WriteMapECSpace(PM1Data1,PM1Data);
 196   2              ECCheckBurstMode = 0;
 197   2              }
 198   1      }
 199          
 200          void ACPI_Cmd_82Data(void)
 201          {
 202   1      
 203   1      }
 204          
 205          void ACPI_Cmd_83Data(void)
 206          {
 207   1      
 208   1      }
 209          
 210          void ACPI_Cmd_84Data(void)
 211          {
 212   1      
 213   1      }
 214          
 215          //----------------------------------------------------------------------------
 216          // Handle the data of ACPI command 9x
 217          //----------------------------------------------------------------------------
 218          void ACPI_Cmd_92Data(void)
 219          {
 220   1              switch(PM1Step)
 221   1              {
 222   2                      case 2:
 223   2                              PM1Data1=PM1Data;               // address high
 224   2                              break;
 225   2      
 226   2                      case 1:
 227   2                              Read_External_Ram();
 228   2                              break;
 229   2      
 230   2                      default:
 231   2                              break;
 232   2              }
 233   1      }
 234          
 235          void ACPI_Cmd_93Data(void)
 236          {
 237   1              if (PM1Step==0x03)
 238   1              {
 239   2                      PM1Data2=PM1Data;  // address high
 240   2              }
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 5   

 241   1              else if (PM1Step==0x02)
 242   1              {
 243   2              PM1Data1=PM1Data;  // address low
 244   2              }
 245   1              else if (PM1Step==0x01)
 246   1              {
 247   2              Write_External_Ram();
 248   2              }
 249   1      }
 250          
 251          //----------------------------------------------------------------------------
 252          // Read external ram Space
 253          //----------------------------------------------------------------------------
 254          void Read_External_Ram()
 255          {
 256   1              Tmp_XPntr=((PM1Data1<<8)+PM1Data);
 257   1              PM1DO = *Tmp_XPntr;
 258   1      }
 259          
 260          //----------------------------------------------------------------------------
 261          // Write external ram Space
 262          //----------------------------------------------------------------------------
 263          void Write_External_Ram()
 264          {
 265   1              Tmp_XPntr=((PM1Data2<<8)+PM1Data1);
 266   1              *Tmp_XPntr=PM1Data;
 267   1      }
 268          
 269          //----------------------------------------------------------------------------
 270          // Burst mode or normal mode
 271          //----------------------------------------------------------------------------
 272          BYTE CheckBurstMode(void)
 273          {
 274   1              while(IS_MASK_CLEAR(PM1STS,P_IBF))  // wait input buffer full
 275   1              {
 276   2                      if(TF1)                                             // time-out
 277   2                      {
 278   3                  TR1 = 0;
 279   3                  TF1=0;
 280   3                          CLEAR_MASK(PM1STS,BURST);
 281   3                      ACPI_Gen_Int(ACPICmdSCI);
 282   3                  ECCheckBurstMode = 0;
 283   3                              return(0);
 284   3                      }
 285   2              }
 286   1              return(1);
 287   1      }
 288          
 289          //----------------------------------------------------------------------------
 290          // Set Burst mode total time (1ms)
 291          //----------------------------------------------------------------------------
 292          void SetTotalBurstTime(void)
 293          {
 294   1          DisableAllInterrupt();
 295   1              TR1 = 0;                                                // disable timer1
 296   1              ET1 = 0;                                                // Disable timer1 interrupt
 297   1          _nop_();
 298   1          _nop_();
 299   1          _nop_();
 300   1          _nop_();
 301   1          TH1 = T_ACPI_BurstTime>>8;      // Set timer1 counter 2ms
 302   1          TL1 = T_ACPI_BurstTime;         // Set timer1 counter 2ms
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 6   

 303   1          TF1 = 0;                                            // clear overflow flag
 304   1              TR1 = 1;                                                // enable timer1
 305   1      }
 306          
 307          /* ----------------------------------------------------------------------------
 308           * FUNCTION: ACPI_Gen_Int - Generate an SCI interrupt.
 309           *
 310           * For a pulsed SCI (edge triggered), the SCI signal is pulsed.
 311           *
 312           * For a level triggered SCI, the SCI signal is set or cleared.  The Host will
 313           * send a command to read the cause of the SCI. The signal will be deactivated
 314           * when no more causes exist.
 315           * ------------------------------------------------------------------------- */
 316          void ACPI_Gen_Int(BYTE Qevent)
 317          {
 318   1      //ANGELAS024:s+Modify ACPI function.
 319   1              if(IS_MASK_CLEAR(SYS_MISC1,ACPI_OS) || (SysPowState!=SYSTEM_S0))
 320   1              {
 321   2                      return;
 322   2              }
 323   1      //ANGELAS024:e+Modify ACPI function.
 324   1          if(Qevent==QeventSCI)
 325   1          {
 326   2              DisableAllInterrupt();
 327   2          }
 328   1              Hook_SCION();
 329   1              //WNCKR = 0x00;               // Delay 15.26 us   T066A-
 330   1              Hook_SCIOFF();
 331   1          if(Qevent==QeventSCI)
 332   1          {
 333   2              EnableAllInterrupt();
 334   2          }
 335   1      }
 336          
 337          //----------------------------------------------------------------------------
 338          // The function of processing 62 port data
 339          //----------------------------------------------------------------------------
 340          #pragma ot(8, speed)    //T084+
 341          void Core_62Port(BYTE PM1Data)
 342          {
 343   1          switch(PM1Data)
 344   1          {
 345   2              /* 
 346   2             case 0x80:
 347   2                      ACPI_Cmd_80Data();
 348   2                      break;
 349   2      
 350   2              case 0x81:
 351   2                      ACPI_Cmd_81Data();
 352   2                      break;
 353   2      
 354   2            case 0x82:
 355   2                      ACPI_Cmd_82Data();
 356   2                      break;
 357   2      
 358   2              case 0x83:
 359   2                      ACPI_Cmd_83Data();
 360   2                      break;
 361   2              */  
 362   2          case 0x84:
 363   2              ACPI_Cmd_84Data();
 364   2                      break;
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 7   

 365   2      
 366   2          case 0x92:
 367   2              ACPI_Cmd_92Data();
 368   2              break;
 369   2      
 370   2          case 0x93:
 371   2              ACPI_Cmd_93Data();
 372   2              break;
 373   2      
 374   2              default:
 375   2                  break;
 376   2          }
 377   1      }
 378          
 379          //----------------------------------------------------------------------------
 380          // The function of processing 66 port command.
 381          //----------------------------------------------------------------------------
 382          #pragma ot(8, speed)    //T084+
 383          void Core_66Port(BYTE PM1Cmd)
 384          {
 385   1          switch(PM1Cmd)
 386   1          {
 387   2              /*   //  
 388   2             case 0x80:
 389   2                      ACPI_Cmd_80();
 390   2                       break;
 391   2      
 392   2              case 0x81:
 393   2                      ACPI_Cmd_81();
 394   2                      break;
 395   2      
 396   2             case 0x82:
 397   2                      ACPI_Cmd_82();
 398   2                      break;
 399   2      
 400   2              case 0x83:
 401   2                      ACPI_Cmd_83();
 402   2                      break;
 403   2              */   //  
 404   2          case 0x84:
 405   2              ACPI_Cmd_84();
 406   2                  break;
 407   2      
 408   2          case 0x92:
 409   2              ACPI_Cmd_92();
 410   2              break;
 411   2      
 412   2          case 0x93:
 413   2              ACPI_Cmd_93();
 414   2              break;
 415   2      
 416   2          case 0xDC:
 417   2              ACPI_Cmd_DC();
 418   2              break;
 419   2      
 420   2          case 0xF0:
 421   2              ACPI_Cmd_F0();
 422   2              break;
 423   2      
 424   2              default:
 425   2                  break;
 426   2          }
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 8   

 427   1      }
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0054 (BEGIN)
0000         L?0085:
0000 EF                MOV     A,R7
0001 FE                MOV     R6,A
0002 7C00              MOV     R4,#00H
0004 E4                CLR     A
0005 2D                ADD     A,R5
0006 FF                MOV     R7,A
0007 EC                MOV     A,R4
0008 3E                ADDC    A,R6
0009 7800        E     MOV     R0,#LOW Tmp_XPntr
000B F6                MOV     @R0,A
000C 08                INC     R0
000D EF                MOV     A,R7
000E F6                MOV     @R0,A
000F 18                DEC     R0
0010 E6                MOV     A,@R0
0011 FE                MOV     R6,A
0012 08                INC     R0
0013 E6                MOV     A,@R0
0014 F582              MOV     DPL,A
0016 8E83              MOV     DPH,R6
0018 22                RET     
0019         L?0086:
0019 900000      E     MOV     DPTR,#SCI_Event_In_Index
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 900000      E     MOV     DPTR,#SCI_Event_Out_Index
0021 E0                MOVX    A,@DPTR
0022 6F                XRL     A,R7
0023 22                RET     
             ; FUNCTION Com0054 (END)

             ; FUNCTION service_pci2 (BEGIN)
                                           ; SOURCE LINE # 21
                                           ; SOURCE LINE # 22
                                           ; SOURCE LINE # 23
0000 900000      E     MOV     DPTR,#PM1STS
0003 E0                MOVX    A,@DPTR
0004 30E106            JNB     ACC.1,?C0002
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 26
0007         ?C0001:
                                           ; SOURCE LINE # 27
0007 120000      R     LCALL   SetTotalBurstTime
                                           ; SOURCE LINE # 28
000A 120000      R     LCALL   service_pci2f
                                           ; SOURCE LINE # 29
000D         ?C0002:
000D 22                RET     
             ; FUNCTION service_pci2 (END)

             ; FUNCTION service_pci2f (BEGIN)
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 35
0000         ?C0005:
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 38
0000 900000      E     MOV     DPTR,#PM1STS
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 10  

0003 E0                MOVX    A,@DPTR
0004 30E33D            JNB     ACC.3,?C0006
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
0007 900000      E     MOV     DPTR,#PM1DI
000A E0                MOVX    A,@DPTR
000B F500        E     MOV     PM1Cmd,A
                                           ; SOURCE LINE # 41
000D E4                CLR     A
000E F500        E     MOV     PM1Step,A
                                           ; SOURCE LINE # 42
0010 E500        E     MOV     A,PM1Cmd
0012 B48005            CJNE    A,#080H,?C0007
0015 120000      R     LCALL   ACPI_Cmd_80
0018 805A              SJMP    ?C0003
001A         ?C0007:
                                           ; SOURCE LINE # 43
001A E500        E     MOV     A,PM1Cmd
001C B48105            CJNE    A,#081H,?C0009
001F 120000      R     LCALL   ACPI_Cmd_81
0022 8050              SJMP    ?C0003
0024         ?C0009:
                                           ; SOURCE LINE # 44
0024 E500        E     MOV     A,PM1Cmd
0026 B48205            CJNE    A,#082H,?C0011
0029 120000      R     LCALL   ACPI_Cmd_82
002C 8046              SJMP    ?C0003
002E         ?C0011:
                                           ; SOURCE LINE # 45
002E E500        E     MOV     A,PM1Cmd
0030 B48305            CJNE    A,#083H,?C0013
0033 120000      R     LCALL   ACPI_Cmd_83
0036 803C              SJMP    ?C0003
0038         ?C0013:
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
0038 AF00        E     MOV     R7,PM1Cmd
003A 120000      R     LCALL   _Core_66Port
                                           ; SOURCE LINE # 49
003D AF00        E     MOV     R7,PM1Cmd
003F 120000      E     LCALL   _Hook_66Port
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0042 8030              SJMP    ?C0003
0044         ?C0006:
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
0044 850000      E     MOV     PM1Data2,PM1Data1
                                           ; SOURCE LINE # 55
0047 850000      E     MOV     PM1Data1,PM1Data
                                           ; SOURCE LINE # 56
004A 900000      E     MOV     DPTR,#PM1DI
004D E0                MOVX    A,@DPTR
004E F500        E     MOV     PM1Data,A
                                           ; SOURCE LINE # 57
0050 E500        E     MOV     A,PM1Step
0052 6020              JZ      ?C0003
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
0054 E500        E     MOV     A,PM1Cmd
0056 B48005            CJNE    A,#080H,?C0017
0059 120000      R     LCALL   ACPI_Cmd_80Data
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 11  

005C 8014              SJMP    ?C0018
005E         ?C0017:
                                           ; SOURCE LINE # 60
005E E500        E     MOV     A,PM1Cmd
0060 B48105            CJNE    A,#081H,?C0019
0063 120000      R     LCALL   ACPI_Cmd_81Data
0066 800A              SJMP    ?C0018
0068         ?C0019:
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
0068 AF00        E     MOV     R7,PM1Cmd
006A 120000      R     LCALL   _Core_62Port
                                           ; SOURCE LINE # 64
006D AF00        E     MOV     R7,PM1Cmd
006F 120000      E     LCALL   _Hook_62Port
                                           ; SOURCE LINE # 65
0072         ?C0018:
                                           ; SOURCE LINE # 66
0072 1500        E     DEC     PM1Step
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
0074         ?C0003:
0074 900000      E     MOV     DPTR,#PM1STS
0077 E0                MOVX    A,@DPTR
0078 20E403            JB      ACC.4,?C0022
007B 30000B      E     JNB     ECCheckBurstMode,?C0004
007E         ?C0022:
007E 120000      R     LCALL   CheckBurstMode
0081 EF                MOV     A,R7
0082 6401              XRL     A,#01H
0084 7003              JNZ     $ + 5H
0086 020000      R     LJMP    ?C0005
0089         ?C0004:
                                           ; SOURCE LINE # 71
0089 C28E              CLR     TR1
                                           ; SOURCE LINE # 72
008B C28F              CLR     TF1
                                           ; SOURCE LINE # 73
008D D2AB              SETB    ET1
                                           ; SOURCE LINE # 74
008F 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 75
0092 120000      E     LCALL   EnablePMCIBFInt
                                           ; SOURCE LINE # 76
0095 020000      E     LJMP    Hook_ACPICommand
             ; FUNCTION service_pci2f (END)

             ; FUNCTION ACPI_Cmd_80 (BEGIN)
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      R     LCALL   _ACPI_Gen_Int
                                           ; SOURCE LINE # 88
0005 750001      E     MOV     PM1Step,#01H
                                           ; SOURCE LINE # 89
0008 22                RET     
             ; FUNCTION ACPI_Cmd_80 (END)

             ; FUNCTION ACPI_Cmd_81 (BEGIN)
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 12  

                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      R     LCALL   _ACPI_Gen_Int
                                           ; SOURCE LINE # 94
0005 750002      E     MOV     PM1Step,#02H
                                           ; SOURCE LINE # 95
0008 22                RET     
             ; FUNCTION ACPI_Cmd_81 (END)

             ; FUNCTION ACPI_Cmd_82 (BEGIN)
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0000 900000      E     MOV     DPTR,#SYS_MISC1
0003 E0                MOVX    A,@DPTR
0004 4480              ORL     A,#080H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
0007 900000      E     MOV     DPTR,#PM1STS
000A E0                MOVX    A,@DPTR
000B 4410              ORL     A,#010H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
000E 7F90              MOV     R7,#090H
0010 020000      R     LJMP    _SendFromAcpi
             ; FUNCTION ACPI_Cmd_82 (END)

             ; FUNCTION ACPI_Cmd_83 (BEGIN)
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0000 900000      E     MOV     DPTR,#PM1STS
0003 E0                MOVX    A,@DPTR
0004 54EF              ANL     A,#0EFH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0007 E4                CLR     A
0008 FF                MOV     R7,A
0009 020000      R     LJMP    _ACPI_Gen_Int
             ; FUNCTION ACPI_Cmd_83 (END)

             ; FUNCTION ACPI_Cmd_84 (BEGIN)
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
0000 E4                CLR     A
0001 F500        E     MOV     ITempB05,A
                                           ; SOURCE LINE # 113
0003 120000      R     LCALL   L?0086
0006 602C              JZ      ?C0028
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
0008 E0                MOVX    A,@DPTR
0009 2400        E     ADD     A,#LOW SCI_Event_Buffer
000B F582              MOV     DPL,A
000D E4                CLR     A
000E 3400        E     ADDC    A,#HIGH SCI_Event_Buffer
0010 F583              MOV     DPH,A
0012 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 13  

0013 F500        E     MOV     ITempB05,A
                                           ; SOURCE LINE # 116
0015 900000      E     MOV     DPTR,#SCI_Event_Out_Index
0018 E0                MOVX    A,@DPTR
0019 04                INC     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
001B E0                MOVX    A,@DPTR
001C C3                CLR     C
001D 9408              SUBB    A,#08H
001F 4002              JC      ?C0029
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
0021 E4                CLR     A
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
0023         ?C0029:
                                           ; SOURCE LINE # 121
0023 120000      R     LCALL   L?0086
0026 7007              JNZ     ?C0030
                                           ; SOURCE LINE # 122
0028 900000      E     MOV     DPTR,#PM1STS
002B E0                MOVX    A,@DPTR
002C 54DF              ANL     A,#0DFH
002E F0                MOVX    @DPTR,A
002F         ?C0030:
                                           ; SOURCE LINE # 124
002F AF00        E     MOV     R7,ITempB05
0031 020000      R     LJMP    _SendFromAcpi
                                           ; SOURCE LINE # 125
0034         ?C0028:
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
0034 900000      E     MOV     DPTR,#PM1STS
0037 E0                MOVX    A,@DPTR
0038 54DF              ANL     A,#0DFH
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 131
003B         ?C0032:
003B 22                RET     
             ; FUNCTION ACPI_Cmd_84 (END)

             ; FUNCTION ACPI_Cmd_92 (BEGIN)
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
0000 750002      E     MOV     PM1Step,#02H
                                           ; SOURCE LINE # 139
0003 22                RET     
             ; FUNCTION ACPI_Cmd_92 (END)

             ; FUNCTION ACPI_Cmd_93 (BEGIN)
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
0000 750003      E     MOV     PM1Step,#03H
                                           ; SOURCE LINE # 144
0003 22                RET     
             ; FUNCTION ACPI_Cmd_93 (END)

             ; FUNCTION ACPI_Cmd_DC (BEGIN)
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 14  

                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 152
0000 120000      E     LCALL   DisableInternalWDT
                                           ; SOURCE LINE # 154
0003 020000      E     LJMP    ITE_Flash_Utility
             ; FUNCTION ACPI_Cmd_DC (END)

             ; FUNCTION ACPI_Cmd_F0 (BEGIN)
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
0000 900000      E     MOV     DPTR,#KeyScanACK
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
0006 22                RET     
             ; FUNCTION ACPI_Cmd_F0 (END)

             ; FUNCTION _SendFromAcpi (BEGIN)
                                           ; SOURCE LINE # 168
;---- Variable 'ecdata' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
0000 900000      E     MOV     DPTR,#PM1DO
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
0005 E4                CLR     A
0006 FF                MOV     R7,A
0007 020000      R     LJMP    _ACPI_Gen_Int
             ; FUNCTION _SendFromAcpi (END)

             ; FUNCTION ACPI_Cmd_80Data (BEGIN)
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
0000 E500        E     MOV     A,PM1Step
0002 B4010A            CJNE    A,#01H,?C0039
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0005 AF00        E     MOV     R7,PM1Data
0007 120000      E     LCALL   _Hook_ReadMapECSpace
000A 120000      R     LCALL   _SendFromAcpi
                                           ; SOURCE LINE # 182
000D C200        E     CLR     ECCheckBurstMode
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
000F         ?C0039:
000F 22                RET     
             ; FUNCTION ACPI_Cmd_80Data (END)

             ; FUNCTION ACPI_Cmd_81Data (BEGIN)
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      R     LCALL   _ACPI_Gen_Int
                                           ; SOURCE LINE # 189
0005 E500        E     MOV     A,PM1Step
0007 B40204            CJNE    A,#02H,?C0040
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 15  

                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
000A 850000      E     MOV     PM1Data1,PM1Data
                                           ; SOURCE LINE # 192
000D 22                RET     
000E         ?C0040:
                                           ; SOURCE LINE # 193
000E E500        E     MOV     A,PM1Step
0010 B40109            CJNE    A,#01H,?C0043
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
0013 AD00        E     MOV     R5,PM1Data
0015 AF00        E     MOV     R7,PM1Data1
0017 120000      E     LCALL   _Hook_WriteMapECSpace
                                           ; SOURCE LINE # 196
001A C200        E     CLR     ECCheckBurstMode
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
001C         ?C0043:
001C 22                RET     
             ; FUNCTION ACPI_Cmd_81Data (END)

             ; FUNCTION ACPI_Cmd_82Data (BEGIN)
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 203
0000 22                RET     
             ; FUNCTION ACPI_Cmd_82Data (END)

             ; FUNCTION ACPI_Cmd_83Data (BEGIN)
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 208
0000 22                RET     
             ; FUNCTION ACPI_Cmd_83Data (END)

             ; FUNCTION ACPI_Cmd_84Data (BEGIN)
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 213
0000 22                RET     
             ; FUNCTION ACPI_Cmd_84Data (END)

             ; FUNCTION ACPI_Cmd_92Data (BEGIN)
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0000 E500        E     MOV     A,PM1Step
0002 14                DEC     A
0003 6007              JZ      ?C0049
0005 14                DEC     A
0006 7007              JNZ     ?C0051
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
0008         ?C0048:
                                           ; SOURCE LINE # 223
0008 850000      E     MOV     PM1Data1,PM1Data
                                           ; SOURCE LINE # 224
000B 22                RET     
                                           ; SOURCE LINE # 226
000C         ?C0049:
                                           ; SOURCE LINE # 227
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 16  

000C 120000      R     LCALL   Read_External_Ram
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
000F         ?C0051:
000F 22                RET     
             ; FUNCTION ACPI_Cmd_92Data (END)

             ; FUNCTION ACPI_Cmd_93Data (BEGIN)
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
0000 E500        E     MOV     A,PM1Step
0002 B40304            CJNE    A,#03H,?C0052
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
0005 850000      E     MOV     PM1Data2,PM1Data
                                           ; SOURCE LINE # 240
0008 22                RET     
0009         ?C0052:
                                           ; SOURCE LINE # 241
0009 E500        E     MOV     A,PM1Step
000B B40204            CJNE    A,#02H,?C0054
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
000E 850000      E     MOV     PM1Data1,PM1Data
                                           ; SOURCE LINE # 244
0011 22                RET     
0012         ?C0054:
                                           ; SOURCE LINE # 245
0012 E500        E     MOV     A,PM1Step
0014 B40103            CJNE    A,#01H,?C0057
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
0017 120000      R     LCALL   Write_External_Ram
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
001A         ?C0057:
001A 22                RET     
             ; FUNCTION ACPI_Cmd_93Data (END)

             ; FUNCTION Read_External_Ram (BEGIN)
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
0000 AF00        E     MOV     R7,PM1Data1
0002 AD00        E     MOV     R5,PM1Data
                                           ; SOURCE LINE # 257
0004 120000      R     LCALL   L?0085
0007 E0                MOVX    A,@DPTR
0008 900000      E     MOV     DPTR,#PM1DO
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
000C 22                RET     
             ; FUNCTION Read_External_Ram (END)

             ; FUNCTION Write_External_Ram (BEGIN)
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 17  

0000 AF00        E     MOV     R7,PM1Data2
0002 AD00        E     MOV     R5,PM1Data1
                                           ; SOURCE LINE # 266
0004 120000      R     LCALL   L?0085
0007 E500        E     MOV     A,PM1Data
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
000A 22                RET     
             ; FUNCTION Write_External_Ram (END)

             ; FUNCTION CheckBurstMode (BEGIN)
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
0000         ?C0060:
                                           ; SOURCE LINE # 274
0000 900000      E     MOV     DPTR,#PM1STS
0003 E0                MOVX    A,@DPTR
0004 20E115            JB      ACC.1,?C0061
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
0007 308FF6            JNB     TF1,?C0060
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
000A C28E              CLR     TR1
                                           ; SOURCE LINE # 279
000C C28F              CLR     TF1
                                           ; SOURCE LINE # 280
000E E0                MOVX    A,@DPTR
000F 54EF              ANL     A,#0EFH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
0012 E4                CLR     A
0013 FF                MOV     R7,A
0014 120000      R     LCALL   _ACPI_Gen_Int
                                           ; SOURCE LINE # 282
0017 C200        E     CLR     ECCheckBurstMode
                                           ; SOURCE LINE # 283
0019 7F00              MOV     R7,#00H
001B 22                RET     
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
001C         ?C0061:
                                           ; SOURCE LINE # 286
001C 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 287
001E         ?C0063:
001E 22                RET     
             ; FUNCTION CheckBurstMode (END)

             ; FUNCTION SetTotalBurstTime (BEGIN)
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 295
0003 C28E              CLR     TR1
                                           ; SOURCE LINE # 296
0005 C2AB              CLR     ET1
                                           ; SOURCE LINE # 297
0007 00                NOP     
                                           ; SOURCE LINE # 298
0008 00                NOP     
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 18  

                                           ; SOURCE LINE # 299
0009 00                NOP     
                                           ; SOURCE LINE # 300
000A 00                NOP     
                                           ; SOURCE LINE # 301
000B 758DFA            MOV     TH1,#0FAH
                                           ; SOURCE LINE # 302
000E 758B01            MOV     TL1,#01H
                                           ; SOURCE LINE # 303
0011 C28F              CLR     TF1
                                           ; SOURCE LINE # 304
0013 D28E              SETB    TR1
                                           ; SOURCE LINE # 305
0015 22                RET     
             ; FUNCTION SetTotalBurstTime (END)

             ; FUNCTION _ACPI_Gen_Int (BEGIN)
                                           ; SOURCE LINE # 316
0000 900000      R     MOV     DPTR,#Qevent
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 319
0005 900000      E     MOV     DPTR,#SYS_MISC1
0008 E0                MOVX    A,@DPTR
0009 30E721            JNB     ACC.7,?C0067
000C 900000      E     MOV     DPTR,#SysPowState
000F E0                MOVX    A,@DPTR
0010 B4111A            CJNE    A,#011H,?C0067
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 322
0013         ?C0065:
                                           ; SOURCE LINE # 324
0013 900000      R     MOV     DPTR,#Qevent
0016 E0                MOVX    A,@DPTR
0017 B40103            CJNE    A,#01H,?C0068
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
001A 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 327
001D         ?C0068:
                                           ; SOURCE LINE # 328
001D 120000      E     LCALL   Hook_SCION
                                           ; SOURCE LINE # 330
0020 120000      E     LCALL   Hook_SCIOFF
                                           ; SOURCE LINE # 331
0023 900000      R     MOV     DPTR,#Qevent
0026 E0                MOVX    A,@DPTR
0027 B40103            CJNE    A,#01H,?C0067
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
002A 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
002D         ?C0067:
002D 22                RET     
             ; FUNCTION _ACPI_Gen_Int (END)

             ; FUNCTION _Core_62Port (BEGIN)
                                           ; SOURCE LINE # 341
;---- Variable 'PM1Data' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 342
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 19  

                                           ; SOURCE LINE # 343
0000 EF                MOV     A,R7
0001 246E              ADD     A,#06EH
0003 600A              JZ      ?C0072
0005 14                DEC     A
0006 600A              JZ      ?C0073
0008 240F              ADD     A,#0FH
000A 7009              JNZ     ?C0075
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 362
000C         ?C0071:
                                           ; SOURCE LINE # 363
000C 020000      R     LJMP    ACPI_Cmd_84Data
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 366
000F         ?C0072:
                                           ; SOURCE LINE # 367
000F 020000      R     LJMP    ACPI_Cmd_92Data
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 370
0012         ?C0073:
                                           ; SOURCE LINE # 371
0012 120000      R     LCALL   ACPI_Cmd_93Data
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
0015         ?C0075:
0015 22                RET     
             ; FUNCTION _Core_62Port (END)

             ; FUNCTION _Core_66Port (BEGIN)
                                           ; SOURCE LINE # 383
;---- Variable 'PM1Cmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
0000 EF                MOV     A,R7
0001 246E              ADD     A,#06EH
0003 6012              JZ      ?C0078
0005 14                DEC     A
0006 6012              JZ      ?C0079
0008 24B7              ADD     A,#0B7H
000A 6011              JZ      ?C0080
000C 24EC              ADD     A,#0ECH
000E 6010              JZ      ?C0081
0010 246C              ADD     A,#06CH
0012 700F              JNZ     ?C0083
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 404
0014         ?C0077:
                                           ; SOURCE LINE # 405
0014 020000      R     LJMP    ACPI_Cmd_84
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 408
0017         ?C0078:
                                           ; SOURCE LINE # 409
0017 020000      R     LJMP    ACPI_Cmd_92
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 412
001A         ?C0079:
                                           ; SOURCE LINE # 413
C51 COMPILER V8.12   CORE_ACPI                                                             07/28/2018 12:03:32 PAGE 20  

001A 020000      R     LJMP    ACPI_Cmd_93
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 416
001D         ?C0080:
                                           ; SOURCE LINE # 417
001D 020000      R     LJMP    ACPI_Cmd_DC
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 420
0020         ?C0081:
                                           ; SOURCE LINE # 421
0020 120000      R     LCALL   ACPI_Cmd_F0
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
0023         ?C0083:
0023 22                RET     
             ; FUNCTION _Core_66Port (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    614    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
