C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE CORE_SMBUS
OBJECT MODULE PLACED IN Code\CORE\CORE_SMBUS.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\CORE\CORE_SMBUS.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE
                    -\INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*----------------------------------------------------------------------------
   2           * TITLE: CORE_SMBUS.C - the System Management SMBus Protocol drivers.
   3           *
   4           *---------------------------------------------------------------------------*/
   5           
   6          #include <CORE_INCLUDE.H>
   7          #include <OEM_INCLUDE.H>
   8          
   9          //----------------------------------------------------------------------------
  10          // Read/write SMbus byte/word function  
  11          //----------------------------------------------------------------------------
  12          const sSMBus code asSMBus[]=
  13          {
  14                  { &HOCTL_A, &TRASLA_A, &HOCMD_A, &HOSTA_A, &D0REG_A, &D1REG_A,  &HOBDB_A,       &IER1,  &ISR1,  Int_SMBUS0,   &PE
             -CERC_A},
  15                  { &HOCTL_B, &TRASLA_B, &HOCMD_B, &HOSTA_B, &D0REG_B, &D1REG_B,  &HOBDB_B,       &IER1,  &ISR1,  Int_SMBUS1,   &PE
             -CERC_B},
  16                  { &HOCTL_C, &TRASLA_C, &HOCMD_C, &HOSTA_C, &D0REG_C, &D1REG_C,  &HOBDB_C,       &IER2,  &ISR2,  Int_SMBUS2,   &PEC
             -ERC_C},
  17                  { &HOCTL_D, &TRASLA_D, &HOCMD_D, &HOSTA_D, &D0REG_D, &D1REG_D,  &HOBDB_D,       &IER0,  &ISR0,  Int_SMBUS3,   &PEC
             -ERC_D}        
  18          };
  19          
  20          const sResetSMBusS code asResetSMBusS[]=
  21          {
  22                  { &HOSTA_A, &HOCTL2_A, &SMBPCTL_A, &GPCRF2, &GPCRF3, &GPDRF,    (BIT2+BIT3),   &SMBus1RecoverCunt }, //SMbus
             - channel 0 is GPF2/3.  //MEILING002:change GPB3/4 to GPF2/3.
  23                  { &HOSTA_B, &HOCTL2_B, &SMBPCTL_B, &GPCRC1, &GPCRC2, &GPDRC,    (BIT1+BIT2),   &SMBus2RecoverCunt },
  24                  { &HOSTA_C, &HOCTL2_C, &SMBPCTL_C, &GPCRF6, &GPCRF7, &GPDRF,    (BIT6+BIT7),   &SMBus3RecoverCunt },
  25                  { &HOSTA_D, &HOCTL2_D, &SMBPCTL_D, &GPCRH1, &GPCRH2, &GPDRH,    (BIT1+BIT2),   &SMBus4RecoverCunt }
  26          }; 
  27          
  28          //----------------------------------------------------------------------------
  29          //      
  30          //----------------------------------------------------------------------------
  31          void DelayInact(void) 
  32          {
  33   1          BYTE index;
  34   1          BYTE counter;
  35   1              for(index=0;index<200;index++)
  36   1              {
  37   2              counter++;
  38   2              }
  39   1      }
  40          
  41          //----------------------------------------------------------------------------
  42          // The function of reseting SMbus       
  43          //----------------------------------------------------------------------------
  44          void ResetSMBus(BYTE Channel)
  45          {
  46   1          #ifdef PECI_Support
                  if(Channel==SMbusCh3)
                  {
                      return;
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 2   

                  }
                  #endif
  52   1          if(Channel==SMbusCh3)
  53   1          {
  54   2              return;
  55   2          }
  56   1      
  57   1          SET_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_KILL);
  58   1          CLEAR_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_KILL);
  59   1              //RSTC3=0x0F;                                               // Reset all SMBus module
  60   1              *asResetSMBusS[Channel].SMBusSTA = 0xFE;        // clear bits
  61   1          *asResetSMBusS[Channel].SMBusPin0 = OUTPUT;
  62   1              *asResetSMBusS[Channel].SMBusPin1 = OUTPUT;
  63   1              DelayInact();
  64   1              *asResetSMBusS[Channel].GPIOReg |= asResetSMBusS[Channel].GPIOData;
  65   1              DelayInact();
  66   1          *asResetSMBusS[Channel].SMBusPin0 = ALT;
  67   1              *asResetSMBusS[Channel].SMBusPin1 = ALT;
  68   1              *asResetSMBusS[Channel].SMBusCTL2 = 0x02;
  69   1              *asResetSMBusS[Channel].SMBusPinCTL = 0x03;
  70   1              DelayInact();
  71   1              *asResetSMBusS[Channel].SMBusPinCTL = 0x07;
  72   1              *asResetSMBusS[Channel].SMBusCTL2 = 0x01;
  73   1              Init_SMBus_Regs();
  74   1          #ifdef SMBusServiceCenterFunc
                  *asSSC[Channel].inusing=0x00;
                  CLEAR_MASK(*asSMBus[Channel].SMBusIER, asSMBus[Channel].IERFlag);
                  *asSMBus[Channel].SMBusISR = asSMBus[Channel].IERFlag;
                  *asSSC[Channel].serviceflag=0x00;
                  
                  
                  if(DB_SMBusAck1==ACK_Start)     // For SMBus utility
                  {
                      DB_SMBusAddr=0x00;
                      if(Channel==0x00)
                      {
                              DB_SMBusFlag1=0x00;             
                      }
                      else if(Channel==0x01)
                      {
                          DB_SMBusFlag2=0x00;
                      }
                      else if(Channel==0x02)
                      {
                          DB_SMBusFlag3=0x00; 
                      }                               
                                              
                          DB_SMBusACDID=0x00; 
                      DB_SMBusAck1 = ACK_Error;   // For SMBus utility error ACK.
                  }
                  #endif
 101   1      }
 102          
 103          //----------------------------------------------------------------------------
 104          // SMbus read byte/word and write byte/word function    
 105          //----------------------------------------------------------------------------
 106          BYTE bRWSMBus(BYTE Channel,BYTE Protocol,BYTE Addr,BYTE Comd,XBYTE *Var,BYTE PECSupport)
 107          {       
 108   1              BYTE counter;
 109   1              BYTE error;
 110   1          BYTE status;
 111   1          BYTE resutl;
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 3   

 112   1      
 113   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 114   1          {
 115   2              resutl = FALSE;                             // SMBus interface can't be used.
 116   2          }
 117   1          else
 118   1          {
 119   2              error = 0xEE;                               // Pre-set error
 120   2              resutl = FALSE;                             // Pre-set result is fail
 121   2          
 122   2              SMBCRC8_A=0x00;                             // Clear CRC variable
 123   2      
 124   2                  if (Protocol&0x80)                          // Write byte function
 125   2                  {   
 126   3                      if(PECSupport)    
 127   3                  {   
 128   4                      CalcCRC8(Addr);                     // To calculate crc8
 129   4                  }
 130   3                          *asSMBus[Channel].SMBusADR = Addr;      // set address with writing bit
 131   3                      if(PECSupport)    
 132   3                  {   
 133   4                      CalcCRC8(Comd);                     // To calculate crc8
 134   4                  }
 135   3                      *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 136   3                          Protocol&=(~0x80);
 137   3                  if(PECSupport)    
 138   3                  {   
 139   4                      CalcCRC8(*Var);                     // To calculate crc8
 140   4                  }
 141   3                          *asSMBus[Channel].SMBusData0 = *Var;    // set data1
 142   3                          if(Protocol==SMbusRW)                           // write word function
 143   3                          {
 144   4                              if(PECSupport)    
 145   4                      {   
 146   5                          CalcCRC8(*(Var+0x01));          // To calculate crc8
 147   5                      }
 148   4                                  *asSMBus[Channel].SMBusData1 = *(Var+0x01);
 149   4                          }                                                           // set data2
 150   3                  }   
 151   2                  else                                                                // Read function
 152   2                  {   
 153   3                          *asSMBus[Channel].SMBusADR=Addr|0x01;       
 154   3                  *asSMBus[Channel].SMBusCMD=Comd;        // Set command
 155   3                  }                                                                   // set address with reading bit
 156   2      
 157   2      
 158   2                  *asSMBus[Channel].SMBusSTA=0xFE;                // clear bits
 159   2                  if(PECSupport)
 160   2              {
 161   3                  *asSMBus[Channel].SMBusPEC=SMBCRC8_A;
 162   3                      *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT|HOCTL_PEC_EN);   // Start transaction
 163   3              }
 164   2              else
 165   2              {
 166   3                      *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT);        // Start transaction
 167   3              }
 168   2      
 169   2                  TR1 = 0;                                            // disable timer1
 170   2              ET1 = 0;                                        // Disable timer1 interrupt
 171   2              _nop_();
 172   2              _nop_();
 173   2              _nop_();
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 4   

 174   2              _nop_();
 175   2              TH1 = Timer_26ms>>8;                        // Set timer1 counter 26ms
 176   2              TL1 = Timer_26ms;                           // Set timer1 counter 26ms
 177   2              TF1 = 0;                                        // Clear overflow flag
 178   2              TR1 = 1;                                        // Enable timer1
 179   2      
 180   2                  while (!TF1)
 181   2                  {
 182   3                  status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 183   3                  if(IS_MASK_SET(status, (HOSTA_FINTR+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 184   3                  {
 185   4                      TR1=0;
 186   4                              TF1=0;
 187   4                      ET1=1;                                  // Enable timer1 interrupt
 188   4                      break;
 189   4                  }
 190   3                  }
 191   2              
 192   2                  if(TF1)                                     // 26ms time-out and no any status bit is set.
 193   2                  {
 194   3                  TR1=0;
 195   3                          TF1=0;
 196   3                  ET1=1;                                  // Enable timer1 interrupt
 197   3                  ResetSMBus(Channel);
 198   3                  error = 0xEE;
 199   3                  }
 200   2              else
 201   2              {
 202   3                  if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 203   3                  {
 204   4                      if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 205   4                      {
 206   5                          ResetSMBus(Channel);
 207   5                      }
 208   4                      error = 0xEE;
 209   4                  }
 210   3                  else                                    // Only Finish Interrupt bit is set.
 211   3                  {
 212   4                      error = 0x00;
 213   4                  }
 214   3              }
 215   2                                                          
 216   2                  if(error == 0xEE)                           // Fail
 217   2                  {
 218   3                          resutl = FALSE;
 219   3                  }
 220   2              else                                        // OK
 221   2              {
 222   3                      if ((*asSMBus[Channel].SMBusADR & 0x01 != 0x00)) 
 223   3                      {
 224   4                              *Var = *asSMBus[Channel].SMBusData0;    // read data1
 225   4                              if(Protocol==SMbusRW)
 226   4                              {
 227   5                                      *(Var+0x01) = *asSMBus[Channel].SMBusData1;
 228   5                              }                                                                   // read data2
 229   4                      }
 230   3                  resutl = TRUE;
 231   3              }
 232   2      
 233   2                  *asSMBus[Channel].SMBusSTA=0xFE;                // clear bits
 234   2          }
 235   1      
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 5   

 236   1              return(resutl);
 237   1      }
 238          
 239          //----------------------------------------------------------------------------
 240          // Read SMbus block function    
 241          //----------------------------------------------------------------------------
 242          BYTE bRSMBusBlock(BYTE Channel,BYTE Protocol,BYTE Addr,BYTE Comd,XBYTE *Var)
 243          {
 244   1              BYTE ack;
 245   1          BYTE bcount;
 246   1          BYTE status;
 247   1      
 248   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 249   1          {
 250   2              ack = FALSE;                            // SMBus interface can't be used.
 251   2          }
 252   1          else
 253   1          {
 254   2                  ack = FALSE;                                                // pr-set flag
 255   2                  bcount = 0x00;                                      // clear byte counter
 256   2              
 257   2                  *asSMBus[Channel].SMBusADR=Addr|0x01;   // set address with reading bit     
 258   2                  *asSMBus[Channel].SMBusCMD=Comd;        // Set command
 259   2              *asSMBus[Channel].SMBusSTA=0xFE;            // clear bits
 260   2              *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT);    // Start transaction
 261   2      
 262   2                  TR1 = 0;                                        // disable timer1
 263   2              ET1 = 0;                                    // Disable timer1 interrupt
 264   2              _nop_();
 265   2              _nop_();
 266   2              _nop_();
 267   2              _nop_();
 268   2              TH1 = Timer_26ms>>8;                    // Set timer1 counter 26ms
 269   2              TL1 = Timer_26ms;                       // Set timer1 counter 26ms
 270   2              TF1 = 0;                                    // Clear overflow flag
 271   2              TR1 = 1;                                    // Enable timer1
 272   2      
 273   2              while(!TF1)                             // Not time out
 274   2              {
 275   3                  status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 276   3                  if(IS_MASK_SET(status, (HOSTA_BDS+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 277   3                  {
 278   4                      if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 279   4                      {
 280   5                          if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 281   5                          {
 282   6                              ResetSMBus(Channel);
 283   6                          }
 284   5                          TR1 = 0;                            // disable timer1
 285   5                              TF1 = 0;                                // clear overflow flag
 286   5                              ET1 = 1;                                // Enable timer1 interrupt
 287   5                              ack = FALSE;
 288   5                          break;
 289   5                      }
 290   4                      else                            // Only Byte Done Status bit is set.
 291   4                      {
 292   5                              *Var = *asSMBus[Channel].SMBusBData;    // get first data
 293   5                              if(bcount ==0x00)
 294   5                              {
 295   6                                      bcount = *asSMBus[Channel].SMBusData0; // get the data of byte count 
 296   6                                      Hook_GetSMBusReadBlockByteCount(bcount);
 297   6                              //SMB_BCNT = bcount;      // For ACPI SMBus EC SMB1 Block Count register
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 6   

 298   6                              }       
 299   5                  
 300   5                              bcount--;
 301   5                              Var++;
 302   5          
 303   5                              if(bcount == 0x01)
 304   5                              {                                                   // set last byte flag
 305   6                                      SET_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_LABY);
 306   6                              }
 307   5          
 308   5                              *asSMBus[Channel].SMBusSTA=0xFE;    // clear bits
 309   5      
 310   5                              if(bcount == 0x00)
 311   5                              {
 312   6                              TR1 = 0;                            // disable timer1
 313   6                                  TF1 = 0;                        // clear overflow flag
 314   6                                  ET1 = 1;                        // Enable timer1 interrupt
 315   6                              ack = TRUE;
 316   6                              break;                  // SMBus read block done.
 317   6                          }
 318   5                      }
 319   4                  }
 320   3              }
 321   2      
 322   2              if(TF1)                                 // time-out
 323   2              {
 324   3                  TR1 = 0;                                    // disable timer1
 325   3                      TF1 = 0;                                        // clear overflow flag
 326   3                      ET1 = 1;                                        // Enable timer1 interrupt
 327   3                          ResetSMBus(Channel);
 328   3                          ack = FALSE;
 329   3              }
 330   2      
 331   2                  CLEAR_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_LABY);    // clear last byte flag
 332   2                  *asSMBus[Channel].SMBusSTA=0xFE;        // clear bits
 333   2          }
 334   1          
 335   1              return(ack);    
 336   1      }
 337          
 338          //----------------------------------------------------------------------------
 339          // Write SMbus block function   
 340          //----------------------------------------------------------------------------
 341          BYTE bWSMBusBlock(BYTE Channel,BYTE Protocol,BYTE Addr,BYTE Comd,XBYTE *Var,BYTE ByteCont,BYTE PECsupport)
 342          {       
 343   1              BYTE ack;
 344   1          BYTE BCTemp;
 345   1          BYTE status;
 346   1      
 347   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 348   1          {
 349   2              ack = FALSE;                            // SMBus interface can't be used.
 350   2          }
 351   1          else
 352   1          {
 353   2                  ack = FALSE;                                                // pre-set flag
 354   2                  BCTemp = 0x00;                                      // clear byte count
 355   2      
 356   2              if(PECsupport)
 357   2              {   
 358   3                  SMBCRC8_A=0x00;
 359   3                  CalcCRC8(Addr);
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 7   

 360   3                  CalcCRC8(Comd);
 361   3                  CalcCRC8(ByteCont);
 362   3                  CalcCRC8(*Var);
 363   3              }
 364   2          
 365   2                  Protocol&=(~0x80);                  
 366   2                  *asSMBus[Channel].SMBusADR=Addr;        // set address with writing flag
 367   2              *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 368   2              *asSMBus[Channel].SMBusData0=ByteCont;  // set byte count
 369   2              BCTemp=ByteCont;                            // sync byte count 
 370   2              *asSMBus[Channel].SMBusBData=*Var;          // set first data
 371   2              *asSMBus[Channel].SMBusSTA=0xFE;            // clear bits
 372   2                  if(PECsupport)
 373   2              {   
 374   3                  *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT|HOCTL_PEC_EN);// Start transaction
 375   3              }
 376   2              else
 377   2              {
 378   3                  *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT);// Start transaction
 379   3              }
 380   2      
 381   2                  TR1 = 0;                                        // disable timer1
 382   2              ET1 = 0;                                    // Disable timer1 interrupt
 383   2              _nop_();
 384   2              _nop_();
 385   2              _nop_();
 386   2              _nop_();
 387   2              TH1 = Timer_26ms>>8;                    // Set timer1 counter 26ms
 388   2              TL1 = Timer_26ms;                       // Set timer1 counter 26ms
 389   2              TF1 = 0;                                    // Clear overflow flag
 390   2              TR1 = 1;                                    // Enable timer1
 391   2      
 392   2              while(!TF1)                             // Not time out
 393   2              {
 394   3                  status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 395   3                  if(IS_MASK_SET(status, (HOSTA_BDS+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 396   3                  {
 397   4                      if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 398   4                      {
 399   5                          if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 400   5                          {
 401   6                              ResetSMBus(Channel);
 402   6                          }
 403   5                          TR1 = 0;                            // disable timer1
 404   5                              TF1 = 0;                                // clear overflow flag
 405   5                              ET1 = 1;                                // Enable timer1 interrupt
 406   5                              ack = FALSE;
 407   5                          break;
 408   5                      }
 409   4                      else                            // Only Byte Done Status bit is set.
 410   4                      {
 411   5                              BCTemp--;
 412   5                              Var++;                                      // point to next address of variable
 413   5      
 414   5                              if(BCTemp != 0x00)
 415   5                              {
 416   6                              if(PECsupport)
 417   6                              {
 418   7                                  *asSMBus[Channel].SMBusBData=*Var;
 419   7                                  CalcCRC8(*Var);
 420   7                                  if(BCTemp==0x01)    // last byte of byte count
 421   7                                  {
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 8   

 422   8                                      *asSMBus[Channel].SMBusPEC = SMBCRC8_A;
 423   8                                  }
 424   7                              }
 425   6                              else
 426   6                              {
 427   7                                          *asSMBus[Channel].SMBusBData=*Var;
 428   7                              }
 429   6                              *asSMBus[Channel].SMBusSTA=0xFE;    // clear bits
 430   6                              }
 431   5                          else                        // write block transaction done
 432   5                          {
 433   6                                  TR1 = 0;                        // disable timer1
 434   6                                  TF1 = 0;                        // clear overflow flag
 435   6                                  ET1 = 1;                        // Enable timer1 interrupt
 436   6                                  ack = TRUE;
 437   6                                  break;
 438   6                          }
 439   5                      }
 440   4                  }
 441   3              }
 442   2              
 443   2              if(TF1)                                 // time-out
 444   2              {
 445   3                  TR1 = 0;                                    // disable timer1
 446   3                      TF1 = 0;                                        // clear overflow flag
 447   3                      ET1 = 1;                                        // Enable timer1 interrupt
 448   3                          ResetSMBus(Channel);
 449   3                          ack = FALSE;
 450   3              }
 451   2              
 452   2                  *asSMBus[Channel].SMBusSTA=0xFE;        // clear bits
 453   2          }
 454   1          
 455   1              return(ack);
 456   1      } 
 457          
 458          //----------------------------------------------------------------------------
 459          // The function of SMbus send byte      
 460          //----------------------------------------------------------------------------
 461          BYTE bSMBusSendByte(BYTE Channel,BYTE Addr,BYTE SData)
 462          {
 463   1              BYTE error;
 464   1          BYTE result;
 465   1          BYTE status;
 466   1      
 467   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 468   1          {
 469   2              result = FALSE;                             // SMBus interface can't be used.
 470   2          }
 471   1          else
 472   1          {
 473   2              error = 0xEE;                               // Pre-set error
 474   2              result = FALSE;                             // Pre-set result is fail
 475   2              
 476   2                  *asSMBus[Channel].SMBusADR = Addr;          // set address with writing bit
 477   2                  *asSMBus[Channel].SMBusCMD = SData;         // Set command
 478   2                  *asSMBus[Channel].SMBusSTA = 0xFE;          // clear bits
 479   2                  *asSMBus[Channel].SMBusCTL = (0x04|HOCTL_SRT);  // Start transaction
 480   2      
 481   2              TR1 = 0;                                    // Disable timer1
 482   2              ET1 = 0;                                        // Disable timer1 interrupt
 483   2              _nop_();
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 9   

 484   2              _nop_();
 485   2              _nop_();
 486   2              _nop_();
 487   2              TH1 = Timer_26ms>>8;                        // Set timer1 counter 26ms
 488   2              TL1 = Timer_26ms;                           // Set timer1 counter 26ms
 489   2              TF1 = 0;                                        // Clear overflow flag
 490   2              TR1 = 1;                                        // Enable timer1
 491   2      
 492   2                  while (!TF1)
 493   2                  { 
 494   3                  status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 495   3                  if(IS_MASK_SET(status, (HOSTA_FINTR+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 496   3                  {
 497   4                      TR1=0;                              // Disable timer1
 498   4                                  TF1=0;                              // Clear overflow flag
 499   4                      ET1=1;                                  // Enable timer1 interrupt
 500   4                      break;
 501   4                  }
 502   3                  }
 503   2              
 504   2                  if(TF1)                                     // 26ms time-out and no any status bit is set.
 505   2                  {
 506   3                  TR1=0;
 507   3                          TF1=0;
 508   3                  ET1=1;                                  // Enable timer1 interrupt
 509   3                  ResetSMBus(Channel);
 510   3                  error = 0xEE;
 511   3                  }
 512   2              else
 513   2              {
 514   3                  if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 515   3                  {
 516   4                      if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 517   4                      {
 518   5                          ResetSMBus(Channel);
 519   5                      }
 520   4                      error = 0xEE;
 521   4                  }
 522   3                  else                                    // Only Finish Interrupt bit is set.
 523   3                  {
 524   4                      error = 0x00;
 525   4                  }
 526   3              }
 527   2          
 528   2                  if(error == 0xEE)
 529   2                  {
 530   3                          result = FALSE;
 531   3                  }
 532   2              else
 533   2              {
 534   3                  result = TRUE;
 535   3              }
 536   2                  *asSMBus[Channel].SMBusSTA=0xFE;    // clear bits
 537   2          }
 538   1          
 539   1              return(result);
 540   1      }
 541          
 542          //----------------------------------------------------------------------------
 543          // The function of SMbus receive byte   
 544          //----------------------------------------------------------------------------
 545          BYTE bSMBusReceiveByte(BYTE Channel,BYTE Addr,XBYTE *Var)
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 10  

 546          {
 547   1              BYTE error;
 548   1          BYTE result;
 549   1          BYTE status;
 550   1      
 551   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 552   1          {
 553   2              result = FALSE;                             // SMBus interface can't be used.
 554   2          }
 555   1          else
 556   1          {
 557   2              error = 0xEE;                               // Pre-set error
 558   2              result = FALSE;                             // Pre-set result is fail
 559   2              
 560   2                  *asSMBus[Channel].SMBusADR = (Addr|0x01);   // set address with writing bit
 561   2                  *asSMBus[Channel].SMBusSTA = 0xFE;              // clear bits
 562   2                  *asSMBus[Channel].SMBusCTL = (0x04|HOCTL_SRT);  // Start transaction
 563   2      
 564   2                  TR1 = 0;                                            // disable timer1
 565   2              ET1 = 0;                                        // Disable timer1 interrupt
 566   2              _nop_();
 567   2              _nop_();
 568   2              _nop_();
 569   2              _nop_();
 570   2              TH1 = Timer_26ms>>8;                        // Set timer1 counter 26ms
 571   2              TL1 = Timer_26ms;                           // Set timer1 counter 26ms
 572   2              TF1 = 0;                                        // Clear overflow flag
 573   2              TR1 = 1;                                        // Enable timer1
 574   2      
 575   2                  while (!TF1)
 576   2                  { 
 577   3                  status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 578   3                  if(IS_MASK_SET(status, (HOSTA_FINTR+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 579   3                  {
 580   4                      TR1=0;
 581   4                                  TF1=0;
 582   4                      ET1=1;                                  // Enable timer1 interrupt
 583   4                      break;
 584   4                  }
 585   3                  }
 586   2              
 587   2                  if(TF1)                                     // 26ms time-out and no any status bit is set.
 588   2                  {
 589   3                  TR1=0;
 590   3                          TF1=0;
 591   3                  ET1=1;                                  // Enable timer1 interrupt
 592   3                  ResetSMBus(Channel);
 593   3                  error = 0xEE;
 594   3                  }
 595   2              else
 596   2              {
 597   3                  if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 598   3                  {
 599   4                      if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 600   4                      {
 601   5                          ResetSMBus(Channel);
 602   5                      }
 603   4                      error = 0xEE;
 604   4                  }
 605   3                  else                                    // Only Finish Interrupt bit is set.
 606   3                  {
 607   4                      error = 0x00;
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 11  

 608   4                  }
 609   3              }
 610   2               
 611   2                  if(error == 0xEE)
 612   2                  {
 613   3                          result = FALSE; 
 614   3                  }   
 615   2              else
 616   2              {
 617   3                      *Var = *asSMBus[Channel].SMBusData0;    // read data
 618   3                      result = TRUE; 
 619   3              }
 620   2                  *asSMBus[Channel].SMBusSTA=0xFE;        // clear bits
 621   2          }
 622   1          
 623   1              return(result);
 624   1      }
 625          
 626          //----------------------------------------------------------------------------
 627          //
 628          //----------------------------------------------------------------------------
 629          void CalcCRC8(BYTE sourcebyte)
 630          {
 631   1          BYTE temp;
 632   1              SMBCRC8_A ^=sourcebyte;
 633   1          temp = SMBCRC8_A;
 634   1      
 635   1          if(IS_MASK_CLEAR(temp, BIT7))
 636   1          {
 637   2              temp = temp<<1;
 638   2              SMBCRC8_A ^= temp;
 639   2          }
 640   1          else
 641   1          {
 642   2              temp = temp<<1;
 643   2              SMBCRC8_A ^= 0x09;
 644   2              SMBCRC8_A ^= temp;
 645   2          }
 646   1          
 647   1          if(IS_MASK_CLEAR(temp, BIT7))
 648   1          {
 649   2              temp = temp<<1;
 650   2              SMBCRC8_A ^= temp;
 651   2          }
 652   1          else
 653   1          {
 654   2              temp = temp<<1;
 655   2              SMBCRC8_A ^= 0x07;
 656   2              SMBCRC8_A ^= temp;
 657   2          }
 658   1      }
 659          
 660          //----------------------------------------------------------------------------
 661          // The function of Checking SMbus clock and data pins are both high     
 662          //----------------------------------------------------------------------------
 663          BYTE CheckSMBusFree(BYTE channel)
 664          {
 665   1          BYTE pinstatus;
 666   1      
 667   1          pinstatus = *asResetSMBusS[channel].SMBusPinCTL;
 668   1      
 669   1          if((pinstatus&=0x03)==0x03) // Check BIT0 and BIT1
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 12  

 670   1          {
 671   2              return(SMBus_Free);
 672   2          }
 673   1          else
 674   1          {
 675   2              return(SMBus_Busy);
 676   2          }
 677   1      }
 678          
 679          //----------------------------------------------------------------------------
 680          // The function of Checking SMbus pins are all alt
 681          //----------------------------------------------------------------------------
 682          BYTE CheckSMBusInterfaceIsALT(BYTE channel)
 683          {
 684   1          if(((*asResetSMBusS[channel].SMBusPin0 & 0xFB)!=0x00)||((*asResetSMBusS[channel].SMBusPin1 & 0xFB)!=0x
             -00))
 685   1          {
 686   2              return(SMBusPin_GPIO);
 687   2          }
 688   1          else
 689   1          {
 690   2              return(SMBusPin_ALT);
 691   2          }
 692   1      }
 693          
 694          //----------------------------------------------------------------------------
 695          // The function of Checking SMbus pins are all alt
 696          //----------------------------------------------------------------------------
 697          BYTE CheckSMBusInterfaceCanbeUse(BYTE channel, BYTE accesstype)
 698          {
 699   1          BYTE checksmbus;
 700   1      
 701   1          checksmbus = SMBus_CanUse;                  // Pre-set smbus interface can be used
 702   1          
 703   1          #ifdef PECI_Support
                  if(channel==SMbusCh3)                       // If PECI function enable, return.
                  {
                      checksmbus = SMBus_CanNotUse;           // Interface can't be used
                      return(checksmbus);                     // return result
                  }
                  #endif
 710   1          
 711   1          if(CheckSMBusInterfaceIsALT(channel)==SMBusPin_GPIO)    // SMBus interface is GPIO function
 712   1          {
 713   2              checksmbus = SMBus_CanNotUse;           // Interface can't be used
 714   2          }
 715   1          else                                        // SMBus interface is ALT function
 716   1          {
 717   2              if(accesstype==SMBus_AccessType_Fucn)
 718   2              {
 719   3                  #ifdef SMBusServiceCenterFunc
                          WatiSMBusCHxFree(channel);          // Check smbus is in used or not.
                          #endif
 722   3              }
 723   2      
 724   2              if(CheckSMBusFree(channel)==SMBus_Busy)
 725   2              {
 726   3                  checksmbus = SMBus_CanNotUse;       // Interface can't be used
 727   3                  if( (*asResetSMBusS[channel].recoverCunt)++ >SMBus_BusyRecover)
 728   3                  {
 729   4                      ResetSMBus(channel);
 730   4                  }
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 13  

 731   3              }
 732   2              else
 733   2              {
 734   3                  *asResetSMBusS[channel].recoverCunt=0x00;
 735   3                  checksmbus = SMBus_CanUse;          // smbus interface can be used
 736   3              }
 737   2          }
 738   1      
 739   1          return(checksmbus);                         // return result
 740   1      }
 741          
 742          //----------------------------------------------------------------------------
 743          // To init. SMBus setting
 744          //----------------------------------------------------------------------------
 745          void Core_Init_SMBus(void)
 746          {
 747   1          SMBus_BusyRecover = 20;         // Reset SMBus interface if bus clock pin or data pin is low greater t
             -han SMBus_BusyRecover times.
 748   1      }
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0072 (BEGIN)
0000         L?0115:
0000 4401              ORL     A,#01H
0002 FF                MOV     R7,A
0003         L?0116:
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005         L?0117:
0005 75F015            MOV     B,#015H
0008 A4                MUL     AB
0009 2400        R     ADD     A,#LOW asSMBus+02H
000B F582              MOV     DPL,A
000D E4                CLR     A
000E 3400        R     ADDC    A,#HIGH asSMBus+02H
0010         L?0118:
0010 F583              MOV     DPH,A
0012 E4                CLR     A
0013 93                MOVC    A,@A+DPTR
0014 FC                MOV     R4,A
0015 7401              MOV     A,#01H
0017 93                MOVC    A,@A+DPTR
0018 F582              MOV     DPL,A
001A 8C83              MOV     DPH,R4
001C 22                RET     
001D         L?0119:
001D 900000      R     MOV     DPTR,#Channel
0020         L?0120:
0020 E0                MOVX    A,@DPTR
0021         L?0121:
0021 75F015            MOV     B,#015H
0024 A4                MUL     AB
0025 2400        R     ADD     A,#LOW asSMBus+06H
0027 F582              MOV     DPL,A
0029 E4                CLR     A
002A 3400        R     ADDC    A,#HIGH asSMBus+06H
002C         L?0122:
002C F583              MOV     DPH,A
002E E4                CLR     A
002F 93                MOVC    A,@A+DPTR
0030 FE                MOV     R6,A
0031 7401              MOV     A,#01H
0033 93                MOVC    A,@A+DPTR
0034 F582              MOV     DPL,A
0036 8E83              MOV     DPH,R6
0038 22                RET     
0039         L?0123:
0039 900000      R     MOV     DPTR,#Channel
003C         L?0124:
003C E0                MOVX    A,@DPTR
003D         L?0125:
003D 75F015            MOV     B,#015H
0040 A4                MUL     AB
0041 2400        R     ADD     A,#LOW asSMBus
0043 F582              MOV     DPL,A
0045 E4                CLR     A
0046 3400        R     ADDC    A,#HIGH asSMBus
0048 22                RET     
0049         L?0126:
0049         L?0127:
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 15  

0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B EE                MOV     A,R6
004C         L?0128:
004C 75F015            MOV     B,#015H
004F A4                MUL     AB
0050 2400        R     ADD     A,#LOW asSMBus+04H
0052 F582              MOV     DPL,A
0054 E4                CLR     A
0055 3400        R     ADDC    A,#HIGH asSMBus+04H
0057 22                RET     
0058         L?0129:
0058 E0                MOVX    A,@DPTR
0059         L?0130:
0059 75F015            MOV     B,#015H
005C A4                MUL     AB
005D 2400        R     ADD     A,#LOW asSMBus+08H
005F F582              MOV     DPL,A
0061 E4                CLR     A
0062 3400        R     ADDC    A,#HIGH asSMBus+08H
0064 22                RET     
0065         L?0131:
0065         L?0132:
0065 C28E              CLR     TR1
0067 C28F              CLR     TF1
0069 D2AB              SETB    ET1
006B 22                RET     
006C         L?0133:
006C         L?0134:
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E         L?0135:
006E 75F015            MOV     B,#015H
0071 A4                MUL     AB
0072 2400        R     ADD     A,#LOW asSMBus+06H
0074 F582              MOV     DPL,A
0076 E4                CLR     A
0077 3400        R     ADDC    A,#HIGH asSMBus+06H
0079 22                RET     
007A         L?0136:
007A         L?0137:
007A 758DB2            MOV     TH1,#0B2H
007D 758B19            MOV     TL1,#019H
0080 C28F              CLR     TF1
0082 D28E              SETB    TR1
0084 22                RET     
0085         L?0138:
0085 900000      R     MOV     DPTR,#Channel
0088 E0                MOVX    A,@DPTR
0089         L?0139:
0089 75F015            MOV     B,#015H
008C A4                MUL     AB
008D 2400        R     ADD     A,#LOW asSMBus+0CH
008F F582              MOV     DPL,A
0091 E4                CLR     A
0092 3400        R     ADDC    A,#HIGH asSMBus+0CH
0094 22                RET     
0095         L?0140:
0095         L?0141:
0095 900000      R     MOV     DPTR,#Var
0098         L?0142:
0098 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 16  

0099 FE                MOV     R6,A
009A A3                INC     DPTR
009B E0                MOVX    A,@DPTR
009C F582              MOV     DPL,A
009E 8E83              MOV     DPH,R6
00A0 E0                MOVX    A,@DPTR
00A1 FF                MOV     R7,A
00A2 22                RET     
00A3         L?0143:
00A3 E4                CLR     A
00A4         L?0144:
00A4 F0                MOVX    @DPTR,A
00A5 EE                MOV     A,R6
00A6 75F00F            MOV     B,#0FH
00A9 A4                MUL     AB
00AA 22                RET     
00AB         L?0145:
00AB         L?0146:
00AB F583              MOV     DPH,A
00AD E4                CLR     A
00AE 93                MOVC    A,@A+DPTR
00AF FA                MOV     R2,A
00B0 7401              MOV     A,#01H
00B2 93                MOVC    A,@A+DPTR
00B3 F582              MOV     DPL,A
00B5 8A83              MOV     DPH,R2
00B7 22                RET     
00B8         L?0147:
00B8 75F00F            MOV     B,#0FH
00BB A4                MUL     AB
00BC         L?0148:
00BC 2400        R     ADD     A,#LOW asResetSMBusS+06H
00BE F582              MOV     DPL,A
00C0 E4                CLR     A
00C1 3400        R     ADDC    A,#HIGH asResetSMBusS+06H
00C3 22                RET     
00C4         L?0149:
00C4 75F00F            MOV     B,#0FH
00C7 A4                MUL     AB
00C8         L?0150:
00C8 2400        R     ADD     A,#LOW asResetSMBusS+04H
00CA F582              MOV     DPL,A
00CC E4                CLR     A
00CD 3400        R     ADDC    A,#HIGH asResetSMBusS+04H
00CF 22                RET     
00D0         L?0151:
00D0 900000      R     MOV     DPTR,#Channel
00D3 E0                MOVX    A,@DPTR
00D4 75F015            MOV     B,#015H
00D7 A4                MUL     AB
00D8 2400        R     ADD     A,#LOW asSMBus+0AH
00DA F582              MOV     DPL,A
00DC E4                CLR     A
00DD 3400        R     ADDC    A,#HIGH asSMBus+0AH
00DF 22                RET     
00E0         L?0152:
00E0         L?0153:
00E0 2400        R     ADD     A,#LOW asResetSMBusS+08H
00E2 F582              MOV     DPL,A
00E4 E4                CLR     A
00E5 3400        R     ADDC    A,#HIGH asResetSMBusS+08H
00E7 22                RET     
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 17  

00E8         L?0154:
00E8 E0                MOVX    A,@DPTR
00E9 FE                MOV     R6,A
00EA A3                INC     DPTR
00EB E0                MOVX    A,@DPTR
00EC FF                MOV     R7,A
00ED F582              MOV     DPL,A
00EF 8E83              MOV     DPH,R6
00F1 E0                MOVX    A,@DPTR
00F2 FD                MOV     R5,A
00F3 22                RET     
00F4         L?0155:
00F4 75F015            MOV     B,#015H
00F7 A4                MUL     AB
00F8 2400        R     ADD     A,#LOW asSMBus+013H
00FA F582              MOV     DPL,A
00FC E4                CLR     A
00FD 3400        R     ADDC    A,#HIGH asSMBus+013H
00FF 22                RET     
0100         L?0156:
0100 75F00F            MOV     B,#0FH
0103 A4                MUL     AB
0104 2400        R     ADD     A,#LOW asResetSMBusS+0DH
0106 F582              MOV     DPL,A
0108 E4                CLR     A
0109 3400        R     ADDC    A,#HIGH asResetSMBusS+0DH
010B 22                RET     
             ; FUNCTION Com0072 (END)

             ; FUNCTION DelayInact (BEGIN)
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 35
;---- Variable 'index' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002         ?C0001:
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
0002 900000      R     MOV     DPTR,#counter
0005 E0                MOVX    A,@DPTR
0006 04                INC     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 38
0008 0F                INC     R7
0009 EF                MOV     A,R7
000A B4C8F5            CJNE    A,#0C8H,?C0001
                                           ; SOURCE LINE # 39
000D         ?C0004:
000D 22                RET     
             ; FUNCTION DelayInact (END)

             ; FUNCTION _ResetSMBus (BEGIN)
                                           ; SOURCE LINE # 44
;---- Variable 'Channel' assigned to Register 'R6' ----
0000 CE                XCH     A,R6
0001 EF                MOV     A,R7
0002 CE                XCH     A,R6
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 52
0003 EE                MOV     A,R6
0004 6402              XRL     A,#02H
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 18  

0006 7003              JNZ     $ + 5H
0008 020000      R     LJMP    ?C0006
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 55
000B         ?C0005:
                                           ; SOURCE LINE # 57
000B EE                MOV     A,R6
000C 120000      R     LCALL   L?0125
000F 120000      R     LCALL   L?0118
0012 E0                MOVX    A,@DPTR
0013 4402              ORL     A,#02H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 58
0016 E0                MOVX    A,@DPTR
0017 54FD              ANL     A,#0FDH
                                           ; SOURCE LINE # 60
0019 120000      R     LCALL   L?0144
001C 2400        R     ADD     A,#LOW asResetSMBusS
001E F582              MOV     DPL,A
0020 E4                CLR     A
0021 3400        R     ADDC    A,#HIGH asResetSMBusS
0023 120000      R     LCALL   L?0118
0026 74FE              MOV     A,#0FEH
                                           ; SOURCE LINE # 61
0028 120000      R     LCALL   L?0144
002B 120000      R     LCALL   L?0148
002E 120000      R     LCALL   L?0118
0031 7440              MOV     A,#040H
                                           ; SOURCE LINE # 62
0033 120000      R     LCALL   L?0144
0036 120000      R     LCALL   L?0152
0039 120000      R     LCALL   L?0118
003C 7440              MOV     A,#040H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
003F 120000      R     LCALL   DelayInact
                                           ; SOURCE LINE # 64
0042 EE                MOV     A,R6
0043 75F00F            MOV     B,#0FH
0046 A4                MUL     AB
0047 2400        R     ADD     A,#LOW asResetSMBusS+0AH
0049 F582              MOV     DPL,A
004B E4                CLR     A
004C 3400        R     ADDC    A,#HIGH asResetSMBusS+0AH
004E 120000      R     LCALL   L?0118
0051 C083              PUSH    DPH
0053 C082              PUSH    DPL
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 EE                MOV     A,R6
0058 75F00F            MOV     B,#0FH
005B A4                MUL     AB
005C 2400        R     ADD     A,#LOW asResetSMBusS+0CH
005E F582              MOV     DPL,A
0060 E4                CLR     A
0061 3400        R     ADDC    A,#HIGH asResetSMBusS+0CH
0063 F583              MOV     DPH,A
0065 E4                CLR     A
0066 93                MOVC    A,@A+DPTR
0067 FD                MOV     R5,A
0068 EF                MOV     A,R7
0069 4D                ORL     A,R5
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 19  

006A D082              POP     DPL
006C D083              POP     DPH
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
006F 120000      R     LCALL   DelayInact
                                           ; SOURCE LINE # 66
0072 EE                MOV     A,R6
0073 120000      R     LCALL   L?0147
0076 120000      R     LCALL   L?0118
                                           ; SOURCE LINE # 67
0079 120000      R     LCALL   L?0143
007C 120000      R     LCALL   L?0152
007F 120000      R     LCALL   L?0118
                                           ; SOURCE LINE # 68
0082 120000      R     LCALL   L?0143
0085 2400        R     ADD     A,#LOW asResetSMBusS+02H
0087 F582              MOV     DPL,A
0089 E4                CLR     A
008A 3400        R     ADDC    A,#HIGH asResetSMBusS+02H
008C 120000      R     LCALL   L?0118
008F 7402              MOV     A,#02H
                                           ; SOURCE LINE # 69
0091 120000      R     LCALL   L?0144
0094 120000      R     LCALL   L?0150
0097 120000      R     LCALL   L?0118
009A 7403              MOV     A,#03H
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
009D 120000      R     LCALL   DelayInact
                                           ; SOURCE LINE # 71
00A0 EE                MOV     A,R6
00A1 120000      R     LCALL   L?0149
00A4 120000      R     LCALL   L?0118
00A7 7407              MOV     A,#07H
                                           ; SOURCE LINE # 72
00A9 120000      R     LCALL   L?0144
00AC 2400        R     ADD     A,#LOW asResetSMBusS+02H
00AE F582              MOV     DPL,A
00B0 E4                CLR     A
00B1 3400        R     ADDC    A,#HIGH asResetSMBusS+02H
00B3 120000      R     LCALL   L?0122
00B6 7401              MOV     A,#01H
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
00B9 120000      E     LCALL   Init_SMBus_Regs
                                           ; SOURCE LINE # 101
00BC         ?C0006:
00BC 22                RET     
             ; FUNCTION _ResetSMBus (END)

             ; FUNCTION _bRWSMBus (BEGIN)
                                           ; SOURCE LINE # 106
0000 900000      R     MOV     DPTR,#Protocol
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 20  

                                           ; SOURCE LINE # 113
000D 7D01              MOV     R5,#01H
000F 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 7007              JNZ     ?C0007
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
0015 900000      R     MOV     DPTR,#resutl
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
0019 020000      R     LJMP    ?C0008
001C         ?C0007:
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
001C 900000      R     MOV     DPTR,#error
001F 74EE              MOV     A,#0EEH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
0022 E4                CLR     A
0023 900000      R     MOV     DPTR,#resutl
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
0027 7800        E     MOV     R0,#LOW SMBCRC8_A
0029 F6                MOV     @R0,A
                                           ; SOURCE LINE # 124
002A 900000      R     MOV     DPTR,#Protocol
002D E0                MOVX    A,@DPTR
002E 20E703            JB      ACC.7,$ + 6H
0031 020000      R     LJMP    ?C0009
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
0034 900000      R     MOV     DPTR,#PECSupport
0037 E0                MOVX    A,@DPTR
0038 6008              JZ      ?C0010
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
003A 900000      R     MOV     DPTR,#Addr
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 129
0042         ?C0010:
                                           ; SOURCE LINE # 130
0042 900000      R     MOV     DPTR,#Addr
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 900000      R     MOV     DPTR,#Channel
004A E0                MOVX    A,@DPTR
004B 120000      R     LCALL   L?0117
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
0050 900000      R     MOV     DPTR,#PECSupport
0053 E0                MOVX    A,@DPTR
0054 6008              JZ      ?C0011
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
0056 900000      R     MOV     DPTR,#Comd
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 134
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 21  

005E         ?C0011:
                                           ; SOURCE LINE # 135
005E 900000      R     MOV     DPTR,#Comd
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 900000      R     MOV     DPTR,#Channel
0066 E0                MOVX    A,@DPTR
0067 120000      R     LCALL   L?0128
006A 120000      R     LCALL   L?0118
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
006F 900000      R     MOV     DPTR,#Protocol
0072 E0                MOVX    A,@DPTR
0073 547F              ANL     A,#07FH
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0076 900000      R     MOV     DPTR,#PECSupport
0079 E0                MOVX    A,@DPTR
007A 6009              JZ      ?C0012
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
007C 900000      R     MOV     DPTR,#Var
007F 120000      R     LCALL   L?0142
0082 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 140
0085         ?C0012:
                                           ; SOURCE LINE # 141
0085 900000      R     MOV     DPTR,#Var
0088 120000      R     LCALL   L?0154
008B 900000      R     MOV     DPTR,#Channel
008E 120000      R     LCALL   L?0129
0091 120000      R     LCALL   L?0145
0094 ED                MOV     A,R5
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
0096 900000      R     MOV     DPTR,#Protocol
0099 E0                MOVX    A,@DPTR
009A 640C              XRL     A,#0CH
009C 703F              JNZ     ?C0015
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
009E 900000      R     MOV     DPTR,#PECSupport
00A1 E0                MOVX    A,@DPTR
00A2 600A              JZ      ?C0014
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
00A4 8F82              MOV     DPL,R7
00A6 8E83              MOV     DPH,R6
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 147
00AE         ?C0014:
                                           ; SOURCE LINE # 148
00AE 900000      R     MOV     DPTR,#Var
00B1 E0                MOVX    A,@DPTR
00B2 FE                MOV     R6,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 F582              MOV     DPL,A
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 22  

00B7 8E83              MOV     DPH,R6
00B9 A3                INC     DPTR
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC 120000      R     LCALL   L?0151
00BF 120000      R     LCALL   L?0118
00C2 EF                MOV     A,R7
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 150
00C4 8017              SJMP    ?C0015
00C6         ?C0009:
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
00C6 900000      R     MOV     DPTR,#Addr
00C9 E0                MOVX    A,@DPTR
00CA 900000      R     MOV     DPTR,#Channel
00CD 120000      R     LCALL   L?0115
00D0 EF                MOV     A,R7
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
00D2 900000      R     MOV     DPTR,#Comd
00D5 120000      R     LCALL   L?0126
00D8 120000      R     LCALL   L?0118
00DB EF                MOV     A,R7
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
00DD         ?C0015:
                                           ; SOURCE LINE # 158
00DD 900000      R     MOV     DPTR,#Channel
00E0 120000      R     LCALL   L?0133
00E3 120000      R     LCALL   L?0118
00E6 74FE              MOV     A,#0FEH
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
00E9 900000      R     MOV     DPTR,#PECSupport
00EC E0                MOVX    A,@DPTR
00ED 601B              JZ      ?C0016
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
00EF 7800        E     MOV     R0,#LOW SMBCRC8_A
00F1 E6                MOV     A,@R0
00F2 FE                MOV     R6,A
00F3 900000      R     MOV     DPTR,#Channel
00F6 E0                MOVX    A,@DPTR
00F7 FD                MOV     R5,A
00F8 120000      R     LCALL   L?0155
00FB 120000      R     LCALL   L?0145
00FE EE                MOV     A,R6
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
0100 900000      R     MOV     DPTR,#Protocol
0103 E0                MOVX    A,@DPTR
0104 44C0              ORL     A,#0C0H
0106 FE                MOV     R6,A
0107 ED                MOV     A,R5
                                           ; SOURCE LINE # 163
0108 8008              SJMP    ?C0108
010A         ?C0016:
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
010A 900000      R     MOV     DPTR,#Protocol
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 23  

010D E0                MOVX    A,@DPTR
010E 4440              ORL     A,#040H
0110 FE                MOV     R6,A
0111 EF                MOV     A,R7
0112         ?C0108:
0112 120000      R     LCALL   L?0125
0115 120000      R     LCALL   L?0118
0118 EE                MOV     A,R6
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
011A         ?C0017:
                                           ; SOURCE LINE # 169
011A C28E              CLR     TR1
                                           ; SOURCE LINE # 170
011C C2AB              CLR     ET1
                                           ; SOURCE LINE # 171
011E 00                NOP     
                                           ; SOURCE LINE # 172
011F 00                NOP     
                                           ; SOURCE LINE # 173
0120 00                NOP     
                                           ; SOURCE LINE # 174
0121 00                NOP     
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
0122 120000      R     LCALL   L?0136
0125         ?C0018:
                                           ; SOURCE LINE # 180
0125 208F10            JB      TF1,?C0019
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
0128 120000      R     LCALL   L?0119
012B E0                MOVX    A,@DPTR
012C 900000      R     MOV     DPTR,#status
012F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
0130 E0                MOVX    A,@DPTR
0131 547E              ANL     A,#07EH
0133 60F0              JZ      ?C0018
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
0135 120000      R     LCALL   L?0131
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
0138         ?C0019:
                                           ; SOURCE LINE # 192
0138 308F0D            JNB     TF1,?C0021
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
013B 120000      R     LCALL   L?0131
                                           ; SOURCE LINE # 197
013E 900000      R     MOV     DPTR,#Channel
0141 E0                MOVX    A,@DPTR
0142 FF                MOV     R7,A
0143 120000      R     LCALL   _ResetSMBus
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 24  

                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
0146 8016              SJMP    ?C0109
0148         ?C0021:
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
0148 900000      R     MOV     DPTR,#status
014B E0                MOVX    A,@DPTR
014C FF                MOV     R7,A
014D 547C              ANL     A,#07CH
014F 6015              JZ      ?C0023
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
0151 EF                MOV     A,R7
0152 5418              ANL     A,#018H
0154 6008              JZ      ?C0024
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
0156 900000      R     MOV     DPTR,#Channel
0159 E0                MOVX    A,@DPTR
015A FF                MOV     R7,A
015B 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 207
015E         ?C0024:
                                           ; SOURCE LINE # 208
015E         ?C0109:
015E 900000      R     MOV     DPTR,#error
0161 74EE              MOV     A,#0EEH
0163 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
0164 8005              SJMP    ?C0022
0166         ?C0023:
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0166 E4                CLR     A
0167 900000      R     MOV     DPTR,#error
016A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
016B         ?C0022:
                                           ; SOURCE LINE # 216
016B 900000      R     MOV     DPTR,#error
016E E0                MOVX    A,@DPTR
016F B4EE07            CJNE    A,#0EEH,?C0026
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
0172 E4                CLR     A
0173 900000      R     MOV     DPTR,#resutl
0176 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0177 803D              SJMP    ?C0027
0179         ?C0026:
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
0179 900000      R     MOV     DPTR,#Channel
017C E0                MOVX    A,@DPTR
017D FF                MOV     R7,A
017E 120000      R     LCALL   L?0117
0181 E0                MOVX    A,@DPTR
0182 30E02B            JNB     ACC.0,?C0028
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 25  

0185 EF                MOV     A,R7
0186 120000      R     LCALL   L?0130
0189 120000      R     LCALL   L?0122
018C E0                MOVX    A,@DPTR
018D FF                MOV     R7,A
018E 900000      R     MOV     DPTR,#Var
0191 E0                MOVX    A,@DPTR
0192 FC                MOV     R4,A
0193 A3                INC     DPTR
0194 E0                MOVX    A,@DPTR
0195 FD                MOV     R5,A
0196 F582              MOV     DPL,A
0198 8C83              MOV     DPH,R4
019A EF                MOV     A,R7
019B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
019C 900000      R     MOV     DPTR,#Protocol
019F E0                MOVX    A,@DPTR
01A0 B40C0D            CJNE    A,#0CH,?C0028
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
01A3 120000      R     LCALL   L?0151
01A6 120000      R     LCALL   L?0122
01A9 E0                MOVX    A,@DPTR
01AA 8D82              MOV     DPL,R5
01AC 8C83              MOV     DPH,R4
01AE A3                INC     DPTR
01AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
01B0         ?C0028:
                                           ; SOURCE LINE # 230
01B0 900000      R     MOV     DPTR,#resutl
01B3 7401              MOV     A,#01H
01B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
01B6         ?C0027:
                                           ; SOURCE LINE # 233
01B6 120000      R     LCALL   L?0119
01B9 74FE              MOV     A,#0FEH
01BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
01BC         ?C0008:
                                           ; SOURCE LINE # 236
01BC 900000      R     MOV     DPTR,#resutl
01BF E0                MOVX    A,@DPTR
01C0 FF                MOV     R7,A
                                           ; SOURCE LINE # 237
01C1         ?C0030:
01C1 22                RET     
             ; FUNCTION _bRWSMBus (END)

             ; FUNCTION _bRSMBusBlock (BEGIN)
                                           ; SOURCE LINE # 242
0000 900000      R     MOV     DPTR,#Protocol
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 26  

000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 248
000D 7D01              MOV     R5,#01H
000F 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 7007              JNZ     ?C0031
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
0015 900000      R     MOV     DPTR,#ack
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
0019 020000      R     LJMP    ?C0032
001C         ?C0031:
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
001C E4                CLR     A
001D 900000      R     MOV     DPTR,#ack
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
0021 A3                INC     DPTR
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
0023 900000      R     MOV     DPTR,#Addr
0026 E0                MOVX    A,@DPTR
0027 900000      R     MOV     DPTR,#Channel
002A 120000      R     LCALL   L?0115
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
002F 900000      R     MOV     DPTR,#Comd
0032 120000      R     LCALL   L?0126
0035 120000      R     LCALL   L?0118
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
003A EE                MOV     A,R6
003B 120000      R     LCALL   L?0121
003E 74FE              MOV     A,#0FEH
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 260
0041 900000      R     MOV     DPTR,#Protocol
0044 E0                MOVX    A,@DPTR
0045 4440              ORL     A,#040H
0047 FF                MOV     R7,A
0048 120000      R     LCALL   L?0123
004B 120000      R     LCALL   L?0118
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
0050 C28E              CLR     TR1
                                           ; SOURCE LINE # 263
0052 C2AB              CLR     ET1
                                           ; SOURCE LINE # 264
0054 00                NOP     
                                           ; SOURCE LINE # 265
0055 00                NOP     
                                           ; SOURCE LINE # 266
0056 00                NOP     
                                           ; SOURCE LINE # 267
0057 00                NOP     
                                           ; SOURCE LINE # 268
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 27  

                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
0058 120000      R     LCALL   L?0136
005B         ?C0033:
                                           ; SOURCE LINE # 273
005B 308F03            JNB     TF1,$ + 6H
005E 020000      R     LJMP    ?C0034
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
0061 900000      R     MOV     DPTR,#Channel
0064 120000      R     LCALL   L?0133
0067 120000      R     LCALL   L?0118
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
;---- Variable 'status' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 276
006C 54FC              ANL     A,#0FCH
006E 60EB              JZ      ?C0033
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
0070 EE                MOV     A,R6
0071 547C              ANL     A,#07CH
0073 6013              JZ      ?C0036
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
0075 EE                MOV     A,R6
0076 5418              ANL     A,#018H
0078 6003              JZ      ?C0037
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
007A 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 283
007D         ?C0037:
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
007D 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 287
0080 E4                CLR     A
0081 900000      R     MOV     DPTR,#ack
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
0085 020000      R     LJMP    ?C0034
                                           ; SOURCE LINE # 289
0088         ?C0036:
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
0088 900000      R     MOV     DPTR,#Channel
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D 120000      R     LCALL   L?0139
0090 120000      R     LCALL   L?0118
0093 E0                MOVX    A,@DPTR
0094 FE                MOV     R6,A
0095 900000      R     MOV     DPTR,#Var
0098 E0                MOVX    A,@DPTR
0099 FC                MOV     R4,A
009A A3                INC     DPTR
009B E0                MOVX    A,@DPTR
009C F582              MOV     DPL,A
009E 8C83              MOV     DPH,R4
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 28  

00A0 EE                MOV     A,R6
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
00A2 900000      R     MOV     DPTR,#bcount
00A5 E0                MOVX    A,@DPTR
00A6 7011              JNZ     ?C0039
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 295
00A8 EF                MOV     A,R7
00A9 120000      R     LCALL   L?0130
00AC 120000      R     LCALL   L?0122
00AF E0                MOVX    A,@DPTR
00B0 900000      R     MOV     DPTR,#bcount
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 120000      E     LCALL   _Hook_GetSMBusReadBlockByteCount
                                           ; SOURCE LINE # 298
00B9         ?C0039:
                                           ; SOURCE LINE # 300
00B9 900000      R     MOV     DPTR,#bcount
00BC E0                MOVX    A,@DPTR
00BD 14                DEC     A
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 301
00BF 900000      R     MOV     DPTR,#Var
00C2 E4                CLR     A
00C3 75F001            MOV     B,#01H
00C6 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 303
00C9 900000      R     MOV     DPTR,#bcount
00CC E0                MOVX    A,@DPTR
00CD FF                MOV     R7,A
00CE B4010A            CJNE    A,#01H,?C0040
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
00D1 120000      R     LCALL   L?0123
00D4 120000      R     LCALL   L?0118
00D7 E0                MOVX    A,@DPTR
00D8 4420              ORL     A,#020H
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
00DB         ?C0040:
                                           ; SOURCE LINE # 308
00DB 900000      R     MOV     DPTR,#Channel
00DE E0                MOVX    A,@DPTR
00DF 120000      R     LCALL   L?0135
00E2 120000      R     LCALL   L?0118
00E5 74FE              MOV     A,#0FEH
00E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
00E8 EF                MOV     A,R7
00E9 6003              JZ      $ + 5H
00EB 020000      R     LJMP    ?C0033
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
00EE 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 315
00F1 900000      R     MOV     DPTR,#ack
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 29  

00F4 04                INC     A
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
00F6         ?C0034:
                                           ; SOURCE LINE # 322
00F6 308F10            JNB     TF1,?C0042
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
00F9 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 327
00FC 900000      R     MOV     DPTR,#Channel
00FF E0                MOVX    A,@DPTR
0100 FF                MOV     R7,A
0101 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 328
0104 E4                CLR     A
0105 900000      R     MOV     DPTR,#ack
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
0109         ?C0042:
                                           ; SOURCE LINE # 331
0109 900000      R     MOV     DPTR,#Channel
010C E0                MOVX    A,@DPTR
010D FF                MOV     R7,A
010E 120000      R     LCALL   L?0125
0111 120000      R     LCALL   L?0118
0114 E0                MOVX    A,@DPTR
0115 54DF              ANL     A,#0DFH
0117 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 332
0118 EF                MOV     A,R7
0119 120000      R     LCALL   L?0121
011C 74FE              MOV     A,#0FEH
011E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
011F         ?C0032:
                                           ; SOURCE LINE # 335
011F 900000      R     MOV     DPTR,#ack
0122 E0                MOVX    A,@DPTR
0123 FF                MOV     R7,A
                                           ; SOURCE LINE # 336
0124         ?C0043:
0124 22                RET     
             ; FUNCTION _bRSMBusBlock (END)

             ; FUNCTION _bWSMBusBlock (BEGIN)
                                           ; SOURCE LINE # 341
0000 900000      R     MOV     DPTR,#Protocol
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 30  

                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 347
000D 7D01              MOV     R5,#01H
000F 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 7007              JNZ     ?C0044
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
0015 900000      R     MOV     DPTR,#ack
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 350
0019 020000      R     LJMP    ?C0045
001C         ?C0044:
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
001C E4                CLR     A
001D 900000      R     MOV     DPTR,#ack
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
0021 A3                INC     DPTR
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 356
0023 900000      R     MOV     DPTR,#PECsupport
0026 E0                MOVX    A,@DPTR
0027 6022              JZ      ?C0046
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
0029 E4                CLR     A
002A 7800        E     MOV     R0,#LOW SMBCRC8_A
002C F6                MOV     @R0,A
                                           ; SOURCE LINE # 359
002D 900000      R     MOV     DPTR,#Addr
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 360
0035 900000      R     MOV     DPTR,#Comd
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 361
003D 900000      R     MOV     DPTR,#ByteCont
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 362
0045 120000      R     LCALL   L?0140
0048 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 363
004B         ?C0046:
                                           ; SOURCE LINE # 365
004B 900000      R     MOV     DPTR,#Protocol
004E E0                MOVX    A,@DPTR
004F 547F              ANL     A,#07FH
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
0052 A3                INC     DPTR
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 900000      R     MOV     DPTR,#Channel
0058 120000      R     LCALL   L?0116
005B EF                MOV     A,R7
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 31  

005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
005D 900000      R     MOV     DPTR,#Comd
0060 120000      R     LCALL   L?0127
0063 120000      R     LCALL   L?0118
0066 EF                MOV     A,R7
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
0068 900000      R     MOV     DPTR,#ByteCont
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D EE                MOV     A,R6
006E 120000      R     LCALL   L?0130
0071 120000      R     LCALL   L?0118
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
0076 900000      R     MOV     DPTR,#BCTemp
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
007B 120000      R     LCALL   L?0140
007E 900000      R     MOV     DPTR,#Channel
0081 E0                MOVX    A,@DPTR
0082 FE                MOV     R6,A
0083 120000      R     LCALL   L?0139
0086 120000      R     LCALL   L?0118
0089 EF                MOV     A,R7
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
008B EE                MOV     A,R6
008C 120000      R     LCALL   L?0121
008F 74FE              MOV     A,#0FEH
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0092 900000      R     MOV     DPTR,#PECsupport
0095 E0                MOVX    A,@DPTR
0096 900000      R     MOV     DPTR,#Protocol
0099 6005              JZ      ?C0047
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 374
009B E0                MOVX    A,@DPTR
009C 44C0              ORL     A,#0C0H
                                           ; SOURCE LINE # 375
009E 8003              SJMP    ?C0110
00A0         ?C0047:
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
00A0 E0                MOVX    A,@DPTR
00A1 4440              ORL     A,#040H
00A3         ?C0110:
00A3 FF                MOV     R7,A
00A4 900000      R     MOV     DPTR,#Channel
00A7 120000      R     LCALL   L?0124
00AA 120000      R     LCALL   L?0118
00AD EF                MOV     A,R7
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
00AF         ?C0048:
                                           ; SOURCE LINE # 381
00AF C28E              CLR     TR1
                                           ; SOURCE LINE # 382
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 32  

00B1 C2AB              CLR     ET1
                                           ; SOURCE LINE # 383
00B3 00                NOP     
                                           ; SOURCE LINE # 384
00B4 00                NOP     
                                           ; SOURCE LINE # 385
00B5 00                NOP     
                                           ; SOURCE LINE # 386
00B6 00                NOP     
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
00B7 120000      R     LCALL   L?0137
00BA         ?C0049:
                                           ; SOURCE LINE # 392
00BA 308F03            JNB     TF1,$ + 6H
00BD 020000      R     LJMP    ?C0050
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
00C0 900000      R     MOV     DPTR,#Channel
00C3 120000      R     LCALL   L?0134
00C6 120000      R     LCALL   L?0118
00C9 E0                MOVX    A,@DPTR
00CA FE                MOV     R6,A
;---- Variable 'status' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 395
00CB 54FC              ANL     A,#0FCH
00CD 60EB              JZ      ?C0049
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
00CF EE                MOV     A,R6
00D0 547C              ANL     A,#07CH
00D2 6013              JZ      ?C0052
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
00D4 EE                MOV     A,R6
00D5 5418              ANL     A,#018H
00D7 6003              JZ      ?C0053
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
00D9 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 402
00DC         ?C0053:
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
00DC 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 406
00DF E4                CLR     A
00E0 900000      R     MOV     DPTR,#ack
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
00E4 020000      R     LJMP    ?C0050
                                           ; SOURCE LINE # 408
00E7         ?C0052:
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
00E7 900000      R     MOV     DPTR,#BCTemp
00EA E0                MOVX    A,@DPTR
00EB 14                DEC     A
00EC F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 33  

                                           ; SOURCE LINE # 412
00ED 900000      R     MOV     DPTR,#Var
00F0 E4                CLR     A
00F1 75F001            MOV     B,#01H
00F4 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 414
00F7 900000      R     MOV     DPTR,#BCTemp
00FA E0                MOVX    A,@DPTR
00FB 6049              JZ      ?C0055
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
00FD 900000      R     MOV     DPTR,#PECsupport
0100 E0                MOVX    A,@DPTR
0101 602C              JZ      ?C0056
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
0103 900000      R     MOV     DPTR,#Var
0106 120000      R     LCALL   L?0154
0109 120000      R     LCALL   L?0138
010C 120000      R     LCALL   L?0146
010F ED                MOV     A,R5
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0111 8F82              MOV     DPL,R7
0113 8E83              MOV     DPH,R6
0115 E0                MOVX    A,@DPTR
0116 FF                MOV     R7,A
0117 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 420
011A 900000      R     MOV     DPTR,#BCTemp
011D E0                MOVX    A,@DPTR
011E 6401              XRL     A,#01H
0120 7018              JNZ     ?C0058
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
0122 7800        E     MOV     R0,#LOW SMBCRC8_A
0124 E6                MOV     A,@R0
0125 FF                MOV     R7,A
0126 900000      R     MOV     DPTR,#Channel
0129 E0                MOVX    A,@DPTR
012A 120000      R     LCALL   L?0155
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 424
012D 8006              SJMP    ?C0111
012F         ?C0056:
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
012F 120000      R     LCALL   L?0141
0132 120000      R     LCALL   L?0138
0135         ?C0111:
0135 120000      R     LCALL   L?0118
0138 EF                MOV     A,R7
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
013A         ?C0058:
                                           ; SOURCE LINE # 429
013A 900000      R     MOV     DPTR,#Channel
013D 120000      R     LCALL   L?0120
0140 74FE              MOV     A,#0FEH
0142 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
0143 020000      R     LJMP    ?C0049
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 34  

0146         ?C0055:
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
0146 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 436
0149 900000      R     MOV     DPTR,#ack
014C 7401              MOV     A,#01H
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
014F         ?C0050:
                                           ; SOURCE LINE # 443
014F 308F10            JNB     TF1,?C0060
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
0152 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 448
0155 900000      R     MOV     DPTR,#Channel
0158 E0                MOVX    A,@DPTR
0159 FF                MOV     R7,A
015A 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 449
015D E4                CLR     A
015E 900000      R     MOV     DPTR,#ack
0161 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 450
0162         ?C0060:
                                           ; SOURCE LINE # 452
0162 900000      R     MOV     DPTR,#Channel
0165 120000      R     LCALL   L?0120
0168 74FE              MOV     A,#0FEH
016A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
016B         ?C0045:
                                           ; SOURCE LINE # 455
016B 900000      R     MOV     DPTR,#ack
016E E0                MOVX    A,@DPTR
016F FF                MOV     R7,A
                                           ; SOURCE LINE # 456
0170         ?C0061:
0170 22                RET     
             ; FUNCTION _bWSMBusBlock (END)

             ; FUNCTION _bSMBusSendByte (BEGIN)
                                           ; SOURCE LINE # 461
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 35  

                                           ; SOURCE LINE # 467
000D 7D01              MOV     R5,#01H
000F 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 7007              JNZ     ?C0062
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 469
0015 900000      R     MOV     DPTR,#result
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
0019 020000      R     LJMP    ?C0063
001C         ?C0062:
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
001C 900000      R     MOV     DPTR,#error
001F 74EE              MOV     A,#0EEH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0022 E4                CLR     A
0023 A3                INC     DPTR
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 476
0025 900000      R     MOV     DPTR,#Addr
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#Channel
002D 120000      R     LCALL   L?0116
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
0032 900000      R     MOV     DPTR,#SData
0035 120000      R     LCALL   L?0127
0038 120000      R     LCALL   L?0118
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
003D EE                MOV     A,R6
003E 120000      R     LCALL   L?0121
0041 74FE              MOV     A,#0FEH
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 479
0044 900000      R     MOV     DPTR,#Channel
0047 120000      R     LCALL   L?0124
004A 120000      R     LCALL   L?0122
004D 7444              MOV     A,#044H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
0050 C28E              CLR     TR1
                                           ; SOURCE LINE # 482
0052 C2AB              CLR     ET1
                                           ; SOURCE LINE # 483
0054 00                NOP     
                                           ; SOURCE LINE # 484
0055 00                NOP     
                                           ; SOURCE LINE # 485
0056 00                NOP     
                                           ; SOURCE LINE # 486
0057 00                NOP     
                                           ; SOURCE LINE # 487
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 36  

0058 120000      R     LCALL   L?0137
005B         ?C0064:
                                           ; SOURCE LINE # 492
005B 208F13            JB      TF1,?C0065
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
005E 900000      R     MOV     DPTR,#Channel
0061 120000      R     LCALL   L?0120
0064 E0                MOVX    A,@DPTR
0065 900000      R     MOV     DPTR,#status
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 495
0069 E0                MOVX    A,@DPTR
006A 547E              ANL     A,#07EH
006C 60ED              JZ      ?C0064
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
006E 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
0071         ?C0065:
                                           ; SOURCE LINE # 504
0071 308F0D            JNB     TF1,?C0067
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
0074 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 509
0077 900000      R     MOV     DPTR,#Channel
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
007F 8016              SJMP    ?C0112
0081         ?C0067:
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
0081 900000      R     MOV     DPTR,#status
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 547C              ANL     A,#07CH
0088 6015              JZ      ?C0069
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
008A EF                MOV     A,R7
008B 5418              ANL     A,#018H
008D 6008              JZ      ?C0070
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 518
008F 900000      R     MOV     DPTR,#Channel
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 519
0097         ?C0070:
                                           ; SOURCE LINE # 520
0097         ?C0112:
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 37  

0097 900000      R     MOV     DPTR,#error
009A 74EE              MOV     A,#0EEH
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
009D 8005              SJMP    ?C0068
009F         ?C0069:
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 524
009F E4                CLR     A
00A0 900000      R     MOV     DPTR,#error
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 526
00A4         ?C0068:
                                           ; SOURCE LINE # 528
00A4 900000      R     MOV     DPTR,#error
00A7 E0                MOVX    A,@DPTR
00A8 B4EE05            CJNE    A,#0EEH,?C0072
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
00AB E4                CLR     A
00AC A3                INC     DPTR
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 531
00AE 8006              SJMP    ?C0073
00B0         ?C0072:
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
00B0 900000      R     MOV     DPTR,#result
00B3 7401              MOV     A,#01H
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 535
00B6         ?C0073:
                                           ; SOURCE LINE # 536
00B6 900000      R     MOV     DPTR,#Channel
00B9 120000      R     LCALL   L?0120
00BC 74FE              MOV     A,#0FEH
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
00BF         ?C0063:
                                           ; SOURCE LINE # 539
00BF 900000      R     MOV     DPTR,#result
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
                                           ; SOURCE LINE # 540
00C4         ?C0074:
00C4 22                RET     
             ; FUNCTION _bSMBusSendByte (END)

             ; FUNCTION _bSMBusReceiveByte (BEGIN)
                                           ; SOURCE LINE # 545
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B 900000      R     MOV     DPTR,#Channel
000E EF                MOV     A,R7
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 38  

000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 551
0010 7D01              MOV     R5,#01H
0012 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0015 EF                MOV     A,R7
0016 7007              JNZ     ?C0075
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 553
0018 900000      R     MOV     DPTR,#result
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
001C 020000      R     LJMP    ?C0076
001F         ?C0075:
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 557
001F 900000      R     MOV     DPTR,#error
0022 74EE              MOV     A,#0EEH
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 558
0025 E4                CLR     A
0026 A3                INC     DPTR
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
0028 900000      R     MOV     DPTR,#Addr
002B E0                MOVX    A,@DPTR
002C 4401              ORL     A,#01H
002E FF                MOV     R7,A
002F 900000      R     MOV     DPTR,#Channel
0032 120000      R     LCALL   L?0116
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
0037 EE                MOV     A,R6
0038 120000      R     LCALL   L?0121
003B 74FE              MOV     A,#0FEH
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
003E 900000      R     MOV     DPTR,#Channel
0041 120000      R     LCALL   L?0124
0044 120000      R     LCALL   L?0122
0047 7444              MOV     A,#044H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
004A C28E              CLR     TR1
                                           ; SOURCE LINE # 565
004C C2AB              CLR     ET1
                                           ; SOURCE LINE # 566
004E 00                NOP     
                                           ; SOURCE LINE # 567
004F 00                NOP     
                                           ; SOURCE LINE # 568
0050 00                NOP     
                                           ; SOURCE LINE # 569
0051 00                NOP     
                                           ; SOURCE LINE # 570
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
0052 120000      R     LCALL   L?0137
0055         ?C0077:
                                           ; SOURCE LINE # 575
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 39  

0055 208F13            JB      TF1,?C0078
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
0058 900000      R     MOV     DPTR,#Channel
005B 120000      R     LCALL   L?0120
005E E0                MOVX    A,@DPTR
005F 900000      R     MOV     DPTR,#status
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 578
0063 E0                MOVX    A,@DPTR
0064 547E              ANL     A,#07EH
0066 60ED              JZ      ?C0077
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 582
0068 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 585
006B         ?C0078:
                                           ; SOURCE LINE # 587
006B 308F0D            JNB     TF1,?C0080
                                           ; SOURCE LINE # 588
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 591
006E 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 592
0071 900000      R     MOV     DPTR,#Channel
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 594
0079 8016              SJMP    ?C0113
007B         ?C0080:
                                           ; SOURCE LINE # 596
                                           ; SOURCE LINE # 597
007B 900000      R     MOV     DPTR,#status
007E E0                MOVX    A,@DPTR
007F FF                MOV     R7,A
0080 547C              ANL     A,#07CH
0082 6015              JZ      ?C0082
                                           ; SOURCE LINE # 598
                                           ; SOURCE LINE # 599
0084 EF                MOV     A,R7
0085 5418              ANL     A,#018H
0087 6008              JZ      ?C0083
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 601
0089 900000      R     MOV     DPTR,#Channel
008C E0                MOVX    A,@DPTR
008D FF                MOV     R7,A
008E 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 602
0091         ?C0083:
                                           ; SOURCE LINE # 603
0091         ?C0113:
0091 900000      R     MOV     DPTR,#error
0094 74EE              MOV     A,#0EEH
0096 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 40  

                                           ; SOURCE LINE # 604
0097 8005              SJMP    ?C0081
0099         ?C0082:
                                           ; SOURCE LINE # 606
                                           ; SOURCE LINE # 607
0099 E4                CLR     A
009A 900000      R     MOV     DPTR,#error
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
009E         ?C0081:
                                           ; SOURCE LINE # 611
009E 900000      R     MOV     DPTR,#error
00A1 E0                MOVX    A,@DPTR
00A2 B4EE05            CJNE    A,#0EEH,?C0085
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
00A5 E4                CLR     A
00A6 A3                INC     DPTR
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 614
00A8 801E              SJMP    ?C0086
00AA         ?C0085:
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 617
00AA 900000      R     MOV     DPTR,#Channel
00AD 120000      R     LCALL   L?0129
00B0 120000      R     LCALL   L?0122
00B3 E0                MOVX    A,@DPTR
00B4 FF                MOV     R7,A
00B5 900000      R     MOV     DPTR,#Var
00B8 E0                MOVX    A,@DPTR
00B9 FC                MOV     R4,A
00BA A3                INC     DPTR
00BB E0                MOVX    A,@DPTR
00BC F582              MOV     DPL,A
00BE 8C83              MOV     DPH,R4
00C0 EF                MOV     A,R7
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 618
00C2 900000      R     MOV     DPTR,#result
00C5 7401              MOV     A,#01H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
00C8         ?C0086:
                                           ; SOURCE LINE # 620
00C8 900000      R     MOV     DPTR,#Channel
00CB 120000      R     LCALL   L?0120
00CE 74FE              MOV     A,#0FEH
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 621
00D1         ?C0076:
                                           ; SOURCE LINE # 623
00D1 900000      R     MOV     DPTR,#result
00D4 E0                MOVX    A,@DPTR
00D5 FF                MOV     R7,A
                                           ; SOURCE LINE # 624
00D6         ?C0087:
00D6 22                RET     
             ; FUNCTION _bSMBusReceiveByte (END)

             ; FUNCTION _CalcCRC8 (BEGIN)
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 41  

                                           ; SOURCE LINE # 629
;---- Variable 'sourcebyte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 632
0000 7800        E     MOV     R0,#LOW SMBCRC8_A
0002 E6                MOV     A,@R0
0003 6F                XRL     A,R7
0004 F6                MOV     @R0,A
                                           ; SOURCE LINE # 633
0005 E6                MOV     A,@R0
0006 FF                MOV     R7,A
;---- Variable 'temp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 635
0007 20E707            JB      ACC.7,?C0088
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 637
000A 25E0              ADD     A,ACC
000C FF                MOV     R7,A
                                           ; SOURCE LINE # 638
000D 66                XRL     A,@R0
000E F6                MOV     @R0,A
                                           ; SOURCE LINE # 639
000F 800D              SJMP    ?C0089
0011         ?C0088:
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
0011 EF                MOV     A,R7
0012 25E0              ADD     A,ACC
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 643
0015 7800        E     MOV     R0,#LOW SMBCRC8_A
0017 E6                MOV     A,@R0
0018 6409              XRL     A,#09H
001A F6                MOV     @R0,A
                                           ; SOURCE LINE # 644
001B E6                MOV     A,@R0
001C 6F                XRL     A,R7
001D F6                MOV     @R0,A
                                           ; SOURCE LINE # 645
001E         ?C0089:
                                           ; SOURCE LINE # 647
001E EF                MOV     A,R7
001F 20E707            JB      ACC.7,?C0090
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
0022 25E0              ADD     A,ACC
                                           ; SOURCE LINE # 650
0024 7800        E     MOV     R0,#LOW SMBCRC8_A
0026 66                XRL     A,@R0
0027 F6                MOV     @R0,A
                                           ; SOURCE LINE # 651
0028 22                RET     
0029         ?C0090:
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 654
0029 EF                MOV     A,R7
002A 25E0              ADD     A,ACC
002C FF                MOV     R7,A
                                           ; SOURCE LINE # 655
002D 7800        E     MOV     R0,#LOW SMBCRC8_A
002F E6                MOV     A,@R0
0030 6407              XRL     A,#07H
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 42  

0032 F6                MOV     @R0,A
                                           ; SOURCE LINE # 656
0033 E6                MOV     A,@R0
0034 6F                XRL     A,R7
0035 F6                MOV     @R0,A
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 658
0036         ?C0092:
0036 22                RET     
             ; FUNCTION _CalcCRC8 (END)

             ; FUNCTION _CheckSMBusFree (BEGIN)
                                           ; SOURCE LINE # 663
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 664
                                           ; SOURCE LINE # 667
0000 EF                MOV     A,R7
0001 120000      R     LCALL   L?0149
0004 120000      R     LCALL   L?0122
0007 E0                MOVX    A,@DPTR
;---- Variable 'pinstatus' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 669
0008 5403              ANL     A,#03H
000A FE                MOV     R6,A
000B BE0303            CJNE    R6,#03H,?C0093
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
000E 7F00              MOV     R7,#00H
0010 22                RET     
                                           ; SOURCE LINE # 672
0011         ?C0093:
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 675
0011 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
0013         ?C0094:
0013 22                RET     
             ; FUNCTION _CheckSMBusFree (END)

             ; FUNCTION _CheckSMBusInterfaceIsALT (BEGIN)
                                           ; SOURCE LINE # 682
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 683
                                           ; SOURCE LINE # 684
0000 EF                MOV     A,R7
0001 120000      R     LCALL   L?0147
0004 120000      R     LCALL   L?0118
0007 E0                MOVX    A,@DPTR
0008 54FB              ANL     A,#0FBH
000A 7010              JNZ     ?C0097
000C EF                MOV     A,R7
000D 75F00F            MOV     B,#0FH
0010 A4                MUL     AB
0011 120000      R     LCALL   L?0153
0014 120000      R     LCALL   L?0122
0017 E0                MOVX    A,@DPTR
0018 54FB              ANL     A,#0FBH
001A 6003              JZ      ?C0096
001C         ?C0097:
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 43  

001C 7F00              MOV     R7,#00H
001E 22                RET     
                                           ; SOURCE LINE # 687
001F         ?C0096:
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 690
001F 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 691
                                           ; SOURCE LINE # 692
0021         ?C0098:
0021 22                RET     
             ; FUNCTION _CheckSMBusInterfaceIsALT (END)

             ; FUNCTION _CheckSMBusInterfaceCanbeUse (BEGIN)
                                           ; SOURCE LINE # 697
0000 900000      R     MOV     DPTR,#accesstype
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#channel
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 701
000A 900000      R     MOV     DPTR,#checksmbus
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 711
0010 120000      R     LCALL   _CheckSMBusInterfaceIsALT
0013 EF                MOV     A,R7
0014 7006              JNZ     ?C0100
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 713
0016 900000      R     MOV     DPTR,#checksmbus
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 714
001A 803F              SJMP    ?C0101
001C         ?C0100:
                                           ; SOURCE LINE # 716
                                           ; SOURCE LINE # 717
                                           ; SOURCE LINE # 718
                                           ; SOURCE LINE # 722
001C         ?C0102:
                                           ; SOURCE LINE # 724
001C 900000      R     MOV     DPTR,#channel
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 120000      R     LCALL   _CheckSMBusFree
0024 BF0123            CJNE    R7,#01H,?C0103
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 726
0027 E4                CLR     A
0028 900000      R     MOV     DPTR,#checksmbus
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 727
002C 900000      R     MOV     DPTR,#channel
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 120000      R     LCALL   L?0156
0034 120000      R     LCALL   L?0118
0037 E0                MOVX    A,@DPTR
0038 FE                MOV     R6,A
0039 04                INC     A
C51 COMPILER V8.12   CORE_SMBUS                                                            07/28/2018 12:03:36 PAGE 44  

003A F0                MOVX    @DPTR,A
003B 900000      E     MOV     DPTR,#SMBus_BusyRecover
003E E0                MOVX    A,@DPTR
003F FD                MOV     R5,A
0040 EE                MOV     A,R6
0041 D3                SETB    C
0042 9D                SUBB    A,R5
0043 4016              JC      ?C0101
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 729
0045 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
0048 8011              SJMP    ?C0101
004A         ?C0103:
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 734
004A 900000      R     MOV     DPTR,#channel
004D E0                MOVX    A,@DPTR
004E 120000      R     LCALL   L?0156
0051 120000      R     LCALL   L?0122
0054 E4                CLR     A
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 735
0056 900000      R     MOV     DPTR,#checksmbus
0059 04                INC     A
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
005B         ?C0101:
                                           ; SOURCE LINE # 739
005B 900000      R     MOV     DPTR,#checksmbus
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
                                           ; SOURCE LINE # 740
0060         ?C0106:
0060 22                RET     
             ; FUNCTION _CheckSMBusInterfaceCanbeUse (END)

             ; FUNCTION Core_Init_SMBus (BEGIN)
                                           ; SOURCE LINE # 745
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 747
0000 900000      E     MOV     DPTR,#SMBus_BusyRecover
0003 7414              MOV     A,#014H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 748
0006 22                RET     
             ; FUNCTION Core_Init_SMBus (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2208    ----
   CONSTANT SIZE    =    144    ----
   XDATA SIZE       =   ----      46
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
