C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE CORE_PS2
OBJECT MODULE PLACED IN Code\CORE\CORE_PS2.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\CORE\CORE_PS2.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\I
                    -NCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * Filename: CORE_PS2.C - PS/2 devices handler
   3           *
   4           * Copyright (c) 2006-2009, ITE Tech. Inc. All Rights Reserved.
   5           *
   6           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
   7           * transmit, broadcast, present, recite, release, license or otherwise exploit
   8           * any part of this publication in any form, by any means, without the prior
   9           * written permission of ITE Tech. Inc.
  10           *---------------------------------------------------------------------------*/
  11          
  12          #include <CORE_INCLUDE.H>
  13          #include <OEM_INCLUDE.H>
  14          
  15          const sPS2Struct code asPS2Struct[] =
  16          {
  17                  { &PSCTL1, &PSINT1, &PSSTS1,    &PSDAT1,        &IER2,  &ISR2,  Int_PS2_0       },
  18                  { &PSCTL2, &PSINT2, &PSSTS2,    &PSDAT2,        &IER2,  &ISR2,  Int_PS2_1       },
  19                  { &PSCTL3, &PSINT3, &PSSTS3,    &PSDAT3,        &IER2,  &ISR2,  Int_PS2_2       }
  20          };
  21          
  22          /* ----------------------------------------------------------------------------
  23           * FUNCTION: Service_Send_PS2
  24           *
  25           * ------------------------------------------------------------------------- */
  26          void service_PS2_data(void)
  27          {
  28   1          BYTE index;
  29   1      
  30   1          if(IS_MASK_SET(KBHISR,OBF)||IS_MASK_SET(KBHISR,IBF))
  31   1          //if(IS_MASK_SET(KBHISR,OBF))
  32   1              {
  33   2              SetPS2InhibitTime(InactiveTime);
  34   2                      return;
  35   2              }
  36   1      
  37   1              if(TPACKCounter!=0x00)
  38   1              {
  39   2                      TPACKCounter--;
  40   2              }
  41   1              else
  42   1              {
  43   2                      if(Ccb42_DISAB_AUX)
  44   2                      {
  45   3                  SetPS2InhibitTime(InactiveTime);
  46   3                              return;
  47   3                      }
  48   2              }
  49   1      
  50   1              SendFromAux(MousePendingBuf);
  51   1      
  52   1          if(MULPX_Multiplex)
  53   1          {
  54   2              PS2Deviceactive();          // Enable all ps2 interface
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 2   

  55   2              SetPS2SkipScanTime(MSSkipScanAUXTime);
  56   2          }
  57   1          else
  58   1          {
  59   2              for(index=0x00;index<3;index++)     // Check any keyboard is attached?
  60   2              {
  61   3                  if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_KEYBOARD))
  62   3                  {
  63   4                      *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
  64   4                      SET_MASK(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit);
  65   4                  }
  66   3              }
  67   2              for(index=0x00;index<3;index++)     // Check any keyboard is attached?
  68   2              {
  69   3                  if(index == AUXPortNum)
  70   3                  {
  71   4                      *asPS2Struct[AUXPortNum].ps2ctrl=PS2_ReceiveMode;
  72   4                              SET_MASK(*asPS2Struct[AUXPortNum].ps2ier, asPS2Struct[AUXPortNum].ctrlbit);
  73   4                  }
  74   3              }
  75   2      
  76   2              SetPS2InhibitTime(InactiveTime);
  77   2          }
  78   1          ResetMSPendingData();
  79   1      }
  80          
  81          //-----------------------------------------------------------------
  82          // Send data from aux mouse
  83          //-----------------------------------------------------------------
  84          void SendFromAux(BYTE auxdata)
  85          {
  86   1          KBHISR &= 0x0F;
  87   1      
  88   1              if(MULPX_Multiplex)
  89   1              {
  90   2                      if(AUXPortNum==0x00)
  91   2                      {
  92   3                              KBHISR = 0x40;                          // source bits is 01
  93   3                      }
  94   2                      else if(AUXPortNum==0x01)
  95   2                      {
  96   3                              KBHISR = 0x80;                          // source bits is 10
  97   3                      }
  98   2              else if(AUXPortNum==0x02)
  99   2              {
 100   3                              KBHISR = 0xC0;                          // source bits is 11
 101   3                      }
 102   2                      CLEAR_MASK(KBHISR,BIT2);            // clear error bit
 103   2              }
 104   1      
 105   1              SET_MASK(KBHISR,AOBF);                      // set AUX bit
 106   1              KBHICR &= 0xFC;
 107   1          if ( Ccb42_INTR_AUX )
 108   1          {
 109   2              SET_MASK(KBHICR,OBFMIE);
 110   2          }
 111   1      
 112   1              KBHIMDOR = auxdata;
 113   1      
 114   1              if(PS2_MSCMD)
 115   1              {
 116   2              #ifdef UART_Debug
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 3   

 117   2              printf("MS Port_%bX ACK : 0X%bX\n",AUXPortNum, auxdata);
 118   2              #endif
 119   2              }
 120   1      
 121   1      #if PS2_Pack_Debug
                  if(PS_Debug_ECToHost==0xFF)
                  {
                     PS_Debug_ECToHost = 0x03;
                  }
                  else
                  {
                      PS_Debug_ECToHost++;
                      if(PS_Debug_ECToHost>3)
                      {
                          PS_Debug_ECToHost = 0x01;
                      }
                  }
              #endif
 135   1      }
 136          
 137          //-----------------------------------------------------------------
 138          //
 139          //-----------------------------------------------------------------
 140          void SetPS2InhibitTime(BYTE time)
 141          {
 142   1          if(AUXInactiveCounter<time)
 143   1          {
 144   2              AUXInactiveCounter = time;
 145   2          }
 146   1      }
 147          
 148          //-----------------------------------------------------------------
 149          //
 150          //-----------------------------------------------------------------
 151          void SetPS2SkipScanTime(BYTE time)
 152          {
 153   1          if(SKIP_AUX_SCAN_CUNT<time)
 154   1          {
 155   2              SKIP_AUX_SCAN_CUNT = time;
 156   2          }
 157   1      }
 158          
 159          //-----------------------------------------------------------------
 160          // Process mouse data from ps2 interface
 161          //-----------------------------------------------------------------
 162          void ProcessMouseData(BYTE channel)
 163          {
 164   1          BYTE index;
 165   1      
 166   1      #if PS2_Pack_Debug                          // Debug only
                  if(PS_Debug_ECToHost==0xFF)
                  {
                     PS_Debug_DeviceToEC = 0x03;
                  }
                  else
                  {
                      PS_Debug_DeviceToEC++;
                      if(PS_Debug_DeviceToEC>3)
                      {
                          PS_Debug_DeviceToEC = 0x01;
                      }
                  }
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 4   

              #endif
 180   1      
 181   1          if(MS_ID_CUNT!=0x00)                    // Save mouse driver type(3bytes, 4bytes, or 5bytes)
 182   1          {
 183   2              if(--MS_ID_CUNT==0x00)
 184   2              {
 185   3                  if(PS2PortxData[channel]==0x00||
 186   3                      PS2PortxData[channel]==0x03||
 187   3                       PS2PortxData[channel]==0x04)
 188   3                  {
 189   4                      MS_DRIVER_TYPE = PS2PortxData[channel];
 190   4                  }
 191   3              }
 192   2          }
 193   1      
 194   1          if(IS_MASK_SET(KBHISR,OBF)||IS_MASK_SET(KBHISR,IBF)||(Ccb42_DISAB_AUX))
 195   1          //if(IS_MASK_SET(KBHISR,OBF)||(Ccb42_DISAB_AUX))
 196   1          {
 197   2              AUXPortNum = channel;
 198   2                  MousePendingBuf=PS2PortxData[channel];
 199   2                  MSPending = 0x33;
 200   2          }
 201   1          else
 202   1          {
 203   2              AUXPortNum = channel;
 204   2                  SendFromAux(PS2PortxData[channel]);
 205   2                  if(TPACKCounter!=0x00)
 206   2                  {
 207   3                          TPACKCounter--;
 208   3                  }
 209   2      
 210   2              if(MULPX_Multiplex)
 211   2                  {
 212   3                  if(!AUXInterfaceBusy)
 213   3                  {
 214   4                      PS2Deviceactive();              // Enable all ps2 interface
 215   4                      SetPS2SkipScanTime(MSSkipScanAUXTime);
 216   4                  }
 217   3              }
 218   2              else
 219   2                  {
 220   3                  if(!AUXInterfaceBusy)
 221   3                  {
 222   4                      for(index=0x00;index<3;index++)     // Check any keyboard is attached?
 223   4                      {
 224   5                          if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_KEYBOARD))
 225   5                          {
 226   6                              *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 227   6                              SET_MASK(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit);
 228   6                          }
 229   5                      }
 230   4                      for(index=0x00;index<3;index++)     // Check any keyboard is attached?
 231   4                      {
 232   5                          if(index == channel)
 233   5                          {
 234   6                              *asPS2Struct[channel].ps2ctrl=PS2_ReceiveMode;
 235   6                                      SET_MASK(*asPS2Struct[channel].ps2ier, asPS2Struct[channel].ctrlbit);
 236   6                          }
 237   5                      }
 238   4                      SetPS2InhibitTime(InactiveTime);
 239   4                  }
 240   3                  }
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 5   

 241   2          }
 242   1      }
 243          
 244          //-----------------------------------------------------------------
 245          // Process keybaord data from ps2 interface
 246          //-----------------------------------------------------------------
 247          void ProcessKeyboardData(BYTE channel)
 248          {
 249   1          BYTE index;
 250   1          if(Main_KB_ACK_CUNT!=0x00)
 251   1          {
 252   2              Main_KB_ACK_CUNT--;
 253   2      
 254   2              KBC_DataPending(PS2PortxData[channel]);
 255   2              SetServiceSendFlag();
 256   2              #if PS2_KBCMD
                          #ifdef UART_Debug
                          printf("External KB ACK : 0X%bX\n",PS2PortxData[channel]);
                          #endif
                      #endif
 261   2          }
 262   1          else
 263   1          {
 264   2              Buffer_Key(PS2PortxData[channel]);
 265   2              SetServiceSendFlag();
 266   2          }
 267   1      
 268   1          if(Main_KB_ACK_CUNT==0x00)
 269   1          {
 270   2              if(MSPending==0x33)             // PS2 data is pending
 271   2              {
 272   3                  if(!AUXInterfaceBusy)       // PS2 interface isn't busy
 273   3                  {
 274   4                      *asPS2Struct[channel].ps2ctrl=PS2_ReceiveMode;
 275   4                      SET_MASK(*asPS2Struct[channel].ps2ier, asPS2Struct[channel].ctrlbit);
 276   4                      SetPS2InhibitTime(InactiveTime);
 277   4                  }
 278   3              }
 279   2              else
 280   2              {
 281   3                  if(!AUXInterfaceBusy)       // PS2 interface isn't busy
 282   3                  {
 283   4                      PS2Deviceactive();
 284   4                      SetPS2SkipScanTime(KBSkipScanAUXTime);
 285   4                  }
 286   3              }
 287   2          }
 288   1          else
 289   1          {
 290   2              if(!AUXInterfaceBusy)           // PS2 interface isn't busy
 291   2              {
 292   3                  *asPS2Struct[channel].ps2ctrl=PS2_ReceiveMode;
 293   3                  SET_MASK(*asPS2Struct[channel].ps2ier, asPS2Struct[channel].ctrlbit);
 294   3                  SetPS2InhibitTime(InactiveTime);
 295   3              }
 296   2          }
 297   1      }
 298          
 299          void ProcessECTestAUXACK(BYTE PortNum, BYTE enablenow)
 300          {
 301   1          ECSendtoAUXFlag = 0;
 302   1          ClearAUXScanTimeOutCunt();
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 6   

 303   1          SetAUXScanIndexHS(AUXScanIndexFree);
 304   1          ScanAUXStepIndex = ScanAUXStep_CheckOK + PortNum;
 305   1      
 306   1          if(IS_MASK_SET(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED))     // Command 0xF5 ACK
 307   1          {
 308   2              if(PS2PortxData[PortNum]==0xFA)
 309   2              {
 310   3                  //CLEAR_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED);
 311   3                  AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 312   3                  SET_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_IS_DISABLED);
 313   3              }
 314   2              else
 315   2              {
 316   3                  PS2_ReTryCunt++;
 317   3                  if(PS2_ReTryCunt>PS2_OnOffTimeOutCUNT)
 318   3                  {
 319   4                      PS2_ReTryCunt = 0x00;
 320   4                      //CLEAR_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED);
 321   4                      AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 322   4                      SET_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_DISABLE_TIME_OUT);
 323   4                  }
 324   3              }
 325   2          }
 326   1          else if(IS_MASK_SET(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED))     // Command 0xF4 ACK
 327   1          {
 328   2              if(PS2PortxData[PortNum]==0xFA)
 329   2              {
 330   3                  //CLEAR_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED);
 331   3                  AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 332   3                  SET_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_IS_ENABLED);
 333   3              }
 334   2              else
 335   2              {
 336   3                  PS2_ReTryCunt++;
 337   3                  if(PS2_ReTryCunt>PS2_OnOffTimeOutCUNT)
 338   3                  {
 339   4                      PS2_ReTryCunt = 0x00;
 340   4                      //CLEAR_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED);
 341   4                      AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 342   4                      SET_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_ENABLED_TIME_OUT);
 343   4                  }
 344   3              }
 345   2          }
 346   1          else                                            // Test Command 0xF1 ACK
 347   1          {
 348   2              if(AuxFlags[PortNum]==0x00)                 // Device first time plug-in
 349   2              {
 350   3                  AuxFlags[PortNum] = DEVICE_NEED_INIT;
 351   3                  SetAUXScanIndexHS(AUXScanIndexInUse);
 352   3                  ScanAUXStepIndex = ScanAUXStep_CheckType + PortNum; // goto check device is keyboard or mouse
 353   3              }
 354   2              else
 355   2              {
 356   3                  if(IS_MASK_SET(AuxFlags[PortNum], DEVICE_NEED_CONFIG))
 357   3                  {
 358   4                      SetAUXScanIndexHS(AUXScanIndexInUse);
 359   4                      ScanAUXStepIndex = ScanAUXStep_Init + PortNum;  // goto config. device
 360   4                  }
 361   3                  else if(AuxFlags[PortNum] == DEVICE_NEED_INIT)
 362   3                  {
 363   4                      SetAUXScanIndexHS(AUXScanIndexInUse);
 364   4                      ScanAUXStepIndex = ScanAUXStep_CheckType + PortNum; // goto check device is keyboard or mo
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 7   

             -use
 365   4                  }
 366   3                  else
 367   3                  {
 368   4                      if(AuxFlags_KB_CMD[PortNum]!=0x00)
 369   4                      {
 370   5                          SetAUXScanIndexHS(AUXScanIndexInUse);
 371   5                          ScanAUXStepIndex = ScanAUXStep_UpdateKB + PortNum;
 372   5                      }
 373   4                  }
 374   3              }
 375   2          }
 376   1      
 377   1          if(enablenow==0x01)
 378   1          {
 379   2              PS2Deviceactive();
 380   2          }
 381   1      }
 382          
 383          
 384          //-----------------------------------------------------------------
 385          // Bypass AUX data to host
 386          //-----------------------------------------------------------------
 387          void SendAUXData(BYTE PortNum)  // Dino 0907
 388          {
 389   1          BYTE index;
 390   1      
 391   1          if(SendtoAUXFlag)                                   // Send command to device and transmit done.
 392   1          {
 393   2              SendtoAUXFlag = 0;
 394   2              *asPS2Struct[PortNum].ps2ctrl=PS2_ReceiveMode;  // Enable Receive mode for ACK byte
 395   2              SET_MASK(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);  // Enable interrupt for ACK
             - byte
 396   2              ClearAUXScanTimeOutCunt();
 397   2          }
 398   1          else                                                                // Receive done and get data
 399   1          {
 400   2              if(ECSendtoAUXFlag)                 // If thsi byte is EC scan channel ACK, no send to host
 401   2              {
 402   3                  ProcessECTestAUXACK(PortNum, 1);
 403   3              }
 404   2              else                                // receive mode transmit done.
 405   2              {
 406   3                  SetAUXScanIndexHS(AUXScanIndexFree);
 407   3                  ClearAUXScanTimeOutCunt();
 408   3                  if(IS_MASK_SET(AuxFlags[PortNum], DEVICE_IS_MOUSE))     // If data from mosue
 409   3                      {
 410   4                      ProcessMouseData(PortNum);      // Process mosue data
 411   4                      }
 412   3                  else if(IS_MASK_SET(AuxFlags[PortNum], DEVICE_IS_KEYBOARD)) // If data from keyboard
 413   3                      {
 414   4                          ProcessKeyboardData(PortNum);   // Process keyboard data
 415   4                      }
 416   3                  else
 417   3                  {
 418   4                      PS2Deviceactive();              // Enable all ps2 interface
 419   4                  }
 420   3              }
 421   2          }
 422   1      }
 423          
 424          
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 8   

 425          //-----------------------------------------------------------------
 426          //
 427          //-----------------------------------------------------------------
 428          void ClaerPS2IFPendingEvent(void)
 429          {
 430   1          InhibitAUXDevice();
 431   1          IER2&= ~(Int_PS2_0+Int_PS2_1+Int_PS2_2);    // Disable all PS2 interrupt
 432   1          ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
 433   1          PS2StartBit = 0;            // clear ps2 interrupt start bit flag
 434   1          F_Service_PS2 = 0;          // Clear PS2 interrupt service flag
 435   1      }
 436          
 437          //-----------------------------------------------------------------
 438          // EC Send command to ps2 interface no ack to host
 439          //-----------------------------------------------------------------
 440          void ECSend2Port( BYTE PortNum, BYTE PortData)
 441          {
 442   1              DisableAllInterrupt(); //cwy test G79:Update PS2 code base.
 443   1          ClaerPS2IFPendingEvent();
 444   1              ECSendtoAUXFlag = 1;
 445   1          SendtoAUXFlag = 1;
 446   1              *asPS2Struct[PortNum].ps2ctrl = 0x1D;
 447   1              *asPS2Struct[PortNum].ps2data = PortData;
 448   1              *asPS2Struct[PortNum].ps2ctrl = 0x1C;
 449   1              *asPS2Struct[PortNum].ps2ctrl = 0x1E;
 450   1               EnableAllInterrupt(); //cwy test G79:Update PS2 code base.
 451   1          SET_MASK(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);    // Enable interrupt
 452   1      }
 453          
 454          //-----------------------------------------------------------------
 455          // Before sending command to PS2 device to make sure no any data is done
 456          //-----------------------------------------------------------------
 457          void CheckNWaitReceiveDone(void)
 458          {
 459   1          BYTE busy;
 460   1          busy=0x00;
 461   1      
 462   1          if(IS_MASK_SET(PSSTS1, SS)||IS_MASK_SET(PSSTS2, SS)||IS_MASK_SET(PSSTS3, SS)
 463   1          ||F_Service_PS2 == 1||PS2StartBit == 1)
 464   1          {
 465   2              TR1 = 0;                            // Disable timer1
 466   2              ET1 = 0;                            // Disable timer1 interrupt
 467   2              _nop_();
 468   2              _nop_();
 469   2              _nop_();
 470   2              _nop_();
 471   2              TH1 = Timer_30ms>>8;            // Set timer1 counter 30ms
 472   2              TL1 = Timer_30ms;               // Set timer1 counter 30ms
 473   2              TF1 = 0;                            // Clear overflow flag
 474   2              TR1 = 1;                            // Enable timer1
 475   2      
 476   2              while(!TF1)
 477   2              {
 478   3                  if(F_Service_PS2)
 479   3                  {
 480   4                      busy=0x01;
 481   4                      TR1 = 0;                                    // disable timer1
 482   4                      TF1 = 0;                                                // clear overflow flag
 483   4                      break;
 484   4                  }
 485   3              }
 486   2      
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 9   

 487   2              if(TF1)
 488   2              {
 489   3                  if(PS2CheckPendingISR()==0x01)
 490   3                  {
 491   4                      busy=0x01;
 492   4                  }
 493   3              }
 494   2      
 495   2              if(busy==0x01)
 496   2              {
 497   3                  F_Service_PS2=0;
 498   3                  AUXInterfaceBusy=1;
 499   3                  service_ps2();
 500   3                  AUXInterfaceBusy=0;
 501   3              }
 502   2      
 503   2              TR1 = 0;                                    // disable timer1
 504   2              TF1 = 0;                                                // clear overflow flag
 505   2              ET1 = 1;
 506   2          }
 507   1          else
 508   1          {
 509   2              PS2DeviceInactive();
 510   2          }
 511   1      }
 512          
 513          //-----------------------------------------------------------------
 514          // Send data to ps2 interface
 515          //-----------------------------------------------------------------
 516          void Send2Port( BYTE PortNum, BYTE PortData, BYTE action)
 517          {
 518   1          BYTE tempinactvietime;
 519   1      
 520   1          #if !TouchPad_only
                      if(ECSendtoAUXFlag)
                      {
                          if(WaitECSend2PortACK(AUX_SCAN_INDEX)==0x01)
                          {
                              AUXDevicePlugOutClearVariables();
                          }
                      }
                      else
                      {
                          if(action == SendCmdToKB)
                          {
                              CheckNWaitReceiveDone();
                          }
                      }
                  #endif
 536   1              DisableAllInterrupt(); //cwy test G79:Update PS2 code base.
 537   1          ClaerPS2IFPendingEvent();
 538   1      
 539   1          if(PortData==0xFF)                              // reset command
 540   1          {
 541   2              SetPS2InhibitTime(DeviceResetCmdITTime);    // 1.2sec
 542   2          }
 543   1          else
 544   1          {
 545   2              if(TPACKCounter!=0x00)
 546   2              {
 547   3                  tempinactvietime = InactiveTime*TPACKCounter;
 548   3              }
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 10  

 549   2              else if(Main_KB_ACK_CUNT!=0x00)
 550   2              {
 551   3                  tempinactvietime = InactiveTime*Main_KB_ACK_CUNT;
 552   3              }
 553   2              else
 554   2              {
 555   3                  tempinactvietime = InactiveTime;
 556   3              }
 557   2              SetPS2InhibitTime(tempinactvietime);
 558   2          }
 559   1      
 560   1          SetAUXScanIndexHS(AUXScanIndexFree);
 561   1      
 562   1          ECSendtoAUXFlag = 0;
 563   1          SendtoAUXFlag = 1;
 564   1              *asPS2Struct[PortNum].ps2ctrl = 0x1D;
 565   1              *asPS2Struct[PortNum].ps2data = PortData;
 566   1              *asPS2Struct[PortNum].ps2ctrl = 0x1C;
 567   1              *asPS2Struct[PortNum].ps2ctrl = 0x1E;
 568   1              EnableAllInterrupt(); //cwy test G79:Update PS2 code base.
 569   1          SET_MASK(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);    // Enable interrupt
 570   1      
 571   1          WaitPS2DeviceACK(PortNum);
 572   1      }
 573          
 574          //-----------------------------------------------------------------
 575          // Send command to ps2 interface and check ack or not
 576          //  Note : return   0 --> // Transaction done
 577          //                  1 --> // Transaction fail
 578          //
 579          //                  After this function, all ps2 channel is inhibit and channel interrupt is disabled
 580          //-----------------------------------------------------------------
 581          BYTE Send2PortNWait( BYTE PortNum, BYTE cmd, BYTE bytecunt)
 582          {
 583   1          BYTE result;
 584   1          BYTE index;
 585   1      
 586   1          PS2IFAck = 0x00;
 587   1          DisableAllInterrupt();
 588   1          ClaerPS2IFPendingEvent();  //cwy test G79:Update PS2 code base.
 589   1      
 590   1          ECSendtoAUXFlag = 0;
 591   1          SendtoAUXFlag = 0;
 592   1              *asPS2Struct[PortNum].ps2ctrl = 0x1D;
 593   1              *asPS2Struct[PortNum].ps2data = cmd;
 594   1              *asPS2Struct[PortNum].ps2ctrl = 0x1C;
 595   1              *asPS2Struct[PortNum].ps2ctrl = 0x1E;
 596   1              //cwy test G79:Update PS2 code base.
 597   1              //    result = bExtAUXTimeOutCheck(PortNum);
 598   1              result = bExtAUXTimeOutCheck(PortNum, PS2_Transmission_Mode);
 599   1              //>>
 600   1              EnableAllInterrupt();  //cwy test G79:Update PS2 code base.
 601   1          if(result==0x00)                // Transaction done
 602   1          {
 603   2              for(index=0x00;index<bytecunt;index++)
 604   2              {
 605   3                  *asPS2Struct[PortNum].ps2ctrl=PS2_ReceiveMode;  // Get Last ACK by bytecunt
 606   3                              //<<G79:Update PS2 code base.
 607   3                      //result = bExtAUXTimeOutCheck(PortNum);
 608   3                      result = bExtAUXTimeOutCheck(PortNum, PS2_Receive_Mode);
 609   3                              //>>  G79:Update PS2 code base.       
 610   3                  if(result!=0x00)
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 11  

 611   3                  {
 612   4                      break;              // Transaction fail
 613   4                  }
 614   3      
 615   3                  #if SupportReadTPID
                          if( cmd == TPidLastCmd )
                              *(&TPID1+index) = PS2IFAck;
                          #endif
 619   3              }
 620   2          }
 621   1      
 622   1          *asPS2Struct[PortNum].ps2ctrl=PS2_InhibitMode;
 623   1          ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
 624   1      
 625   1          return(result);
 626   1      }
 627          
 628          //-----------------------------------------------------------------
 629          // Process AUX command
 630          //-----------------------------------------------------------------
 631          void SendCmdtoMouse(BYTE PortNum)
 632          {
 633   1          BYTE index;
 634   1      
 635   1          Cmd_A8();
 636   1          ResetMSPendingData();
 637   1          SetPS2CmdACKCounter(0);
 638   1          MS_ID_CUNT = 0x00;
 639   1      
 640   1              if(AUX2ByteCommand)
 641   1              {
 642   2              SetPS2CmdACKCounter(1);
 643   2                      if(TPResolution == 0xFF)
 644   2                      {
 645   3                              TPResolution = KBHIData;
 646   3                      }
 647   2                      else if(TPSamplingRate == 0xFF)
 648   2                      {
 649   3                              TPSamplingRate = KBHIData;
 650   3                      }
 651   2      
 652   2                      Send2Port(PortNum, KBHIData, SendCmdToMS);
 653   2                      AUX2ByteCommand = 0;
 654   2                      return;
 655   2              }
 656   1      
 657   1              switch(KBHIData)
 658   1              {
 659   2                      case 0xE8:                      // Set Resolution (2 byte)
 660   2                              TPResolution = 0xFF;
 661   2                              AUX2ByteCommand=1;
 662   2                              break;
 663   2      
 664   2                      case 0xF3:                      // Set Sampling Rate (2 byte)
 665   2                              TPSamplingRate = 0xFF;
 666   2                              AUX2ByteCommand=1;
 667   2                              break;
 668   2      
 669   2                      case 0xF4:
 670   2                  #if PS2_Pack_Debug
                          PS_Debug_ECToHost = 0xFF;
                          #endif
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 12  

 673   2                              //EnableTP = 1;
 674   2                              MouseDriverIn = 1;
 675   2                              break;
 676   2      
 677   2                      case 0xF5:
 678   2                              MouseDriverIn = 0;
 679   2                              break;
 680   2      
 681   2                      case 0xE6:
 682   2                              break;
 683   2      
 684   2                      case 0xE7:
 685   2                              break;
 686   2      
 687   2                      case 0xEA:
 688   2                              break;
 689   2      
 690   2                      case 0xEC:
 691   2                              break;
 692   2      
 693   2                      case 0xEE:
 694   2                              break;
 695   2      
 696   2                      case 0xF0:
 697   2                              break;
 698   2      
 699   2                      case 0xF6:
 700   2                              break;
 701   2      
 702   2                      case 0xE9:
 703   2                              break;
 704   2      
 705   2                      case 0xF2:
 706   2                  MS_ID_CUNT = 2;
 707   2                              break;
 708   2      
 709   2                      case 0xEB:
 710   2                      case 0xFE:
 711   2                              break;
 712   2      
 713   2                      case 0xFF:
 714   2                              MouseDriverIn = 0;
 715   2                  MULPX_Multiplex = 0;            // Disable Activate Multiplex mode
 716   2                              //EnableTP = 0;
 717   2      
 718   2                  for(index=0x00; index<3; index++)
 719   2                  {
 720   3                      if((Main_MOUSE_CHN-1)!=index)
 721   3                      {
 722   4                          if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_MOUSE))
 723   4                          {
 724   5                              AuxFlags[index] = 0x00;
 725   5                          }
 726   4                      }
 727   3                  }
 728   2                              break;
 729   2      
 730   2                      default:                                    // Invalid command
 731   2                              break;
 732   2              }
 733   1      
 734   1          if(KBHIData==0xFF)      // Reset command
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 13  

 735   1          {
 736   2              SetPS2CmdACKCounter(3);
 737   2          }
 738   1          else if(KBHIData==0xF2) // Read ID command
 739   1          {
 740   2              SetPS2CmdACKCounter(2);
 741   2          }
 742   1          else if(KBHIData==0xE9) // Read status cmmand
 743   1          {
 744   2              SetPS2CmdACKCounter(4);
 745   2          }
 746   1          else                    // Other commands
 747   1          {
 748   2              SetPS2CmdACKCounter(1);
 749   2          }
 750   1      
 751   1              Send2Port(PortNum, KBHIData, SendCmdToMS);
 752   1      }
 753          
 754          //-----------------------------------------------------------------
 755          // Process AUX MUX command
 756          //-----------------------------------------------------------------
 757          void SendCmdtoMUX(BYTE port)
 758          {
 759   1          SetPS2CmdACKCounter(0);
 760   1          ResetMSPendingData();
 761   1              if(AUX2ByteCommand)
 762   1              {
 763   2              SetPS2CmdACKCounter(1);
 764   2                      Send2Port(port, KBHIData, SendCmdToMS);
 765   2                      AUX2ByteCommand = 0;
 766   2                      return;
 767   2              }
 768   1      
 769   1              switch(KBHIData)
 770   1              {
 771   2                      case 0xE8:              // Set Resolution (2 byte)
 772   2                      case 0xF3:              // Set Sampling Rate (2 byte)
 773   2                              AUX2ByteCommand=1;
 774   2                              break;
 775   2      
 776   2                      case 0xF4:
 777   2                      case 0xF5:
 778   2                      case 0xE6:
 779   2                      case 0xE7:
 780   2                      case 0xEA:
 781   2                      case 0xEC:
 782   2                      case 0xEE:
 783   2                      case 0xF0:
 784   2                      case 0xF6:
 785   2                      case 0xE9:
 786   2                      case 0xEB:
 787   2                      case 0xF2:
 788   2                      case 0xFE:
 789   2                      case 0xE1:                  // For older Synaptics TouchPads
 790   2                      case 0xFF:
 791   2                              break;
 792   2      
 793   2                      default:                    // Invalid command
 794   2                              break;
 795   2              }
 796   1      
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 14  

 797   1          if(KBHIData==0xFF)      // Reset command
 798   1          {
 799   2              SetPS2CmdACKCounter(3);
 800   2          }
 801   1          else if(KBHIData==0xF2) // Read ID command
 802   1          {
 803   2              SetPS2CmdACKCounter(2);
 804   2          }
 805   1          else if(KBHIData==0xE9) // Read status cmmand
 806   1          {
 807   2              SetPS2CmdACKCounter(4);
 808   2          }
 809   1          else                    // Other commands
 810   1          {
 811   2              SetPS2CmdACKCounter(1);
 812   2          }
 813   1      
 814   1          Send2Port(port, KBHIData, SendCmdToMS);
 815   1      }
 816          
 817          //-----------------------------------------------------------------
 818          // FUNCTION: Ps2_Init - Init PS2 registers and variables.
 819          // Put in receive mode.
 820          //-----------------------------------------------------------------
 821          void Ps2_Init(void)
 822          {
 823   1      
 824   1      }
 825          
 826          //-----------------------------------------------------------------
 827          // The function of PS2 interface interrupt service routine
 828          //-----------------------------------------------------------------
 829          void service_ps2(void)
 830          {
 831   1          BYTE channel;
 832   1      
 833   1          channel = PS2_IRQ_Channel;
 834   1          if(channel!=0xFF)
 835   1          {
 836   2              Hook_service_ps2(channel, PS2PortxData[channel]);
 837   2              PS2_IRQ_Channel = 0xFF;
 838   2              SendAUXData(channel);
 839   2          }
 840   1      }
 841          
 842          //----------------------------------------------------------------------------
 843          //----------------------------------------------------------------------------
 844          // The function of stopping ps2 devices send data to KBC
 845          //----------------------------------------------------------------------------
 846          void PS2DeviceInactive(void)
 847          {
 848   1              PSCTL1 = PS2_InhibitMode;
 849   1              PSCTL2 = PS2_InhibitMode;
 850   1              PSCTL3 = PS2_InhibitMode;
 851   1      }
 852          
 853          //----------------------------------------------------------------------------
 854          // The function of starting ps2 devices send data to KBC
 855          //----------------------------------------------------------------------------
 856          void PS2Deviceactive(void)
 857          {
 858   1          BYTE index;
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 15  

 859   1          for(index=0x00;index<3;index++)
 860   1          {
 861   2              if(IS_MASK_SET(AuxFlags[index],DEVICE_IS_KEYBOARD))
 862   2              {
 863   3                  *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 864   3                  SET_MASK(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit);
 865   3              }
 866   2          }
 867   1          for(index=0x00;index<3;index++)
 868   1          {
 869   2              if(IS_MASK_SET(AuxFlags[index],DEVICE_IS_MOUSE))
 870   2              {
 871   3                  *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 872   3                  SET_MASK(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit);
 873   3              }
 874   2          }
 875   1      }
 876          
 877          //----------------------------------------------------------------------------
 878          // The function of inhibit AUX device
 879          //----------------------------------------------------------------------------
 880          void InhibitAUXDevice(void)
 881          {
 882   1              PS2DeviceInactive();
 883   1      
 884   1          TR1 = 0;        // Disable timer1
 885   1              ET1 = 0;                // Disable timer1 interrupt
 886   1          _nop_();
 887   1          _nop_();
 888   1          _nop_();
 889   1          _nop_();
 890   1          TH1 = Timer_150u>>8;    // set timer1 counter 150 us
 891   1          TL1 = Timer_150u;       // set timer1 counter 150 us
 892   1          TF1 = 0;            // clear overflow flag
 893   1              TR1 = 1;                // enable timer1
 894   1              while(!TF1);    // waitting overflow flag
 895   1          TR1 = 0;        // Disable timer1
 896   1              TF1 = 0;                // clear overflow flag
 897   1              ET1 = 1;                // Enable timer1 interrupt
 898   1      }
 899          
 900          //----------------------------------------------------------------------------
 901          // The function of scaning AUX device
 902          // Parameter 1 :
 903          //           0 : scan all channel
 904          //           1 : scan mouse channel
 905          //           2 : scan keyboard channel
 906          //----------------------------------------------------------------------------
 907          void ScanAUXDevice(BYTE scan_selection)
 908          {
 909   1              BYTE index;
 910   1          BYTE timeout;
 911   1      
 912   1          if(scan_selection==ScanMouseChannel)    // Scan mouse channel
 913   1          {
 914   2              if(Main_MOUSE_CHN!=0x00)    // Main mouse is presetn
 915   2              {
 916   3                  return;
 917   3              }
 918   2          }
 919   1          else if(scan_selection==ScanKeyboardChannel)   // Scan keyboard channel
 920   1          {
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 16  

 921   2              if(Main_KB_CHN!=0x00)       // Main keyboard is present
 922   2              {
 923   3                  return;
 924   3              }
 925   2          }
 926   1      
 927   1              for(index=0x00;index<3;index++)
 928   1              {
 929   2              if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_MOUSE)||IS_MASK_SET(AuxFlags[index], DEVICE_IS_KEYBOARD)
             -)
 930   2              {
 931   3                  continue;
 932   3              }
 933   2                      AuxFlags[index] = 0x00;
 934   2      
 935   2                      if(index==0x00)
 936   2                      {
 937   3                              if((PS2_Port0_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port0_Data_CtrlReg&0xFB)!=0x00)
 938   3                                      continue;                   // If this channel isn't PS2 ALT function, scan next.
 939   3                      }
 940   2                      else if(index==0x01)
 941   2                      {
 942   3                              if((PS2_Port1_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port1_Data_CtrlReg&0xFB)!=0x00)
 943   3                                      continue;                   // If this channel isn't PS2 ALT function, scan next.
 944   3                      }
 945   2                      else if(index==0x02)
 946   2                      {
 947   3                              if((PS2_Port2_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port2_Data_CtrlReg&0xFB)!=0x00)
 948   3                                      continue;                   // If this channel isn't PS2 ALT function, scan next.
 949   3                      }
 950   2      
 951   2              if(Send2PortNWait(index,0xFF,1)==0x00 && (PS2IFAck==0xFA))
 952   2              {
 953   3                  SET_MASK(AuxFlags[index], DEVICE_IS_ATTACHED);
 954   3      
 955   3                  *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 956   3                  for(timeout=0x00;timeout<=ResetCmdTOTime;timeout++) // 510 ms time-out
 957   3                  {
 958   4      //cwy test     G79:Update PS2 code base.       
 959   4      //                if(!bExtAUXTimeOutCheck(index))
 960   4                                       if(!bExtAUXTimeOutCheck(index, PS2_Receive_Mode))
 961   4      //>>    G79:Update PS2 code base.                        
 962   4                      {
 963   5                          break;
 964   5                      }
 965   4                  }
 966   3      
 967   3                  if(timeout>ResetCmdTOTime)                          // wait aa time-out
 968   3                  {
 969   4                      CLEAR_MASK(AuxFlags[index], DEVICE_IS_ATTACHED);
 970   4                  }
 971   3                  else
 972   3                  {
 973   4                      *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 974   4                      for(timeout=0x00;timeout<=ResetCmdTOTime;timeout++) // 510 ms time-out
 975   4                      {
 976   5      //cwy testG79:Update PS2 code base.
 977   5       //                   if(!bExtAUXTimeOutCheck(index))
 978   5                                                if(!bExtAUXTimeOutCheck(index, PS2_Receive_Mode))
 979   5      //>>    G79:Update PS2 code base.                                 
 980   5                          {
 981   6                              break;
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 17  

 982   6                          }
 983   5                      }
 984   4      
 985   4                      if(timeout>ResetCmdTOTime)                  // wait 00 time-out
 986   4                      {
 987   5                          SET_MASK(AuxFlags[index], DEVICE_IS_KEYBOARD);
 988   5                          CheckNSetMainKBCHN(index);
 989   5                          if(scan_selection==ScanKeyboardChannel) // Scan keyboard channel
 990   5                          {
 991   6                              break;
 992   6                          }
 993   5                      }
 994   4                      else
 995   4                      {
 996   5                          if(PS2IFAck==0x00)      // Mouse
 997   5                          {
 998   6                              SET_MASK(AuxFlags[index], DEVICE_IS_MOUSE);
 999   6                              CheckNSetMainMSCHN(index);
1000   6                              if(scan_selection==ScanMouseChannel)    // Scan mouse channel
1001   6                              {
1002   7                                  break;
1003   7                              }
1004   6                          }
1005   5                          else                    // Keyboard
1006   5                          {
1007   6                              SET_MASK(AuxFlags[index], DEVICE_IS_KEYBOARD);
1008   6                              CheckNSetMainKBCHN(index);
1009   6                              if(scan_selection==ScanKeyboardChannel) // Scan keyboard channel
1010   6                              {
1011   7                                  break;
1012   7                              }
1013   6                          }
1014   5                      }
1015   4                  }
1016   3      
1017   3                  *asPS2Struct[index].ps2ctrl=PS2_InhibitMode;
1018   3                  ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
1019   3              }
1020   2              else
1021   2              {
1022   3                  *asPS2Struct[index].ps2ctrl=PS2_InhibitMode;
1023   3                  ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
1024   3                              continue;           // Device non-ack
1025   3              }
1026   2              }
1027   1      
1028   1          if((Main_MOUSE_CHN==0x00)&&(Main_KB_CHN==0x00)) // No any device
1029   1          {
1030   2              ClearAUXScanTimeOutCunt();
1031   2              SetAUXScanIndexHS(AUXScanIndexFree);
1032   2          }
1033   1      }
1034          
1035          //----------------------------------------------------------------------------
1036          // The function of checking AUX device is keyborad or mouse
1037          //----------------------------------------------------------------------------
1038          void CheckAUXDeviceType(void)
1039          {
1040   1          BYTE timeout;
1041   1      
1042   1          if(AuxFlags[AUX_SCAN_INDEX] == DEVICE_NEED_INIT)
1043   1          {
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 18  

1044   2              AuxFlags[AUX_SCAN_INDEX]=0x00;
1045   2              PS2IFAck = 0x00;
1046   2      
1047   2              if(Send2PortNWait(AUX_SCAN_INDEX,0xFF,1)==0x00 && (PS2IFAck==0xFA))
1048   2              {
1049   3                  SET_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_ATTACHED);
1050   3      
1051   3                  *asPS2Struct[AUX_SCAN_INDEX].ps2ctrl=PS2_ReceiveMode;
1052   3                  for(timeout=0x00;timeout<=ResetCmdTOTime;timeout++) // 510 ms time-out
1053   3                  {
1054   4      //cwy test    G79:Update PS2 code base.        
1055   4                //      if(!bExtAUXTimeOutCheck(AUX_SCAN_INDEX))
1056   4                               if(!bExtAUXTimeOutCheck(AUX_SCAN_INDEX, PS2_Receive_Mode))
1057   4      //>>         G79:Update PS2 code base.           
1058   4                      {
1059   5                          break;
1060   5                      }
1061   4                  }
1062   3      
1063   3                  if(timeout>ResetCmdTOTime)  // wait aa time-out
1064   3                  {
1065   4                      CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_ATTACHED);
1066   4                  }
1067   3                  else
1068   3                  {
1069   4                      *asPS2Struct[AUX_SCAN_INDEX].ps2ctrl=PS2_ReceiveMode;
1070   4                      for(timeout=0x00;timeout<=ResetCmdTOTime;timeout++) // 510 ms time-out
1071   4                      {
1072   5      //cwy test     G79:Update PS2 code base.           
1073   5                     //     if(!bExtAUXTimeOutCheck(AUX_SCAN_INDEX))
1074   5                      if(!bExtAUXTimeOutCheck(AUX_SCAN_INDEX, PS2_Receive_Mode))
1075   5      //>>       G79:Update PS2 code base.         
1076   5                          {
1077   6                               break;
1078   6                          }
1079   5                      }
1080   4      
1081   4                      if(timeout>ResetCmdTOTime)  // wait 00 time-out
1082   4                      {
1083   5                          SET_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_KEYBOARD);
1084   5                          CheckNSetMainKBCHN(AUX_SCAN_INDEX);
1085   5                      }
1086   4                      else
1087   4                      {
1088   5                          if(PS2IFAck==0x00)      // Mouse
1089   5                          {
1090   6                              SET_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_MOUSE);      // Device is mouse
1091   6                              CheckNSetMainMSCHN(AUX_SCAN_INDEX);
1092   6                          }
1093   5                          else                    // Keyboard
1094   5                          {
1095   6                              SET_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_KEYBOARD);
1096   6                              CheckNSetMainKBCHN(AUX_SCAN_INDEX);
1097   6                          }
1098   5                      }
1099   4                  }
1100   3      
1101   3                  *asPS2Struct[AUX_SCAN_INDEX].ps2ctrl=PS2_InhibitMode;
1102   3                  ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
1103   3      
1104   3                  if(IS_MASK_SET(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_ATTACHED))
1105   3                  {
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 19  

1106   4                      SET_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1107   4                      ScanAUXStepIndex = ScanAUXStep_Init + AUX_SCAN_INDEX;
1108   4                  }
1109   3                  else
1110   3                  {
1111   4                      SetAUXScanIndexHS(AUXScanIndexFree);
1112   4                      ScanAUXStepIndex = ScanAUXStep_CheckTypeFail + AUX_SCAN_INDEX;
1113   4                  }
1114   3              }
1115   2              else
1116   2              {
1117   3                  *asPS2Struct[AUX_SCAN_INDEX].ps2ctrl=PS2_InhibitMode;
1118   3                  ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
1119   3      
1120   3                  SetAUXScanIndexHS(AUXScanIndexFree);
1121   3                  ScanAUXStepIndex = ScanAUXStep_InitFail + AUX_SCAN_INDEX;
1122   3              }
1123   2              PS2Deviceactive();
1124   2          }
1125   1      }
1126          
1127          //----------------------------------------------------------------------------
1128          // Clear variables for device plug-out
1129          //----------------------------------------------------------------------------
1130          void AUXDevicePlugOutClearVariables(void)
1131          {
1132   1          BYTE index;
1133   1      
1134   1          ClearAUXScanTimeOutCunt();
1135   1          SetAUXScanIndexHS(AUXScanIndexFree);
1136   1          AuxFlags[AUX_SCAN_INDEX] = 0x00;
1137   1          AuxFlags2[AUX_SCAN_INDEX] = 0x00;
1138   1          PS2_ReTryCunt = 0x00;
1139   1          SendtoAUXFlag = 0;
1140   1          ECSendtoAUXFlag = 0;
1141   1      
1142   1          if(Main_MOUSE_CHN == (AUX_SCAN_INDEX+1))
1143   1          {
1144   2              Main_MOUSE_CHN = 0x00;
1145   2              for(index=0x00;index<3;index++)
1146   2              {
1147   3                  if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_MOUSE))
1148   3                  {
1149   4                      SET_MASK(AuxFlags[index], DEVICE_IS_MAIN_MOUSE);
1150   4                      Main_MOUSE_CHN = index + 1;
1151   4                      break;
1152   4                  }
1153   3              }
1154   2          }
1155   1      
1156   1          if(Main_KB_CHN == (AUX_SCAN_INDEX+1))
1157   1          {
1158   2              Main_KB_CHN = 0x00;
1159   2              for(index=0x00;index<3;index++)
1160   2              {
1161   3                  if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_KEYBOARD))
1162   3                  {
1163   4                      SET_MASK(AuxFlags[index], DEVICE_IS_MAIN_KB);
1164   4                      Main_KB_CHN = index + 1;
1165   4                      break;
1166   4                  }
1167   3              }
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 20  

1168   2          }
1169   1      }
1170          
1171          //----------------------------------------------------------------------------
1172          // The polling aux device center
1173          //----------------------------------------------------------------------------
1174          void PollingAUXDeviceCenter(void)
1175          {
1176   1          if(AUX_SCAN_INDEX_HS!=AUXScanIndexInUse)
1177   1          {
1178   2              SetAUXScanIndexHS(AUXScanIndexInUse);
1179   2              AUX_SCAN_INDEX++;
1180   2              if(AUX_SCAN_INDEX>2)
1181   2              {
1182   3                  AUX_SCAN_INDEX=0x00;
1183   3              }
1184   2              ScanAUXStepIndex = ScanAUXStep_ScanPort+AUX_SCAN_INDEX;
1185   2          }
1186   1          else
1187   1          {
1188   2              if(ECSendtoAUXFlag)
1189   2              {
1190   3                  AUX_SCAN_TIMEOUT_CUNT++;
1191   3                  if(AUX_SCAN_TIMEOUT_CUNT>=CheckDeviceTimeOut)
1192   3                  {
1193   4                      AUXDevicePlugOutClearVariables();
1194   4                      PS2Deviceactive();
1195   4                  }
1196   3              }
1197   2          }
1198   1      }
1199          
1200          //----------------------------------------------------------------------------
1201          // The function of update external keyboard device
1202          //----------------------------------------------------------------------------
1203          const BYTE code UpdateConfigAUXKB[] = {0xF5, 0xF4, 0xF3, 0xED}; // Command table
1204          
1205          void UpdateExtKeyboard(BYTE portnum)
1206          {
1207   1              BYTE index;
1208   1      
1209   1          for(index=0x00; index<sizeof(UpdateConfigAUXKB); index++)
1210   1          {
1211   2              //if(IS_BIT_SET(AuxFlags_KB_CMD[AUX_SCAN_INDEX], bit(index)))
1212   2              if(IS_MASK_SET(AuxFlags_KB_CMD[AUX_SCAN_INDEX], BIT(index)))
1213   2              {
1214   3                  if(!Send2PortNWait(portnum,UpdateConfigAUXKB[index],1))
1215   3                  {
1216   4                      if(UpdateConfigAUXKB[index]==0xF3)
1217   4                      {
1218   5                          Send2PortNWait(portnum,Save_Typematic,1);
1219   5                      }
1220   4                      else if(UpdateConfigAUXKB[index]==0xED)
1221   4                      {
1222   5                          Send2PortNWait(portnum,(Led_Data&0x07),1);
1223   5                      }
1224   4                      CLEAR_MASK(AuxFlags_KB_CMD[AUX_SCAN_INDEX], BIT(index));
1225   4                  }
1226   3              }
1227   2          }
1228   1      }
1229          
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 21  

1230          //----------------------------------------------------------------------------
1231          // The function of update aux keyboard device
1232          //----------------------------------------------------------------------------
1233          void UpdateAUXKBDevice(void)
1234          {
1235   1          UpdateExtKeyboard(AUX_SCAN_INDEX);
1236   1          SetAUXScanIndexHS(AUXScanIndexFree);
1237   1      }
1238          
1239          
1240          //----------------------------------------------------------------------------
1241          // The function of init, AUX device
1242          //----------------------------------------------------------------------------
1243          void InitAUXDevice(void)
1244          {
1245   1          if(IS_MASK_SET(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_KEYBOARD))   // device is keyboard
1246   1          {
1247   2              if(KeyboardDriverIn)
1248   2              {
1249   3                  if(AuxFlags_KB_CMD[AUX_SCAN_INDEX]==0x00)
1250   3                  {
1251   4                      ConfigExtKeyboard(AUX_SCAN_INDEX);
1252   4                  }
1253   3                  else
1254   3                  {
1255   4                      UpdateExtKeyboard(AUX_SCAN_INDEX);
1256   4                  }
1257   3                  CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1258   3              }
1259   2              else
1260   2              {
1261   3      
1262   3              }
1263   2          }
1264   1          else                                                // device is mouse
1265   1          {
1266   2              if(MouseDriverIn)
1267   2              {
1268   3                      if(MULPX_Multiplex)
1269   3                      {
1270   4                      AUXData_To_Host_nWait(0xAA,AUX_SCAN_INDEX);
1271   4                      AUXData_To_Host_nWait(0x00,AUX_SCAN_INDEX);
1272   4                      CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1273   4                      SetPS2SkipScanTime(10);
1274   4                      }
1275   3                  else
1276   3                  {
1277   4                      if(SetIntellimouse(MS_DRIVER_TYPE,AUX_SCAN_INDEX))
1278   4                      {
1279   5                          if(ReadMouseID(AUX_SCAN_INDEX)==MS_DRIVER_TYPE)
1280   5                          {
1281   6                              if(ConfigExtMouse(AUX_SCAN_INDEX))
1282   6                              {
1283   7                                  CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1284   7                              }
1285   6                              else
1286   6                              {
1287   7                                  AuxFlags[AUX_SCAN_INDEX] = 0x00;        // device error
1288   7                              }
1289   6                          }
1290   5                          else
1291   5                          {
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 22  

1292   6                              SET_MASK(AuxFlags[AUX_SCAN_INDEX],DEVICE_MS_DRIVER_NO_MATCH);
1293   6                              CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1294   6                          }
1295   5                      }
1296   4                      else
1297   4                      {
1298   5                          AuxFlags[AUX_SCAN_INDEX] = 0x00;                // device error
1299   5                      }
1300   4                  }
1301   3              }
1302   2              else
1303   2              {
1304   3                      if(MULPX_Multiplex)
1305   3                      {
1306   4                      AUXData_To_Host_nWait(0xAA,AUX_SCAN_INDEX);
1307   4                      AUXData_To_Host_nWait(0x00,AUX_SCAN_INDEX);
1308   4                      CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1309   4                      }
1310   3              }
1311   2          }
1312   1          PS2Deviceactive();
1313   1          SetAUXScanIndexHS(AUXScanIndexFree);
1314   1      }
1315          
1316          //----------------------------------------------------------------------------
1317          // The function of enabling/disabling TP by EC self.
1318          //
1319          //      Note : If want to enable mouse device. Please ensrue "MouseDriverIn" is set.
1320          //----------------------------------------------------------------------------
1321          void TPOnlyLowLevelFunc(void)
1322          {
1323   1          BYTE index;
1324   1      
1325   1          if(StartENAUXDevice)        // 10ms time base
1326   1          {
1327   2              StartENAUXDevice = 0;
1328   2      
1329   2              if(MSPending==0x33)     // PS2 data is pending
1330   2              {
1331   3                  return;             // Exit
1332   3              }
1333   2      
1334   2              if(TPACKCounter!=0x00)
1335   2              {
1336   3                  return;
1337   3              }
1338   2      
1339   2              Hook_TPOnlyLowLevelFunc();
1340   2      
1341   2              if(AUXInactiveCounter!=0x00)
1342   2                  {
1343   3                          AUXInactiveCounter--;
1344   3                  return;
1345   3                  }
1346   2              else
1347   2              {
1348   3                  if(IS_MASK_SET(PSSTS1, SS)||IS_MASK_SET(PSSTS2, SS)||IS_MASK_SET(PSSTS3, SS)||F_Service_PS2)
1349   3                  {
1350   4                      return;
1351   4                  }
1352   3              }
1353   2      
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 23  

1354   2              if(AUXInactiveCounter==0x00)
1355   2              {
1356   3                      for(index=0x00;index<3;index++)
1357   3                      {
1358   4                              if(IS_MASK_SET(AuxFlags2[index], DEVICE_NEED_DISABLED))
1359   4                              {
1360   5                              if(!Send2PortNWait(index,0xF5,1))
1361   5                              {
1362   6                                      CLEAR_MASK(AuxFlags2[index], DEVICE_NEED_DISABLED);
1363   6                              SET_MASK(AuxFlags2[index],DEVICE_IS_DISABLED);
1364   6                              }
1365   5                              }
1366   4                              else if(IS_MASK_SET(AuxFlags2[index], DEVICE_NEED_ENABLED))
1367   4                              {
1368   5                              if(!Send2PortNWait(index,0xF4,1))
1369   5                              {
1370   6                                      CLEAR_MASK(AuxFlags2[index], DEVICE_NEED_ENABLED);
1371   6                              SET_MASK(AuxFlags2[index],DEVICE_IS_ENABLED);
1372   6                                              *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
1373   6                              SET_MASK(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit);
1374   6                              }
1375   5                              }
1376   4                      }
1377   3              }
1378   2          }
1379   1      }
1380          
1381          //----------------------------------------------------------------------------
1382          // The function of scaning external AUX device
1383          //----------------------------------------------------------------------------
1384          void ExternalAUXLowLevelFunc(void)
1385          {
1386   1          BYTE ISR2Temp;
1387   1      
1388   1          if(StartENAUXDevice)                // 10ms time base
1389   1          {
1390   2              StartENAUXDevice = 0;
1391   2      
1392   2              if(MSPending==0x33)             // PS2 data is pending
1393   2              {
1394   3                  return;                     // Exit
1395   3              }
1396   2      
1397   2              EnableAUXDevice();
1398   2      
1399   2              if(AUXInactiveCounter!=0x00)    // PS2 channel in inhibit.
1400   2              {
1401   3                  return;                     // Exit
1402   3              }
1403   2      
1404   2              if(SKIP_AUX_SCAN_CUNT!=0x00)    // EC skip to scan PS2 interface
1405   2              {
1406   3                  return;
1407   3              }
1408   2      
1409   2              if(IS_MASK_SET(PSSTS1, SS)||IS_MASK_SET(PSSTS2, SS)||IS_MASK_SET(PSSTS3, SS)||PS2StartBit==1)
1410   2              {
1411   3                  AuxScanWDT++;
1412   3      
1413   3                  if(AuxScanWDT>100)          // Interface watch dog for hot-plug  (1sec).
1414   3                  {
1415   4                      AuxScanWDT = 0x00;
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 24  

1416   4                      PS2StartBit = 0;
1417   4      
1418   4                      AUXDevicePlugOutClearVariables();
1419   4                      PS2Deviceactive();
1420   4      
1421   4                      if(IS_MASK_SET(PSSTS1, SS)||PS2_SSIRQ_Channel == 0)
1422   4                      {
1423   5                              PSCTL1 = PS2_InhibitMode;
1424   5                      }
1425   4                      else if(IS_MASK_SET(PSSTS2, SS)||PS2_SSIRQ_Channel == 1)
1426   4                      {
1427   5                          PSCTL2 = PS2_InhibitMode;
1428   5                      }
1429   4                      else if(IS_MASK_SET(PSSTS3, SS)||PS2_SSIRQ_Channel == 2)
1430   4                      {
1431   5                          PSCTL3 = PS2_InhibitMode;
1432   5                      }
1433   4                  }
1434   3                  return;
1435   3              }
1436   2              else
1437   2              {
1438   3                  AuxScanWDT = 0x00;
1439   3      
1440   3                  ISR2Temp = ISR2;
1441   3                  ISR2Temp &= (Int_PS2_0+Int_PS2_1+Int_PS2_2);
1442   3                  if(ISR2Temp !=0x00)
1443   3                  {
1444   4                      return;
1445   4                  }
1446   3                  else
1447   3                  {
1448   4                      //if(PS2StartBit==1 || F_Service_PS2==1)  // Any ps2 channel has getten data.
1449   4                      if(F_Service_PS2)       // Any ps2 channel has getten data.
1450   4                      {
1451   5                          return;             // Exit
1452   5                      }
1453   4                      else
1454   4                      {
1455   5                          PS2DeviceInactive();
1456   5                      }
1457   4                  }
1458   3              }
1459   2      
1460   2              PollingAUXDeviceCenter();
1461   2      
1462   2              switch(ScanAUXStepIndex)
1463   2              {
1464   3                  case ScanAUXStep_ScanPort0:
1465   3                  case ScanAUXStep_ScanPort1:
1466   3                  case ScanAUXStep_ScanPort2:
1467   3                      ScanAUXPortX();
1468   3                      break;
1469   3      
1470   3                  case ScanAUXStep_CheckType0:
1471   3                  case ScanAUXStep_CheckType1:
1472   3                  case ScanAUXStep_CheckType2:
1473   3                      CheckAUXDeviceType();
1474   3                      break;
1475   3      
1476   3                  case ScanAUXStep_Init0:
1477   3                  case ScanAUXStep_Init1:
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 25  

1478   3                  case ScanAUXStep_Init2:
1479   3                      InitAUXDevice();
1480   3                      break;
1481   3      
1482   3                  case ScanAUXStep_UpdateKB0:
1483   3                  case ScanAUXStep_UpdateKB1:
1484   3                  case ScanAUXStep_UpdateKB2:
1485   3                      UpdateAUXKBDevice();
1486   3                      break;
1487   3      
1488   3                  case ScanAUXStep_CheckOK1:
1489   3                  case ScanAUXStep_CheckOK2:
1490   3                  case ScanAUXStep_CheckOK3:
1491   3      
1492   3                  case ScanAUXStep_InitFail0:
1493   3                  case ScanAUXStep_InitFail1:
1494   3                  case ScanAUXStep_InitFail2:
1495   3      
1496   3                  case ScanAUXStep_CheckTypeFail0:
1497   3                  case ScanAUXStep_CheckTypeFail1:
1498   3                  case ScanAUXStep_CheckTypeFail2:
1499   3      
1500   3                  case ScanAUXStep_Skip0:
1501   3                  case ScanAUXStep_Skip1:
1502   3                  case ScanAUXStep_Skip2:
1503   3      
1504   3                  case ScanAUXStep_WaitPort0:
1505   3                  case ScanAUXStep_WaitPort1:
1506   3                  case ScanAUXStep_WaitPort2:
1507   3      
1508   3                  default:
1509   3                      break;
1510   3              }
1511   2      
1512   2          }
1513   1      }
1514          
1515          //----------------------------------------------------------------------------
1516          // The function of scaning AUX device step
1517          //----------------------------------------------------------------------------
1518          void ScanAUXDeviceStep(void)
1519          {
1520   1          #if TouchPad_only
1521   1          TPOnlyLowLevelFunc();
1522   1          #else
                  ExternalAUXLowLevelFunc();
                  #endif
1525   1      }
1526          
1527          //----------------------------------------------------------------------------
1528          // The function of checking AUX device
1529          //----------------------------------------------------------------------------
1530          void ScanAUXPortX(void)
1531          {
1532   1          if(AUX_SCAN_INDEX_HS==AUXScanIndexInUse)
1533   1          {
1534   2              if(AUX_SCAN_INDEX==0x00)
1535   2              {
1536   3                  if((PS2_Port0_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port0_Data_CtrlReg&0xFB)!=0x00)
1537   3                  {
1538   4                       SetAUXScanIndexHS(AUXScanIndexFree);
1539   4                  }
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 26  

1540   3              }
1541   2              else if(AUX_SCAN_INDEX==0x01)
1542   2              {
1543   3                  if((PS2_Port1_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port1_Data_CtrlReg&0xFB)!=0x00)
1544   3                  {
1545   4                      SetAUXScanIndexHS(AUXScanIndexFree);
1546   4                  }
1547   3              }
1548   2              else if(AUX_SCAN_INDEX==0x02)
1549   2              {
1550   3                  if((PS2_Port2_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port2_Data_CtrlReg&0xFB)!=0x00)
1551   3                  {
1552   4                       SetAUXScanIndexHS(AUXScanIndexFree);
1553   4                  }
1554   3              }
1555   2      
1556   2              if(AUX_SCAN_INDEX_HS == AUXScanIndexFree)
1557   2              {
1558   3                  ScanAUXStepIndex = ScanAUXStep_Skip + AUX_SCAN_INDEX;
1559   3              }
1560   2              else
1561   2              {
1562   3                  ClearAUXScanTimeOutCunt();
1563   3                  if(IS_MASK_SET(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED))
1564   3                  {
1565   4                      ECSend2Port(AUX_SCAN_INDEX, 0xF5);
1566   4                  }
1567   3                  else if(IS_MASK_SET(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED))
1568   3                  {
1569   4                      ECSend2Port(AUX_SCAN_INDEX, 0xF4);
1570   4                  }
1571   3                  else
1572   3                  {
1573   4                      ECSend2Port(AUX_SCAN_INDEX, 0xF1);
1574   4                  }
1575   3                  ScanAUXStepIndex = ScanAUXStep_WaitPort + AUX_SCAN_INDEX;
1576   3              }
1577   2          }
1578   1      }
1579          
1580          //----------------------------------------------------------------------------
1581          // The function of enabling all PS2 interface
1582          //----------------------------------------------------------------------------
1583          void EnableAUXDevice(void)
1584          {
1585   1              if(AUXInactiveCounter!=0x00)
1586   1              {
1587   2                      if(--AUXInactiveCounter==0x00)
1588   2                      {
1589   3                              PS2Deviceactive();
1590   3                      }
1591   2              }
1592   1      
1593   1          if(SKIP_AUX_SCAN_CUNT!=0x00)
1594   1          {
1595   2              SKIP_AUX_SCAN_CUNT--;
1596   2          }
1597   1      }
1598          
1599          //----------------------------------------------------------------------------
1600          // The function of starting to check AUX device
1601          //----------------------------------------------------------------------------
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 27  

1602          //cwy tetG79:Update PS2 code base.
1603          //BYTE bExtAUXTimeOutCheck(BYTE channel)
1604          BYTE bExtAUXTimeOutCheck(BYTE channel, BYTE p_mode)
1605          {
1606   1          BYTE result;
1607   1          result = 0x01;      // pre-set resutl is fail
1608   1      
1609   1          TR1 = 0;            // Disable timer 1
1610   1              ET1 = 0;                        // Disable timer1 interrupt
1611   1          _nop_();
1612   1          _nop_();
1613   1          _nop_();
1614   1          _nop_();
1615   1          TH1 = Timer_30ms>>8;    // Set timer1 counter 30ms
1616   1          TL1 = Timer_30ms;       // Set timer1 counter 30ms
1617   1          TF1 = 0;                    // clear overflow flag
1618   1              TR1 = 1;                        // enable timer1
1619   1      //cwy test G79:Update PS2 code base.
1620   1      /*
1621   1              do
1622   1              {                   // Wait PS2 transaction Done Status
1623   1              if(IS_MASK_SET(*asPS2Struct[channel].ps2status, TDS))
1624   1              {
1625   1                  for(PS2DataPinStatus=0x00;PS2DataPinStatus<5;PS2DataPinStatus++)
1626   1                  {
1627   1                      if(IS_MASK_SET(*asPS2Struct[channel].ps2status, DLS))   // DATA Line Status is high
1628   1                      {
1629   1                          break;
1630   1                      }
1631   1                      else
1632   1                      {
1633   1                          WNCKR = 0x00;       // Delay 15.26 us
1634   1                      }
1635   1                  }
1636   1                  //WNCKR = 0x00;               // Delay 15.26 us
1637   1                  //WNCKR = 0x00;               // Delay 15.26 us
1638   1                  //WNCKR = 0x00;               // Delay 15.26 us
1639   1                  //WNCKR = 0x00;               // Delay 15.26 us
1640   1                  //WNCKR = 0x00;               // Delay 15.26 us
1641   1                  //WNCKR = 0x00;               // Delay 15.26 us
1642   1                  //WNCKR = 0x00;               // Delay 15.26 us
1643   1                  *asPS2Struct[channel].ps2ctrl=PS2_InhibitMode;
1644   1                  PS2IFAck=*asPS2Struct[channel].ps2data;
1645   1                  result = 0x00;
1646   1                  break;
1647   1              }
1648   1              }while(!TF1);                                   // waitting for overflow flag
1649   1      *///G79:Update PS2 code base.
1650   1              do
1651   1              {                   // Wait PS2 transaction Done Status
1652   2              //if(IS_MASK_SET(*asPS2Struct[channel].ps2status, TDS))
1653   2              
1654   2              //
1655   2              // Wait PS2 transaction Done
1656   2              //
1657   2              if(IS_MASK_SET(*asPS2Struct[channel].ps2isr, asPS2Struct[channel].ctrlbit))
1658   2              {
1659   3                  if(p_mode == PS2_Transmission_Mode)
1660   3                  {
1661   4                      for(PS2DataPinStatus=0x00;PS2DataPinStatus<5;PS2DataPinStatus++)
1662   4                      {
1663   5                          //if(IS_MASK_SET(*asPS2Struct[channel].ps2status, DLS))   // DATA Line Status is high
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 28  

1664   5                          //{
1665   5                          //    break;
1666   5                          //}
1667   5                          if(channel==2)
1668   5                          {
1669   6                              //
1670   6                              // DATA Line Status is high of ps2 port 1
1671   6                              //
1672   6                              if(IS_MASK_SET(GPDRF, BIT5))   // DATA Line Status is high
1673   6                              {
1674   7                                  break;
1675   7                              }
1676   6                          }
1677   5                          else if(channel==1)
1678   5                          {
1679   6                              //
1680   6                              // DATA Line Status is high of ps2 port 1
1681   6                              //
1682   6                              if(IS_MASK_SET(GPDRF, BIT3))
1683   6                              {
1684   7                                  break;
1685   7                              }
1686   6                          }
1687   5                          else if(channel==0)
1688   5                          {
1689   6                              //
1690   6                              // DATA Line Status is high of ps2 port 0
1691   6                              //
1692   6                              if(IS_MASK_SET(GPDRF, BIT1))
1693   6                              {
1694   7                                  break;
1695   7                              }
1696   6                          }
1697   5                          else
1698   5                          {
1699   6                              //WNCKR = 0x00;       // Delay 15.26 us
1700   6                          }
1701   5      
1702   5                          //
1703   5                          // Delay 15.26 us
1704   5                          //
1705   5                          WNCKR = 0x00;
1706   5                      }
1707   4                  }
1708   3                  //WNCKR = 0x00;               // Delay 15.26 us
1709   3                  //WNCKR = 0x00;               // Delay 15.26 us
1710   3                  //WNCKR = 0x00;               // Delay 15.26 us
1711   3                  //WNCKR = 0x00;               // Delay 15.26 us
1712   3                  //WNCKR = 0x00;               // Delay 15.26 us
1713   3                  //WNCKR = 0x00;               // Delay 15.26 us
1714   3                  //WNCKR = 0x00;               // Delay 15.26 us
1715   3                  *asPS2Struct[channel].ps2ctrl=PS2_InhibitMode;
1716   3                  PS2IFAck=*asPS2Struct[channel].ps2data;
1717   3                  result = 0x00;
1718   3      
1719   3                  *asPS2Struct[channel].ps2isr = asPS2Struct[channel].ctrlbit; //G79:Update PS2 code base.
1720   3                  break;
1721   3              }
1722   2              }while(!TF1);                                   // waitting for overflow flag
1723   1      
1724   1          TR1 = 0;                                // disable timer1
1725   1          TF1 = 0;                                            // clear overflow flag
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 29  

1726   1          ET1 = 1;
1727   1              return(result);
1728   1      }
1729          
1730          //----------------------------------------------------------------------------
1731          // The function of setting external keyboard device
1732          //----------------------------------------------------------------------------
1733          const BYTE code ConfigAUXKB[] = {0xF3, 0xED, 0xF4 };    // Command table
1734          
1735          void ConfigExtKeyboard(BYTE portnum)
1736          {
1737   1              BYTE index;
1738   1      
1739   1          for(index=0x00; index<sizeof(ConfigAUXKB); index++)
1740   1          {
1741   2              if(!Send2PortNWait(portnum,ConfigAUXKB[index],1))
1742   2              {
1743   3                  if(ConfigAUXKB[index]==0xF3)
1744   3                  {
1745   4                      Send2PortNWait(portnum,Save_Typematic,1);
1746   4                  }
1747   3                  else if(ConfigAUXKB[index]==0xED)
1748   3                  {
1749   4                      Send2PortNWait(portnum,(Led_Data&0x07),1);
1750   4                  }
1751   3              }
1752   2          }
1753   1      }
1754          
1755          //----------------------------------------------------------------------------
1756          // The function of setting Resolution
1757          //  return : 1 OK, 0 fail
1758          //----------------------------------------------------------------------------
1759          BYTE EnableMouse(BYTE port)
1760          {
1761   1          BYTE resault;
1762   1          if(!Send2PortNWait(port,0xF4,1))
1763   1          {
1764   2              resault = 1;
1765   2          }
1766   1          else
1767   1          {
1768   2              resault = 0;
1769   2          }
1770   1          return(resault);
1771   1      }
1772          
1773          //----------------------------------------------------------------------------
1774          // The function of setting Resolution
1775          //  return : 1 OK, 0 fail
1776          //----------------------------------------------------------------------------
1777          BYTE SetResolution(BYTE port, BYTE resolution)
1778          {
1779   1          BYTE resault;
1780   1          if(!Send2PortNWait(port,0xE8,1))
1781   1          {
1782   2              if(!Send2PortNWait(port,resolution,1))
1783   2              {
1784   3                  resault = 1;
1785   3              }
1786   2              else
1787   2              {
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 30  

1788   3                  resault = 0;
1789   3              }
1790   2          }
1791   1          else
1792   1          {
1793   2              resault = 0;
1794   2          }
1795   1          return(resault);
1796   1      }
1797          
1798          //----------------------------------------------------------------------------
1799          // The function of setting samplerate
1800          //  return : 1 OK, 0 fail
1801          //----------------------------------------------------------------------------
1802          BYTE Setsamplerate(BYTE port, BYTE samplerate)
1803          {
1804   1          BYTE resault;
1805   1          if(!Send2PortNWait(port,0xF3,1))
1806   1          {
1807   2              if(!Send2PortNWait(port,samplerate,1))
1808   2              {
1809   3                  resault = 1;
1810   3              }
1811   2              else
1812   2              {
1813   3                  resault = 0;
1814   3              }
1815   2          }
1816   1          else
1817   1          {
1818   2              resault = 0;
1819   2          }
1820   1          return(resault);
1821   1      }
1822          
1823          //----------------------------------------------------------------------------
1824          // The Microsoft Intellimouse
1825          //----------------------------------------------------------------------------
1826          const BYTE code Intellimouse_5Byte[3] =
1827          {
1828              200,    200,    80
1829          };
1830          
1831          const BYTE code Intellimouse_4Byte[3] =
1832          {
1833              200,    100,    80
1834          };
1835          
1836          BYTE SetIntellimouse(BYTE DriverType, BYTE port)
1837          {
1838   1          BYTE index;
1839   1          BYTE result;
1840   1          result = 0x01;   // pr-set OK
1841   1      
1842   1          if(DriverType==3)
1843   1          {
1844   2              for(index=0x00;index<sizeof(Intellimouse_4Byte);index++)
1845   2              {
1846   3                  if(Setsamplerate(port, Intellimouse_4Byte[index])==0x00)
1847   3                  {
1848   4                      result = 0x00;
1849   4                      break;
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 31  

1850   4                  }
1851   3              }
1852   2          }
1853   1          else if(DriverType==4)
1854   1          {
1855   2              for(index=0x00;index<sizeof(Intellimouse_5Byte);index++)
1856   2              {
1857   3                  if(Setsamplerate(port, Intellimouse_5Byte[index])==0x00)
1858   3                  {
1859   4                      result = 0x00;
1860   4                      break;
1861   4                  }
1862   3              }
1863   2          }
1864   1          return(result);
1865   1      }
1866          
1867          BYTE ReadMouseID(BYTE port)
1868          {
1869   1          if(Send2PortNWait(port,0xF2,2)==0x00)
1870   1          {
1871   2              return(PS2IFAck);
1872   2          }
1873   1          return(0xFF);
1874   1      }
1875          
1876          //----------------------------------------------------------------------------
1877          // The function of setting external mouse device
1878          //----------------------------------------------------------------------------
1879          BYTE ConfigExtMouse(BYTE portnum)
1880          {
1881   1          BYTE result;
1882   1          result = 0x00;
1883   1      
1884   1          if(SetResolution(portnum,TPResolution))
1885   1          {
1886   2              if(EnableMouse(portnum))
1887   2              {
1888   3                  result = 0x01;
1889   3              }
1890   2          }
1891   1          return(result);
1892   1      }
1893          
1894          //----------------------------------------------------------------------------
1895          // The function of checking AUX Multiplexed modes
1896          //----------------------------------------------------------------------------
1897          BYTE CheckAuxMux(void)
1898          {
1899   1              BYTE current,data_byte,index;
1900   1              current = 1;
1901   1              if (KBHIData == 0xF0)                   // Data from Host is F0h
1902   1              {
1903   2              MULPX_Mx_state2 = 1;
1904   2              MULPX_Mx_state3 = 0;
1905   2              current = 0;                            // Do NOT clear State2 and State3
1906   2              data_byte = 0xF0;
1907   2              }
1908   1              else if (KBHIData == 0x56)              // Data from Host is 56h
1909   1              {
1910   2              if (MULPX_Mx_state2)            // Current is State2
1911   2                      {
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 32  

1912   3                      MULPX_Mx_state2 = 0;
1913   3                      MULPX_Mx_state3 = 1;
1914   3                      current = 0;
1915   3                              data_byte = 0x56;
1916   3              }
1917   2              }
1918   1              else if (KBHIData == 0xA4)              // Data from Host is A4h
1919   1              {
1920   2                      if (MULPX_Mx_state3)            // Current is State3
1921   2                      {
1922   3                      MULPX_Multiplex = 1;    // Enable Activate Multiplex mode
1923   3                      data_byte = 0x11;               // Return Version number
1924   3              }
1925   2              }
1926   1              else if (KBHIData == 0xA5)              // Data from Host is A5h.
1927   1              {
1928   2                      if (MULPX_Mx_state3)            // Current is State3
1929   2                      {
1930   3                      MULPX_Multiplex = 0;    // Reveret to Legacy Mode
1931   3                      data_byte = 0x11;       // Return version number
1932   3              }
1933   2              }
1934   1          else
1935   1          {
1936   2              data_byte = KBHIData;
1937   2          }
1938   1      
1939   1              if (current)
1940   1              {
1941   2              MULPX_Mx_state2 = 0;            // Clear State2 and State3
1942   2                      MULPX_Mx_state3 = 0;
1943   2              }
1944   1              return(data_byte);
1945   1      }
1946          
1947          // ----------------------------------------------------------------------------
1948          // The function of disable ps2 channel x
1949          // Input :  portnum --> ps2 channel
1950          //          active  --> 1 : On, 0 : Off
1951          //
1952          //  Note : If want to enable mouse device. Please ensrue "MouseDriverIn" is set.
1953          // ----------------------------------------------------------------------------
1954          void OnOffPS2Channel_X(BYTE portnum, BYTE active)
1955          {
1956   1          if(portnum==0x00)
1957   1          {
1958   2              if((PS2_Port0_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port0_Data_CtrlReg&0xFB)!=0x00)
1959   2              {
1960   3                  return;// If this channel isn't PS2 ALT function. return;
1961   3              }
1962   2          }
1963   1          else if(portnum==0x01)
1964   1          {
1965   2                  if((PS2_Port1_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port1_Data_CtrlReg&0xFB)!=0x00)
1966   2              {
1967   3                  return;// If this channel isn't PS2 ALT function. return;
1968   3              }
1969   2          }
1970   1          else if(portnum==0x02)
1971   1          {
1972   2                  if((PS2_Port2_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port2_Data_CtrlReg&0xFB)!=0x00)
1973   2              {
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 33  

1974   3                  return;// If this channel isn't PS2 ALT function. return;
1975   3              }
1976   2          }
1977   1      
1978   1          if(IS_MASK_SET(AuxFlags[portnum], DEVICE_IS_MOUSE))
1979   1          {
1980   2              if(MouseDriverIn)
1981   2              {
1982   3                  if(active == 0x00)
1983   3                  {
1984   4                      SET_MASK(AuxFlags2[portnum], DEVICE_NEED_DISABLED);
1985   4                  }
1986   3                  else if(active == 0x01)
1987   3                  {
1988   4                      SET_MASK(AuxFlags2[portnum], DEVICE_NEED_ENABLED);
1989   4                  }
1990   3                  PS2_ReTryCunt = 0x00;
1991   3              }
1992   2          }
1993   1          else
1994   1          {
1995   2              if(KeyboardDriverIn)
1996   2              {
1997   3                  if(active == 0x00)
1998   3                  {
1999   4                      SET_MASK(AuxFlags2[portnum], DEVICE_NEED_DISABLED);
2000   4                  }
2001   3                  else if(active == 0x01)
2002   3                  {
2003   4                      SET_MASK(AuxFlags2[portnum], DEVICE_NEED_ENABLED);
2004   4                  }
2005   3                  PS2_ReTryCunt = 0x00;
2006   3              }
2007   2          }
2008   1      }
2009          
2010          // ----------------------------------------------------------------------------
2011          //
2012          // ----------------------------------------------------------------------------
2013          void KBCmdAckByteCunt(BYTE ackcunt)
2014          {
2015   1          Main_KB_ACK_CUNT = ackcunt;
2016   1      }
2017          
2018          // ----------------------------------------------------------------------------
2019          //
2020          // ----------------------------------------------------------------------------
2021          void SetOtherKBNeedUpdataFlag(BYTE KBCmd)
2022          {
2023   1          BYTE index;
2024   1      
2025   1          for(index=0x00;index<3;index++)
2026   1          {
2027   2              if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_KEYBOARD))
2028   2              {
2029   3                  if(Main_KB_CHN != (index+1))
2030   3                  {
2031   4                      if(IS_MASK_CLEAR(AuxFlags[index], DEVICE_NEED_CONFIG))
2032   4                      {
2033   5                          if(KBCmd==0xED)
2034   5                          {
2035   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xED;
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 34  

2036   6                          }
2037   5                          else if(KBCmd==0xF3)
2038   5                          {
2039   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xF3;
2040   6                          }
2041   5                          else if(KBCmd==0xF4)
2042   5                          {
2043   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xF4;
2044   6                          }
2045   5                          else if(KBCmd==0xF5)
2046   5                          {
2047   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xF5;
2048   6                          }
2049   5                      }
2050   4                  }
2051   3              }
2052   2          }
2053   1      }
2054          
2055          // ----------------------------------------------------------------------------
2056          //
2057          // ----------------------------------------------------------------------------
2058          void SetStartScanAUXFlag(void)
2059          {
2060   1          StartENAUXDevice = 1;
2061   1      }
2062          
2063          // ----------------------------------------------------------------------------
2064          //
2065          // ----------------------------------------------------------------------------
2066          void AUXData_To_Host_nWait(BYTE data_byte, BYTE portnum)
2067          {
2068   1          if(portnum!=0xFF)
2069   1          {
2070   2              AUXPortNum = portnum;
2071   2          }
2072   1          SendFromAux(data_byte);
2073   1      
2074   1          TR1 = 0;                    // Disable timer1
2075   1          ET1 = 0;                    // Disable timer1 interrupt
2076   1          _nop_();
2077   1          _nop_();
2078   1          _nop_();
2079   1          _nop_();
2080   1          TH1 = Timer_26ms>>8;        // Set timer1 counter 26ms
2081   1          TL1 = Timer_26ms;           // Set timer1 counter 26ms
2082   1          TF1 = 0;                    // Clear overflow flag
2083   1          TR1 = 1;                    // Enable timer1
2084   1      
2085   1              while (!TF1)
2086   1              {
2087   2                  if(IS_MASK_CLEAR(KBHISR, OBF))
2088   2              {
2089   3                  break;
2090   3              }
2091   2              if(IS_MASK_SET(KBHISR, IBF))
2092   2              {
2093   3                  break;
2094   3              }
2095   2              }
2096   1      
2097   1          TR1 = 0;                    // Disable timer 1
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 35  

2098   1          TF1 = 0;                            // clear overflow flag
2099   1          ET1 = 1;                            // Enable timer1 interrupt
2100   1      }
2101          
2102          // ----------------------------------------------------------------------------
2103          //
2104          // ----------------------------------------------------------------------------
2105          void ReSendPS2PendingData(void)
2106          {
2107   1          if(MSPending==0x33)
2108   1          {
2109   2              F_Service_Send_PS2 = 1;
2110   2          }
2111   1      }
2112          
2113          // ----------------------------------------------------------------------------
2114          //
2115          // ----------------------------------------------------------------------------
2116          void CheckNSetMainKBCHN(BYTE PortNum)
2117          {
2118   1          if(Main_KB_CHN == 0x00)
2119   1          {
2120   2              SET_MASK(AuxFlags[PortNum], DEVICE_IS_MAIN_KB);
2121   2              Main_KB_CHN = PortNum+1;
2122   2          }
2123   1      }
2124          
2125          // ----------------------------------------------------------------------------
2126          //
2127          // ----------------------------------------------------------------------------
2128          void CheckNSetMainMSCHN(BYTE PortNum)
2129          {
2130   1          if(Main_MOUSE_CHN == 0x00)
2131   1          {
2132   2              SET_MASK(AuxFlags[PortNum], DEVICE_IS_MAIN_MOUSE);
2133   2              Main_MOUSE_CHN = PortNum+1;
2134   2          }
2135   1      }
2136          
2137          // ----------------------------------------------------------------------------
2138          //
2139          // ----------------------------------------------------------------------------
2140          void ResetMSPendingData(void)
2141          {
2142   1          MSPending = 0x88;
2143   1          F_Service_Send_PS2 = 0;
2144   1      }
2145          
2146          //----------------------------------------------------------------------------
2147          // PS2 interface enable/disable OEM function call
2148          //----------------------------------------------------------------------------
2149          // ----------------------------------------------------------------------------
2150          // Disable port 0 ( send 0xF5 command to device)
2151          // ----------------------------------------------------------------------------
2152          void DisablePS2Port_0(void)
2153          {
2154   1          OnOffPS2Channel_X(0,0);
2155   1      }
2156          
2157          // ----------------------------------------------------------------------------
2158          // Disable port 1 ( send 0xF5 command to device)
2159          // ----------------------------------------------------------------------------
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 36  

2160          void DisablePS2Port_1(void)
2161          {
2162   1          OnOffPS2Channel_X(1,0);
2163   1      }
2164          
2165          // ----------------------------------------------------------------------------
2166          // Disable port 2 ( send 0xF5 command to device)
2167          // ----------------------------------------------------------------------------
2168          void DisablePS2Port_2(void)
2169          {
2170   1          OnOffPS2Channel_X(2,0);
2171   1      }
2172          
2173          // ----------------------------------------------------------------------------
2174          // Enable port 0 ( send 0xF4 command to device)
2175          // ----------------------------------------------------------------------------
2176          void EnablePS2Port_0(void)
2177          {
2178   1          OnOffPS2Channel_X(0,1);
2179   1      }
2180          
2181          // ----------------------------------------------------------------------------
2182          // Enable port 1 ( send 0xF4 command to device)
2183          // ----------------------------------------------------------------------------
2184          void EnablePS2Port_1(void)
2185          {
2186   1          OnOffPS2Channel_X(1,1);
2187   1      }
2188          
2189          // ----------------------------------------------------------------------------
2190          // Enable port 2 ( send 0xF4 command to device)
2191          // ----------------------------------------------------------------------------
2192          void EnablePS2Port_2(void)
2193          {
2194   1          OnOffPS2Channel_X(2,1);
2195   1      }
2196          
2197          // ----------------------------------------------------------------------------
2198          // Power off clock and data pins of all supported channel
2199          // ----------------------------------------------------------------------------
2200          void PS2_PowerOff(void)
2201          {
2202   1          BYTE index;
2203   1          ResetMSPendingData();
2204   1          ClaerPS2IFPendingEvent();
2205   1      
2206   1          ClearAUXScanTimeOutCunt();
2207   1          SetAUXScanIndexHS(AUXScanIndexFree);
2208   1          PS2_ReTryCunt = 0x00;
2209   1          SendtoAUXFlag = 0;
2210   1          ECSendtoAUXFlag = 0;
2211   1          AUXInactiveCounter = 0;
2212   1          StartENAUXDevice = 0;
2213   1      
2214   1          for(index=0x00;index<3;index++)
2215   1          {
2216   2              AuxFlags[index] = 0x00;
2217   2              AuxFlags2[index] = 0x00;
2218   2          }
2219   1      
2220   1          if((PS2_Port0_CLK_CtrlReg&0xFB)==0x00 && (PS2_Port0_Data_CtrlReg&0xFB)==0x00)
2221   1          {
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 37  

2222   2              PS2_Port0_CLK_CtrlReg = OUTPUT+PULL_DW;
2223   2              PS2_Port0_Data_CtrlReg = OUTPUT+PULL_DW;
2224   2              SET_MASK(AuxFlags2[0], DEVICE_POWER_DOWN);
2225   2          }
2226   1      
2227   1          if((PS2_Port1_CLK_CtrlReg&0xFB)==0x00 && (PS2_Port1_Data_CtrlReg&0xFB)==0x00)
2228   1          {
2229   2              PS2_Port1_CLK_CtrlReg = OUTPUT+PULL_DW;
2230   2              PS2_Port1_Data_CtrlReg = OUTPUT+PULL_DW;
2231   2              SET_MASK(AuxFlags2[1], DEVICE_POWER_DOWN);
2232   2          }
2233   1      
2234   1          if((PS2_Port2_CLK_CtrlReg&0xFB)==0x00 && (PS2_Port2_Data_CtrlReg&0xFB)==0x00)
2235   1          {
2236   2              PS2_Port2_CLK_CtrlReg = OUTPUT+PULL_DW;
2237   2              PS2_Port2_Data_CtrlReg = OUTPUT+PULL_DW;
2238   2              SET_MASK(AuxFlags2[2], DEVICE_POWER_DOWN);
2239   2          }
2240   1      }
2241          
2242          // ----------------------------------------------------------------------------
2243          // Power on clock and data pins of all supported channel
2244          // ----------------------------------------------------------------------------
2245          void PS2_PowerOn(void)
2246          {
2247   1          PS2DeviceInactive();
2248   1          if(IS_MASK_SET(AuxFlags2[0], DEVICE_POWER_DOWN))
2249   1          {
2250   2              CLEAR_MASK(AuxFlags2[0], DEVICE_POWER_DOWN);
2251   2              PS2_Port0_CLK_CtrlReg = ALT;
2252   2              PS2_Port0_Data_CtrlReg = ALT;
2253   2          }
2254   1      
2255   1          if(IS_MASK_SET(AuxFlags2[1], DEVICE_POWER_DOWN))
2256   1          {
2257   2              CLEAR_MASK(AuxFlags2[1], DEVICE_POWER_DOWN);
2258   2              PS2_Port1_CLK_CtrlReg = ALT;
2259   2              PS2_Port1_Data_CtrlReg = ALT;
2260   2          }
2261   1      
2262   1          if(IS_MASK_SET(AuxFlags2[2], DEVICE_POWER_DOWN))
2263   1          {
2264   2              CLEAR_MASK(AuxFlags2[2], DEVICE_POWER_DOWN);
2265   2              PS2_Port2_CLK_CtrlReg = ALT;
2266   2              PS2_Port2_Data_CtrlReg = ALT;
2267   2          }
2268   1      }
2269          
2270          // ----------------------------------------------------------------------------
2271          // Power on clock and data pins of all supported channel
2272          // ----------------------------------------------------------------------------
2273          void PowerOffClearTPPendingData(void)
2274          {
2275   1          ResetMSPendingData();
2276   1          ClaerPS2IFPendingEvent();
2277   1      }
2278          
2279          void SetPS2CmdACKCounter(BYTE ackcunt)
2280          {
2281   1          TPACKCounter = ackcunt;
2282   1      }
2283          
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 38  

2284          // ----------------------------------------------------------------------------
2285          // Wait ECSend2Port transaction done
2286          // ----------------------------------------------------------------------------
2287          BYTE WaitECSend2PortACK(BYTE PortNum)
2288          {
2289   1          BYTE timeout;
2290   1          BYTE channel;
2291   1      
2292   1          timeout = 0x00;
2293   1          if(AuxFlags[PortNum] == 0x00)
2294   1          {
2295   2              return(timeout);
2296   2          }
2297   1      
2298   1          TR1 = 0;                    // Disable timer 1
2299   1          ET1 = 0;                            // Disable timer1 interrupt
2300   1          _nop_();
2301   1          _nop_();
2302   1          _nop_();
2303   1          _nop_();
2304   1          TH1 = Timer_85ms>>8;        // set timer1 counter 85 ms
2305   1          TL1 = Timer_85ms;           // set timer1 counter 85 ms
2306   1          TF1 = 0;                            // clear overflow flag
2307   1          TR1 = 1;                            // enable timer1
2308   1      
2309   1          while(!TF1)                 // waitting for overflow flag
2310   1          {                           // Wait PS2 transaction Done Status
2311   2                  if(F_Service_PS2)
2312   2                  {
2313   3                          if(SendtoAUXFlag)   // Send command to device and transmit done.
2314   3                          {
2315   4                                  F_Service_PS2 = 0;  // Clear main service flag
2316   4                                  SendtoAUXFlag = 0;
2317   4                      PS2_IRQ_Channel = 0xFF; // Clear PS2 2 service flag
2318   4                                  *asPS2Struct[PortNum].ps2ctrl=PS2_ReceiveMode;  // Enable Receive mode for ACK byte
2319   4                                  SET_MASK(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);  // Enable interrupt for ACK 
             -byte
2320   4                                  ClearAUXScanTimeOutCunt();
2321   4                          }
2322   3                          else
2323   3                          {
2324   4                      channel = PS2_IRQ_Channel;
2325   4                      F_Service_PS2 = 0;      // Clear main service flag
2326   4                      ECSendtoAUXFlag = 0;
2327   4                      PS2_IRQ_Channel = 0xFF; // Clear PS2 2 service flag
2328   4                      ProcessECTestAUXACK(channel, 0);
2329   4                      TR1 = 0;                    // Disable timer 1
2330   4                      TF1 = 0;                                // clear overflow flag
2331   4                      break;
2332   4                          }
2333   3                  }
2334   2          }
2335   1      
2336   1          if(TF1)
2337   1          {
2338   2              timeout = 0x01;
2339   2          }
2340   1      
2341   1          TR1 = 0;                    // Disable timer 1
2342   1          TF1 = 0;                            // clear overflow flag
2343   1          ET1 = 1;                            // Enable timer1 interrupt
2344   1          return(timeout);
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 39  

2345   1      }
2346          
2347          
2348          // ----------------------------------------------------------------------------
2349          // Wait Send2Port transaction done
2350          // ----------------------------------------------------------------------------
2351          void WaitPS2DeviceACK(BYTE PortNum)
2352          {
2353   1          TR1 = 0;                    // Disable timer 1
2354   1          ET1 = 0;                            // Disable timer1 interrupt
2355   1          _nop_();
2356   1          _nop_();
2357   1          _nop_();
2358   1          _nop_();
2359   1          TH1 = Timer_40ms>>8;        // set timer1 counter 40 ms
2360   1          TL1 = Timer_40ms;           // set timer1 counter 40 ms
2361   1          TF1 = 0;                            // clear overflow flag
2362   1          TR1 = 1;                            // enable timer1
2363   1      
2364   1          while(!TF1)                 // waitting for overflow flag
2365   1          {                           // Wait PS2 transaction Done Status
2366   2                  if(F_Service_PS2)
2367   2                  {
2368   3                          if(SendtoAUXFlag)   // Send command to device and transmit done.
2369   3                          {
2370   4                                  F_Service_PS2 = 0;  // Clear main service flag
2371   4                                  SendtoAUXFlag = 0;
2372   4                      PS2_IRQ_Channel = 0xFF; // Clear PS2 2 service flag
2373   4                                  *asPS2Struct[PortNum].ps2ctrl=PS2_ReceiveMode;  // Enable Receive mode for ACK byte
2374   4                                  SET_MASK(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);  // Enable interrupt for ACK 
             -byte
2375   4                                  ClearAUXScanTimeOutCunt();
2376   4                          }
2377   3                          else
2378   3                          {
2379   4                      break;          // Receive transmit done.
2380   4                          }
2381   3                  }
2382   2          }
2383   1      
2384   1          TR1 = 0;                    // Disable timer 1
2385   1          TF1 = 0;                            // clear overflow flag
2386   1          ET1 = 1;                            // Enable timer1 interrupt
2387   1      }
2388          
2389          // ----------------------------------------------------------------------------
2390          //  Return :
2391          //          1 : PS2 TDS pending
2392          //          0 : No PS2 TDS pending
2393          // ----------------------------------------------------------------------------
2394          BYTE PS2CheckPendingISR(void)
2395          {
2396   1          BYTE pending;
2397   1          pending = 0x00;         // Pre-clear pending flag.
2398   1      
2399   1          if(IS_MASK_SET(PSSTS3, TDS))
2400   1          {
2401   2              if(IS_MASK_SET(IER2,Int_PS2_2)&&IS_MASK_CLEAR(ISR2,Int_PS2_2)&&(PSCTL3==PS2_ReceiveMode))
2402   2              {
2403   3                  IRQ_INT18_PS2Interrupt2();
2404   3                  pending=0x01;
2405   3              }
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 40  

2406   2          }
2407   1          else if(IS_MASK_SET(PSSTS2, TDS))
2408   1          {
2409   2              if(IS_MASK_SET(IER2,Int_PS2_1)&&IS_MASK_CLEAR(ISR2,Int_PS2_1)&&(PSCTL2==PS2_ReceiveMode))
2410   2              {
2411   3                  IRQ_INT19_PS2Interrupt1();
2412   3                  pending=0x01;
2413   3              }
2414   2          }
2415   1          else if(IS_MASK_SET(PSSTS1, TDS))
2416   1          {
2417   2              if(IS_MASK_SET(IER2,Int_PS2_0)&&IS_MASK_CLEAR(ISR2,Int_PS2_0)&&(PSCTL1==PS2_ReceiveMode))
2418   2              {
2419   3                  IRQ_INT20_PS2Interrupt0();
2420   3                  pending=0x01;
2421   3              }
2422   2          }
2423   1      
2424   1          return(pending);
2425   1      }
2426          
2427          // ----------------------------------------------------------------------------
2428          //
2429          // ----------------------------------------------------------------------------
2430          void SetAUXScanIndexHS(BYTE status)
2431          {
2432   1          AUX_SCAN_INDEX_HS = status;
2433   1      }
2434          
2435          // ----------------------------------------------------------------------------
2436          //
2437          // ----------------------------------------------------------------------------
2438          void ClearAUXScanTimeOutCunt(void)
2439          {
2440   1          AUX_SCAN_TIMEOUT_CUNT = 0x00;
2441   1      }
2442          
2443          /*-----------------------------------------------------------------------------
2444           * End
2445           *---------------------------------------------------------------------------*/
2446          
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 41  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0257 (BEGIN)
0000         L?0600:
0000         L?0601:
0000 E0                MOVX    A,@DPTR
0001 FF                MOV     R7,A
0002         L?0602:
0002 75F00D            MOV     B,#0DH
0005 A4                MUL     AB
0006 2400        R     ADD     A,#LOW asPS2Struct
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH asPS2Struct
000D F583              MOV     DPH,A
000F E4                CLR     A
0010 93                MOVC    A,@A+DPTR
0011 FC                MOV     R4,A
0012 7401              MOV     A,#01H
0014 93                MOVC    A,@A+DPTR
0015 F582              MOV     DPL,A
0017 8C83              MOV     DPH,R4
0019 7417              MOV     A,#017H
001B F0                MOVX    @DPTR,A
001C EF                MOV     A,R7
001D         L?0603:
001D 75F00D            MOV     B,#0DH
0020 A4                MUL     AB
0021 2400        R     ADD     A,#LOW asPS2Struct+08H
0023 F582              MOV     DPL,A
0025 E4                CLR     A
0026 3400        R     ADDC    A,#HIGH asPS2Struct+08H
0028 F583              MOV     DPH,A
002A E4                CLR     A
002B 93                MOVC    A,@A+DPTR
002C 22                RET     
002D         L?0604:
002D         L?0605:
002D 900000      R     MOV     DPTR,#PortNum
0030         L?0606:
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032         L?0607:
0032 75F00D            MOV     B,#0DH
0035 A4                MUL     AB
0036 2400        R     ADD     A,#LOW asPS2Struct
0038 F582              MOV     DPL,A
003A E4                CLR     A
003B 3400        R     ADDC    A,#HIGH asPS2Struct
003D F583              MOV     DPH,A
003F E4                CLR     A
0040 93                MOVC    A,@A+DPTR
0041 22                RET     
0042         L?0608:
0042         L?0609:
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044         L?0610:
0044 EF                MOV     A,R7
0045         L?0611:
0045 75F00D            MOV     B,#0DH
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 42  

0048 A4                MUL     AB
0049 2400        R     ADD     A,#LOW asPS2Struct+0CH
004B F582              MOV     DPL,A
004D E4                CLR     A
004E 3400        R     ADDC    A,#HIGH asPS2Struct+0CH
0050 F583              MOV     DPH,A
0052 E4                CLR     A
0053 93                MOVC    A,@A+DPTR
0054 22                RET     
0055         L?0612:
0055 E4                CLR     A
0056 F6                MOV     @R0,A
0057         L?0613:
0057 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0059 E6                MOV     A,@R0
005A 2400        E     ADD     A,#LOW AuxFlags2
005C         L?0614:
005C F8                MOV     R0,A
005D E4                CLR     A
005E         L?0615:
005E F6                MOV     @R0,A
005F         L?0616:
005F 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0061 E6                MOV     A,@R0
0062 2400        E     ADD     A,#LOW AuxFlags2
0064 F8                MOV     R0,A
0065 22                RET     
0066         L?0617:
0066         L?0618:
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 EF                MOV     A,R7
0069 75F00D            MOV     B,#0DH
006C A4                MUL     AB
006D 2400        R     ADD     A,#LOW asPS2Struct+06H
006F F582              MOV     DPL,A
0071 E4                CLR     A
0072 3400        R     ADDC    A,#HIGH asPS2Struct+06H
0074 F583              MOV     DPH,A
0076 E4                CLR     A
0077 93                MOVC    A,@A+DPTR
0078 FA                MOV     R2,A
0079 7401              MOV     A,#01H
007B 93                MOVC    A,@A+DPTR
007C F582              MOV     DPL,A
007E 8A83              MOV     DPH,R2
0080 EE                MOV     A,R6
0081 F0                MOVX    @DPTR,A
0082 8D82              MOV     DPL,R5
0084 8C83              MOV     DPH,R4
0086 741C              MOV     A,#01CH
0088 F0                MOVX    @DPTR,A
0089 22                RET     
008A         L?0619:
008A F583              MOV     DPH,A
008C E4                CLR     A
008D 93                MOVC    A,@A+DPTR
008E         L?0620:
008E FC                MOV     R4,A
008F 7401              MOV     A,#01H
0091 93                MOVC    A,@A+DPTR
0092 F582              MOV     DPL,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 43  

0094 8C83              MOV     DPH,R4
0096 22                RET     
0097         L?0621:
0097         L?0622:
0097 FE                MOV     R6,A
0098 7401              MOV     A,#01H
009A 93                MOVC    A,@A+DPTR
009B F582              MOV     DPL,A
009D 8E83              MOV     DPH,R6
009F 22                RET     
00A0         L?0623:
00A0 FE                MOV     R6,A
00A1 7401              MOV     A,#01H
00A3 93                MOVC    A,@A+DPTR
00A4 F582              MOV     DPL,A
00A6 8E83              MOV     DPH,R6
00A8         L?0624:
00A8 7411              MOV     A,#011H
00AA         L?0625:
00AA F0                MOVX    @DPTR,A
00AB 900000      E     MOV     DPTR,#ISR2
00AE 741C              MOV     A,#01CH
00B0 F0                MOVX    @DPTR,A
00B1 22                RET     
00B2         L?0626:
00B2         L?0627:
00B2 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00B4 E6                MOV     A,@R0
00B5 2400        E     ADD     A,#LOW AuxFlags
00B7 F8                MOV     R0,A
00B8 22                RET     
00B9         L?0628:
00B9         L?0629:
00B9 FC                MOV     R4,A
00BA 7401              MOV     A,#01H
00BC 93                MOVC    A,@A+DPTR
00BD FD                MOV     R5,A
00BE F582              MOV     DPL,A
00C0 8C83              MOV     DPH,R4
00C2 741D              MOV     A,#01DH
00C4 F0                MOVX    @DPTR,A
00C5 22                RET     
00C6         L?0632:
00C6         L?0633:
00C6 C28E              CLR     TR1
00C8 C28F              CLR     TF1
00CA D2AB              SETB    ET1
00CC 22                RET     
00CD         L?0634:
00CD 900000      R     MOV     DPTR,#timeout
00D0         L?0635:
00D0 E0                MOVX    A,@DPTR
00D1 04                INC     A
00D2 F0                MOVX    @DPTR,A
00D3 E0                MOVX    A,@DPTR
00D4 D3                SETB    C
00D5 9411              SUBB    A,#011H
00D7 22                RET     
00D8         L?0636:
00D8 FE                MOV     R6,A
00D9 7401              MOV     A,#01H
00DB 93                MOVC    A,@A+DPTR
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 44  

00DC F582              MOV     DPL,A
00DE 8E83              MOV     DPH,R6
00E0 7417              MOV     A,#017H
00E2 F0                MOVX    @DPTR,A
00E3 E4                CLR     A
00E4 900000      R     MOV     DPTR,#timeout
00E7 F0                MOVX    @DPTR,A
00E8 22                RET     
00E9         L?0637:
00E9 900000      R     MOV     DPTR,#PortNum
00EC         L?0638:
00EC E0                MOVX    A,@DPTR
00ED FF                MOV     R7,A
00EE 7B02              MOV     R3,#02H
00F0 AD00        E     MOV     R5,KBHIData
00F2 22                RET     
00F3         L?0639:
00F3 900000      R     MOV     DPTR,#channel
00F6 E0                MOVX    A,@DPTR
00F7 FF                MOV     R7,A
00F8 7800        E     MOV     R0,#LOW AUXPortNum
00FA F6                MOV     @R0,A
00FB 7400        E     MOV     A,#LOW PS2PortxData
00FD 2F                ADD     A,R7
00FE F8                MOV     R0,A
00FF E6                MOV     A,@R0
0100 22                RET     
0101         L?0640:
0101         L?0641:
0101 900000      R     MOV     DPTR,#index
0104 E0                MOVX    A,@DPTR
0105 FF                MOV     R7,A
0106 2400        E     ADD     A,#LOW AuxFlags2
0108 F8                MOV     R0,A
0109 22                RET     
010A         L?0642:
010A 900000      R     MOV     DPTR,#PortNum
010D         L?0643:
010D E0                MOVX    A,@DPTR
010E FF                MOV     R7,A
010F 2400        E     ADD     A,#LOW AuxFlags
0111 F8                MOV     R0,A
0112 E6                MOV     A,@R0
0113 22                RET     
0114         L?0644:
0114         L?0645:
0114 900000      E     MOV     DPTR,#GPCRF0
0117 E0                MOVX    A,@DPTR
0118 54FB              ANL     A,#0FBH
011A 22                RET     
011B         L?0646:
011B         L?0647:
011B 900000      E     MOV     DPTR,#GPCRF1
011E E0                MOVX    A,@DPTR
011F 54FB              ANL     A,#0FBH
0121 22                RET     
0122         L?0648:
0122         L?0649:
0122 900000      E     MOV     DPTR,#GPCRF2
0125 E0                MOVX    A,@DPTR
0126 54FB              ANL     A,#0FBH
0128 22                RET     
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 45  

0129         L?0650:
0129         L?0651:
0129 900000      E     MOV     DPTR,#GPCRF3
012C E0                MOVX    A,@DPTR
012D 54FB              ANL     A,#0FBH
012F 22                RET     
0130         L?0652:
0130         L?0653:
0130 900000      E     MOV     DPTR,#GPCRF4
0133 E0                MOVX    A,@DPTR
0134 54FB              ANL     A,#0FBH
0136 22                RET     
0137         L?0654:
0137         L?0655:
0137 900000      E     MOV     DPTR,#GPCRF5
013A E0                MOVX    A,@DPTR
013B 54FB              ANL     A,#0FBH
013D 22                RET     
013E         L?0656:
013E EF                MOV     A,R7
013F 75F00D            MOV     B,#0DH
0142 A4                MUL     AB
0143 2400        R     ADD     A,#LOW asPS2Struct+0AH
0145 F582              MOV     DPL,A
0147 E4                CLR     A
0148 3400        R     ADDC    A,#HIGH asPS2Struct+0AH
014A 22                RET     
014B         L?0657:
014B 7400        E     MOV     A,#LOW AuxFlags2
014D         L?0658:
014D 2F                ADD     A,R7
014E F8                MOV     R0,A
014F 7410              MOV     A,#010H
0151 46                ORL     A,@R0
0152 F6                MOV     @R0,A
0153 22                RET     
0154         L?0660:
0154 758DA6            MOV     TH1,#0A6H
0157 758B29            MOV     TL1,#029H
015A C28F              CLR     TF1
015C D28E              SETB    TR1
015E 22                RET     
015F         L?0661:
015F F8                MOV     R0,A
0160 7420              MOV     A,#020H
0162 46                ORL     A,@R0
0163 F6                MOV     @R0,A
0164 EF                MOV     A,R7
0165 04                INC     A
0166 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
0168 F6                MOV     @R0,A
0169 22                RET     
016A         L?0663:
016A 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
016C E6                MOV     A,@R0
016D 2401              ADD     A,#01H
016F FF                MOV     R7,A
0170 E4                CLR     A
0171 33                RLC     A
0172 FE                MOV     R6,A
0173 22                RET     
0174         L?0664:
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 46  

0174         L?0665:
0174 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0176 E6                MOV     A,@R0
0177 2400        E     ADD     A,#LOW AuxFlags_KB_CMD
0179 F8                MOV     R0,A
017A 22                RET     
             ; FUNCTION Com0257 (END)

             ; FUNCTION service_PS2_data (BEGIN)
                                           ; SOURCE LINE # 26
                                           ; SOURCE LINE # 27
                                           ; SOURCE LINE # 30
0000 900000      E     MOV     DPTR,#KBHISR
0003 E0                MOVX    A,@DPTR
0004 20E011            JB      ACC.0,?C0560
0007 E0                MOVX    A,@DPTR
0008 30E102            JNB     ACC.1,?C0001
000B         ?C0002:
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 33
000B 800B              SJMP    ?C0560
                                           ; SOURCE LINE # 35
000D         ?C0001:
                                           ; SOURCE LINE # 37
000D 7800        E     MOV     R0,#LOW TPACKCounter
000F E6                MOV     A,@R0
0010 6003              JZ      ?C0004
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
0012 16                DEC     @R0
                                           ; SOURCE LINE # 40
0013 8008              SJMP    ?C0005
0015         ?C0004:
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
0015 300005      E     JNB     Ccb42_DISAB_AUX,?C0005
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
0018         ?C0560:
0018 7F06              MOV     R7,#06H
001A 020000      R     LJMP    _SetPS2InhibitTime
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
001D         ?C0005:
                                           ; SOURCE LINE # 50
001D 7800        E     MOV     R0,#LOW MousePendingBuf
001F E6                MOV     A,@R0
0020 FF                MOV     R7,A
0021 120000      R     LCALL   _SendFromAux
                                           ; SOURCE LINE # 52
0024 30000B      E     JNB     MULPX_Multiplex,?C0007
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
0027 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 55
002A 7F06              MOV     R7,#06H
002C 120000      R     LCALL   _SetPS2SkipScanTime
                                           ; SOURCE LINE # 56
002F 020000      R     LJMP    ?C0008
0032         ?C0007:
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 47  

;---- Variable 'index' assigned to Register 'R7' ----
0032 E4                CLR     A
0033 FF                MOV     R7,A
0034         ?C0009:
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
0034 7400        E     MOV     A,#LOW AuxFlags
0036 2F                ADD     A,R7
0037 F8                MOV     R0,A
0038 E6                MOV     A,@R0
0039 30E616            JNB     ACC.6,?C0011
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
003C EF                MOV     A,R7
                                           ; SOURCE LINE # 64
003D 120000      R     LCALL   L?0602
0040 120000      R     LCALL   L?0620
0043 C083              PUSH    DPH
0045 C082              PUSH    DPL
0047 120000      R     LCALL   L?0608
004A FD                MOV     R5,A
004B EE                MOV     A,R6
004C 4D                ORL     A,R5
004D D082              POP     DPL
004F D083              POP     DPH
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 66
0052         ?C0011:
0052 0F                INC     R7
0053 EF                MOV     A,R7
0054 B403DD            CJNE    A,#03H,?C0009
0057         ?C0010:
                                           ; SOURCE LINE # 67
0057 E4                CLR     A
0058 FF                MOV     R7,A
0059         ?C0013:
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
0059 7800        E     MOV     R0,#LOW AUXPortNum
005B E6                MOV     A,@R0
005C 6F                XRL     A,R7
005D 7039              JNZ     ?C0015
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 71
005F E6                MOV     A,@R0
0060 120000      R     LCALL   L?0607
0063 FC                MOV     R4,A
0064 7401              MOV     A,#01H
0066 93                MOVC    A,@A+DPTR
0067 F582              MOV     DPL,A
0069 8C83              MOV     DPH,R4
006B 7417              MOV     A,#017H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
006E E6                MOV     A,@R0
006F 120000      R     LCALL   L?0603
0072 FC                MOV     R4,A
0073 7401              MOV     A,#01H
0075 93                MOVC    A,@A+DPTR
0076 F582              MOV     DPL,A
0078 8C83              MOV     DPH,R4
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 48  

007A C083              PUSH    DPH
007C C082              PUSH    DPL
007E E0                MOVX    A,@DPTR
007F FE                MOV     R6,A
0080 E6                MOV     A,@R0
0081 75F00D            MOV     B,#0DH
0084 A4                MUL     AB
0085 2400        R     ADD     A,#LOW asPS2Struct+0CH
0087 F582              MOV     DPL,A
0089 E4                CLR     A
008A 3400        R     ADDC    A,#HIGH asPS2Struct+0CH
008C F583              MOV     DPH,A
008E E4                CLR     A
008F 93                MOVC    A,@A+DPTR
0090 FD                MOV     R5,A
0091 EE                MOV     A,R6
0092 4D                ORL     A,R5
0093 D082              POP     DPL
0095 D083              POP     DPH
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 74
0098         ?C0015:
0098 0F                INC     R7
0099 EF                MOV     A,R7
009A B403BC            CJNE    A,#03H,?C0013
009D         ?C0014:
                                           ; SOURCE LINE # 76
009D 7F06              MOV     R7,#06H
009F 120000      R     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 77
00A2         ?C0008:
                                           ; SOURCE LINE # 78
00A2 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 79
00A5         ?C0003:
00A5 22                RET     
             ; FUNCTION service_PS2_data (END)

             ; FUNCTION _SendFromAux (BEGIN)
                                           ; SOURCE LINE # 84
;---- Variable 'auxdata' assigned to Register 'R5' ----
0000 CD                XCH     A,R5
0001 EF                MOV     A,R7
0002 CD                XCH     A,R5
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
0003 900000      E     MOV     DPTR,#KBHISR
0006 E0                MOVX    A,@DPTR
0007 540F              ANL     A,#0FH
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
000A 30002B      E     JNB     MULPX_Multiplex,?C0017
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
000D 7800        E     MOV     R0,#LOW AUXPortNum
000F E6                MOV     A,@R0
0010 7005              JNZ     ?C0018
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
0012 7440              MOV     A,#040H
0014 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 49  

                                           ; SOURCE LINE # 93
0015 801A              SJMP    ?C0019
0017         ?C0018:
                                           ; SOURCE LINE # 94
0017 7800        E     MOV     R0,#LOW AUXPortNum
0019 E6                MOV     A,@R0
001A B40108            CJNE    A,#01H,?C0020
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
001D 900000      E     MOV     DPTR,#KBHISR
0020 7480              MOV     A,#080H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
0023 800C              SJMP    ?C0019
0025         ?C0020:
                                           ; SOURCE LINE # 98
0025 7800        E     MOV     R0,#LOW AUXPortNum
0027 E6                MOV     A,@R0
0028 B40206            CJNE    A,#02H,?C0019
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
002B 900000      E     MOV     DPTR,#KBHISR
002E 74C0              MOV     A,#0C0H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
0031         ?C0019:
                                           ; SOURCE LINE # 102
0031 900000      E     MOV     DPTR,#KBHISR
0034 E0                MOVX    A,@DPTR
0035 54FB              ANL     A,#0FBH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
0038         ?C0017:
                                           ; SOURCE LINE # 105
0038 900000      E     MOV     DPTR,#KBHISR
003B E0                MOVX    A,@DPTR
003C 4420              ORL     A,#020H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
003F 900000      E     MOV     DPTR,#KBHICR
0042 E0                MOVX    A,@DPTR
0043 54FC              ANL     A,#0FCH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0046 300004      E     JNB     Ccb42_INTR_AUX,?C0023
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
0049 E0                MOVX    A,@DPTR
004A 4402              ORL     A,#02H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
004D         ?C0023:
                                           ; SOURCE LINE # 112
004D 900000      E     MOV     DPTR,#KBHIMDOR
0050 ED                MOV     A,R5
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 135
0052         ?C0025:
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 50  

0052 22                RET     
             ; FUNCTION _SendFromAux (END)

             ; FUNCTION _SetPS2InhibitTime (BEGIN)
                                           ; SOURCE LINE # 140
;---- Variable 'time' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0000 7800        E     MOV     R0,#LOW AUXInactiveCounter
0002 E6                MOV     A,@R0
0003 C3                CLR     C
0004 9F                SUBB    A,R7
0005 5002              JNC     ?C0027
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
0007 EF                MOV     A,R7
0008 F6                MOV     @R0,A
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
0009         ?C0027:
0009 22                RET     
             ; FUNCTION _SetPS2InhibitTime (END)

             ; FUNCTION _SetPS2SkipScanTime (BEGIN)
                                           ; SOURCE LINE # 151
;---- Variable 'time' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
0000 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
0002 E6                MOV     A,@R0
0003 C3                CLR     C
0004 9F                SUBB    A,R7
0005 5002              JNC     ?C0029
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0007 EF                MOV     A,R7
0008 F6                MOV     @R0,A
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0009         ?C0029:
0009 22                RET     
             ; FUNCTION _SetPS2SkipScanTime (END)

             ; FUNCTION _ProcessMouseData (BEGIN)
                                           ; SOURCE LINE # 162
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 181
0005 7800        E     MOV     R0,#LOW MS_ID_CUNT
0007 E6                MOV     A,@R0
0008 6028              JZ      ?C0030
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
000A 16                DEC     @R0
000B E6                MOV     A,@R0
000C 7024              JNZ     ?C0030
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 51  

0010 2400        E     ADD     A,#LOW PS2PortxData
0012 F8                MOV     R0,A
0013 E6                MOV     A,@R0
0014 6011              JZ      ?C0033
0016 7400        E     MOV     A,#LOW PS2PortxData
0018 2F                ADD     A,R7
0019 F8                MOV     R0,A
001A E6                MOV     A,@R0
001B 6403              XRL     A,#03H
001D 6008              JZ      ?C0033
001F E0                MOVX    A,@DPTR
0020 2400        E     ADD     A,#LOW PS2PortxData
0022 F8                MOV     R0,A
0023 E6                MOV     A,@R0
0024 B4040B            CJNE    A,#04H,?C0030
0027         ?C0033:
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
0027 900000      R     MOV     DPTR,#channel
002A E0                MOVX    A,@DPTR
002B 2400        E     ADD     A,#LOW PS2PortxData
002D F8                MOV     R0,A
002E E6                MOV     A,@R0
002F 7800        E     MOV     R0,#LOW MS_DRIVER_TYPE
0031 F6                MOV     @R0,A
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
0032         ?C0030:
                                           ; SOURCE LINE # 194
0032 900000      E     MOV     DPTR,#KBHISR
0035 E0                MOVX    A,@DPTR
0036 20E007            JB      ACC.0,?C0035
0039 E0                MOVX    A,@DPTR
003A 20E103            JB      ACC.1,?C0035
003D 30000B      E     JNB     Ccb42_DISAB_AUX,?C0034
0040         ?C0035:
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0040 120000      R     LCALL   L?0639
0043 7800        E     MOV     R0,#LOW MousePendingBuf
0045 F6                MOV     @R0,A
                                           ; SOURCE LINE # 199
0046 7800        E     MOV     R0,#LOW MSPending
0048 7633              MOV     @R0,#033H
                                           ; SOURCE LINE # 200
004A 22                RET     
004B         ?C0034:
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
004B 120000      R     LCALL   L?0639
004E FF                MOV     R7,A
004F 120000      R     LCALL   _SendFromAux
                                           ; SOURCE LINE # 205
0052 7800        E     MOV     R0,#LOW TPACKCounter
0054 E6                MOV     A,@R0
0055 6001              JZ      ?C0037
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 207
0057 16                DEC     @R0
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 52  

                                           ; SOURCE LINE # 208
0058         ?C0037:
                                           ; SOURCE LINE # 210
0058 30000B      E     JNB     MULPX_Multiplex,?C0038
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
005B 20006D      E     JB      AUXInterfaceBusy,?C0050
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
005E 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 215
0061 7F06              MOV     R7,#06H
0063 020000      R     LJMP    _SetPS2SkipScanTime
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
0066         ?C0038:
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0066 200062      E     JB      AUXInterfaceBusy,?C0050
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
;---- Variable 'index' assigned to Register 'R7' ----
0069 E4                CLR     A
006A FF                MOV     R7,A
006B         ?C0042:
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
006B 7400        E     MOV     A,#LOW AuxFlags
006D 2F                ADD     A,R7
006E F8                MOV     R0,A
006F E6                MOV     A,@R0
0070 30E616            JNB     ACC.6,?C0044
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
0073 EF                MOV     A,R7
                                           ; SOURCE LINE # 227
0074 120000      R     LCALL   L?0602
0077 120000      R     LCALL   L?0620
007A C083              PUSH    DPH
007C C082              PUSH    DPL
007E 120000      R     LCALL   L?0608
0081 FD                MOV     R5,A
0082 EE                MOV     A,R6
0083 4D                ORL     A,R5
0084 D082              POP     DPL
0086 D083              POP     DPH
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
0089         ?C0044:
0089 0F                INC     R7
008A EF                MOV     A,R7
008B B403DD            CJNE    A,#03H,?C0042
008E         ?C0043:
                                           ; SOURCE LINE # 230
008E E4                CLR     A
008F FF                MOV     R7,A
0090         ?C0046:
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
0090 900000      R     MOV     DPTR,#channel
0093 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 53  

0094 FE                MOV     R6,A
0095 6F                XRL     A,R7
0096 7029              JNZ     ?C0048
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 234
0098 E0                MOVX    A,@DPTR
0099 FD                MOV     R5,A
009A 120000      R     LCALL   L?0607
009D FA                MOV     R2,A
009E 7401              MOV     A,#01H
00A0 93                MOVC    A,@A+DPTR
00A1 F582              MOV     DPL,A
00A3 8A83              MOV     DPH,R2
00A5 7417              MOV     A,#017H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 235
00A8 ED                MOV     A,R5
00A9 120000      R     LCALL   L?0603
00AC 120000      R     LCALL   L?0620
00AF C083              PUSH    DPH
00B1 C082              PUSH    DPL
00B3 E0                MOVX    A,@DPTR
00B4 FD                MOV     R5,A
00B5 EE                MOV     A,R6
00B6 120000      R     LCALL   L?0611
00B9 FE                MOV     R6,A
00BA ED                MOV     A,R5
00BB 4E                ORL     A,R6
00BC D082              POP     DPL
00BE D083              POP     DPH
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
00C1         ?C0048:
00C1 0F                INC     R7
00C2 EF                MOV     A,R7
00C3 B403CA            CJNE    A,#03H,?C0046
00C6         ?C0047:
                                           ; SOURCE LINE # 238
00C6 7F06              MOV     R7,#06H
00C8 120000      R     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
00CB         ?C0050:
00CB 22                RET     
             ; FUNCTION _ProcessMouseData (END)

             ; FUNCTION _ProcessKeyboardData (BEGIN)
                                           ; SOURCE LINE # 247
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 250
0005 7800        E     MOV     R0,#LOW Main_KB_ACK_CUNT
0007 E6                MOV     A,@R0
0008 600C              JZ      ?C0051
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
000A 16                DEC     @R0
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 54  

                                           ; SOURCE LINE # 254
000B E0                MOVX    A,@DPTR
000C 2400        E     ADD     A,#LOW PS2PortxData
000E F8                MOV     R0,A
000F E6                MOV     A,@R0
0010 FF                MOV     R7,A
0011 120000      E     LCALL   _KBC_DataPending
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 261
0014 800C              SJMP    ?C0561
0016         ?C0051:
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
0016 900000      R     MOV     DPTR,#channel
0019 E0                MOVX    A,@DPTR
001A 2400        E     ADD     A,#LOW PS2PortxData
001C F8                MOV     R0,A
001D E6                MOV     A,@R0
001E FF                MOV     R7,A
001F 120000      E     LCALL   _Buffer_Key
                                           ; SOURCE LINE # 265
0022         ?C0561:
0022 120000      E     LCALL   SetServiceSendFlag
                                           ; SOURCE LINE # 266
0025         ?C0052:
                                           ; SOURCE LINE # 268
0025 7800        E     MOV     R0,#LOW Main_KB_ACK_CUNT
0027 E6                MOV     A,@R0
0028 7017              JNZ     ?C0053
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 270
002A 7800        E     MOV     R0,#LOW MSPending
002C E6                MOV     A,@R0
002D 6433              XRL     A,#033H
002F 7005              JNZ     ?C0054
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
0031 200033      E     JB      AUXInterfaceBusy,?C0060
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
0034 800E              SJMP    ?C0562
0036         ?C0054:
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0036 20002E      E     JB      AUXInterfaceBusy,?C0060
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
0039 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 284
003C 7F06              MOV     R7,#06H
003E 020000      R     LJMP    _SetPS2SkipScanTime
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
0041         ?C0053:
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
0041 200023      E     JB      AUXInterfaceBusy,?C0060
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 55  

                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
0044         ?C0562:
0044 900000      R     MOV     DPTR,#channel
                                           ; SOURCE LINE # 293
0047 120000      R     LCALL   L?0600
004A 120000      R     LCALL   L?0621
004D C083              PUSH    DPH
004F C082              PUSH    DPL
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#channel
0056 E0                MOVX    A,@DPTR
0057 120000      R     LCALL   L?0611
005A FE                MOV     R6,A
005B EF                MOV     A,R7
005C 4E                ORL     A,R6
005D D082              POP     DPL
005F D083              POP     DPH
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
0062 7F06              MOV     R7,#06H
0064 120000      R     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
0067         ?C0060:
0067 22                RET     
             ; FUNCTION _ProcessKeyboardData (END)

             ; FUNCTION _ProcessECTestAUXACK (BEGIN)
                                           ; SOURCE LINE # 299
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
0008 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 302
000A 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 303
000D E4                CLR     A
000E FF                MOV     R7,A
000F 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 304
0012 900000      R     MOV     DPTR,#PortNum
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 2480              ADD     A,#080H
0019 7800        E     MOV     R0,#LOW ScanAUXStepIndex
                                           ; SOURCE LINE # 306
001B 120000      R     LCALL   L?0615
001E E6                MOV     A,@R0
001F 30E028            JNB     ACC.0,?C0061
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
0022 7400        E     MOV     A,#LOW PS2PortxData
0024 2F                ADD     A,R7
0025 F8                MOV     R0,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 56  

0026 E6                MOV     A,@R0
0027 B4FA0A            CJNE    A,#0FAH,?C0062
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
002A 120000      R     LCALL   L?0613
002D 7402              MOV     A,#02H
002F 46                ORL     A,@R0
0030 F6                MOV     @R0,A
                                           ; SOURCE LINE # 313
0031 020000      R     LJMP    ?C0065
0034         ?C0062:
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
0034 7800        E     MOV     R0,#LOW PS2_ReTryCunt
0036 06                INC     @R0
                                           ; SOURCE LINE # 317
0037 E6                MOV     A,@R0
0038 D3                SETB    C
0039 9405              SUBB    A,#05H
003B 5003              JNC     $ + 5H
003D 020000      R     LJMP    ?C0065
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
0040 120000      R     LCALL   L?0612
0043 7404              MOV     A,#04H
0045 46                ORL     A,@R0
0046 F6                MOV     @R0,A
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
0047 020000      R     LJMP    ?C0065
004A         ?C0061:
                                           ; SOURCE LINE # 326
004A 120000      R     LCALL   L?0616
004D E6                MOV     A,@R0
004E 30E426            JNB     ACC.4,?C0066
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
0051 900000      R     MOV     DPTR,#PortNum
0054 E0                MOVX    A,@DPTR
0055 2400        E     ADD     A,#LOW PS2PortxData
0057 F8                MOV     R0,A
0058 E6                MOV     A,@R0
0059 B4FA09            CJNE    A,#0FAH,?C0067
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
005C 120000      R     LCALL   L?0613
005F 7420              MOV     A,#020H
0061 46                ORL     A,@R0
0062 F6                MOV     @R0,A
                                           ; SOURCE LINE # 333
0063 805E              SJMP    ?C0065
0065         ?C0067:
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
0065 7800        E     MOV     R0,#LOW PS2_ReTryCunt
0067 06                INC     @R0
                                           ; SOURCE LINE # 337
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 57  

0068 E6                MOV     A,@R0
0069 D3                SETB    C
006A 9405              SUBB    A,#05H
006C 4055              JC      ?C0065
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
006E 120000      R     LCALL   L?0612
0071 7440              MOV     A,#040H
0073 46                ORL     A,@R0
0074 F6                MOV     @R0,A
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
0075 804C              SJMP    ?C0065
0077         ?C0066:
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 348
0077 900000      R     MOV     DPTR,#PortNum
007A 120000      R     LCALL   L?0643
007D 7008              JNZ     ?C0071
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
007F 7400        E     MOV     A,#LOW AuxFlags
0081 2F                ADD     A,R7
0082 F8                MOV     R0,A
0083 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0085 801D              SJMP    ?C0563
0087         ?C0071:
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
0087 900000      R     MOV     DPTR,#PortNum
008A E0                MOVX    A,@DPTR
008B 2400        E     ADD     A,#LOW AuxFlags
008D F8                MOV     R0,A
008E E6                MOV     A,@R0
008F 30E307            JNB     ACC.3,?C0073
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
0092 120000      R     LCALL   L?0631
0095 24C0              ADD     A,#0C0H
                                           ; SOURCE LINE # 360
0097 8027              SJMP    ?C0565
0099         ?C0073:
                                           ; SOURCE LINE # 361
0099 900000      R     MOV     DPTR,#PortNum
009C E0                MOVX    A,@DPTR
009D 2400        E     ADD     A,#LOW AuxFlags
009F F8                MOV     R0,A
00A0 E6                MOV     A,@R0
00A1 B40207            CJNE    A,#02H,?C0075
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
00A4         ?C0563:
                                           ; SOURCE LINE # 364
00A4 120000      R     LCALL   L?0631
00A7 24B0              ADD     A,#0B0H
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 58  

00A9         ?C0564:
                                           ; SOURCE LINE # 365
00A9 8015              SJMP    ?C0565
00AB         ?C0075:
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
00AB 900000      R     MOV     DPTR,#PortNum
00AE E0                MOVX    A,@DPTR
00AF 2400        E     ADD     A,#LOW AuxFlags_KB_CMD
00B1 F8                MOV     R0,A
00B2 E6                MOV     A,@R0
00B3 600E              JZ      ?C0065
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
00B5 7FFF              MOV     R7,#0FFH
00B7 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 371
00BA 900000      R     MOV     DPTR,#PortNum
00BD E0                MOVX    A,@DPTR
00BE 24A0              ADD     A,#0A0H
00C0         ?C0565:
00C0 7800        E     MOV     R0,#LOW ScanAUXStepIndex
00C2 F6                MOV     @R0,A
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 375
00C3         ?C0065:
                                           ; SOURCE LINE # 377
00C3 900000      R     MOV     DPTR,#enablenow
00C6 E0                MOVX    A,@DPTR
00C7 B40103            CJNE    A,#01H,?C0079
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 379
00CA 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
00CD         ?C0079:
00CD 22                RET     
00CE         L?0631:
00CE 7FFF              MOV     R7,#0FFH
00D0 120000      R     LCALL   _SetAUXScanIndexHS
00D3 900000      R     MOV     DPTR,#PortNum
00D6 E0                MOVX    A,@DPTR
00D7 22                RET     
             ; FUNCTION _ProcessECTestAUXACK (END)

             ; FUNCTION _SendAUXData (BEGIN)
                                           ; SOURCE LINE # 387
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 391
0005 300020      E     JNB     SendtoAUXFlag,?C0080
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
0008 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
000A 120000      R     LCALL   L?0600
000D 120000      R     LCALL   L?0621
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 59  

0010 C083              PUSH    DPH
0012 C082              PUSH    DPL
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 900000      R     MOV     DPTR,#PortNum
0019 E0                MOVX    A,@DPTR
001A 120000      R     LCALL   L?0611
001D FE                MOV     R6,A
001E EF                MOV     A,R7
001F 4E                ORL     A,R6
0020 D082              POP     DPL
0022 D083              POP     DPH
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 396
0025 020000      R     LJMP    ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 397
0028         ?C0080:
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
0028 30000A      E     JNB     ECSendtoAUXFlag,?C0082
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 402
002B 900000      R     MOV     DPTR,#PortNum
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 7D01              MOV     R5,#01H
0032 020000      R     LJMP    _ProcessECTestAUXACK
                                           ; SOURCE LINE # 403
0035         ?C0082:
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
0035 E4                CLR     A
0036 FF                MOV     R7,A
0037 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 407
003A 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 408
003D 120000      R     LCALL   L?0642
0040 30E703            JNB     ACC.7,?C0084
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 410
0043 020000      R     LJMP    _ProcessMouseData
                                           ; SOURCE LINE # 411
0046         ?C0084:
                                           ; SOURCE LINE # 412
0046 120000      R     LCALL   L?0642
0049 30E603            JNB     ACC.6,?C0086
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 414
004C 020000      R     LJMP    _ProcessKeyboardData
                                           ; SOURCE LINE # 415
004F         ?C0086:
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
004F 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
0052         ?C0088:
0052 22                RET     
             ; FUNCTION _SendAUXData (END)
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 60  


             ; FUNCTION ClaerPS2IFPendingEvent (BEGIN)
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 430
0000 120000      R     LCALL   InhibitAUXDevice
                                           ; SOURCE LINE # 431
0003 900000      E     MOV     DPTR,#IER2
0006 E0                MOVX    A,@DPTR
0007 54E3              ANL     A,#0E3H
                                           ; SOURCE LINE # 432
0009 120000      R     LCALL   L?0625
                                           ; SOURCE LINE # 433
000C C200        E     CLR     PS2StartBit
                                           ; SOURCE LINE # 434
000E C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 435
0010 22                RET     
             ; FUNCTION ClaerPS2IFPendingEvent (END)

             ; FUNCTION _ECSend2Port (BEGIN)
                                           ; SOURCE LINE # 440
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
0008 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 443
000B 120000      R     LCALL   ClaerPS2IFPendingEvent
                                           ; SOURCE LINE # 444
000E D200        E     SETB    ECSendtoAUXFlag
                                           ; SOURCE LINE # 445
0010 D200        E     SETB    SendtoAUXFlag
                                           ; SOURCE LINE # 446
0012 900000      R     MOV     DPTR,#PortNum
0015 120000      R     LCALL   L?0606
0018 120000      R     LCALL   L?0628
                                           ; SOURCE LINE # 447
001B 900000      R     MOV     DPTR,#PortData
                                           ; SOURCE LINE # 448
001E 120000      R     LCALL   L?0617
                                           ; SOURCE LINE # 449
0021 900000      R     MOV     DPTR,#PortNum
0024 E0                MOVX    A,@DPTR
0025 120000      R     LCALL   L?0607
0028 120000      R     LCALL   L?0622
002B 741E              MOV     A,#01EH
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 450
002E 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 451
0031 900000      R     MOV     DPTR,#PortNum
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 120000      R     LCALL   L?0603
0039 120000      R     LCALL   L?0620
003C C083              PUSH    DPH
003E C082              PUSH    DPL
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 61  

0040 120000      R     LCALL   L?0609
0043 FF                MOV     R7,A
0044 EE                MOV     A,R6
0045 4F                ORL     A,R7
0046 D082              POP     DPL
0048 D083              POP     DPH
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
004B 22                RET     
             ; FUNCTION _ECSend2Port (END)

             ; FUNCTION CheckNWaitReceiveDone (BEGIN)
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 460
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#busy
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
0005 900000      E     MOV     DPTR,#PSSTS1
0008 E0                MOVX    A,@DPTR
0009 20E214            JB      ACC.2,?C0092
000C 900000      E     MOV     DPTR,#PSSTS2
000F E0                MOVX    A,@DPTR
0010 20E20D            JB      ACC.2,?C0092
0013 900000      E     MOV     DPTR,#PSSTS3
0016 E0                MOVX    A,@DPTR
0017 20E206            JB      ACC.2,?C0092
001A 200003      E     JB      F_Service_PS2,?C0092
001D 30003E      E     JNB     PS2StartBit,?C0091
0020         ?C0092:
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
0020 C28E              CLR     TR1
                                           ; SOURCE LINE # 466
0022 C2AB              CLR     ET1
                                           ; SOURCE LINE # 467
0024 00                NOP     
                                           ; SOURCE LINE # 468
0025 00                NOP     
                                           ; SOURCE LINE # 469
0026 00                NOP     
                                           ; SOURCE LINE # 470
0027 00                NOP     
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
0028 120000      R     LCALL   L?0660
002B         ?C0093:
                                           ; SOURCE LINE # 476
002B 208F0D            JB      TF1,?C0094
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 478
002E 3000FA      E     JNB     F_Service_PS2,?C0093
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
0031 900000      R     MOV     DPTR,#busy
0034 7401              MOV     A,#01H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
0037 C28E              CLR     TR1
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 62  

                                           ; SOURCE LINE # 482
0039 C28F              CLR     TF1
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
003B         ?C0094:
                                           ; SOURCE LINE # 487
003B 308F0C            JNB     TF1,?C0096
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
003E 120000      R     LCALL   PS2CheckPendingISR
0041 BF0106            CJNE    R7,#01H,?C0096
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 491
0044 900000      R     MOV     DPTR,#busy
0047 7401              MOV     A,#01H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
004A         ?C0096:
                                           ; SOURCE LINE # 495
004A 900000      R     MOV     DPTR,#busy
004D E0                MOVX    A,@DPTR
004E B40109            CJNE    A,#01H,?C0098
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 497
0051 C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 498
0053 D200        E     SETB    AUXInterfaceBusy
                                           ; SOURCE LINE # 499
0055 120000      R     LCALL   service_ps2
                                           ; SOURCE LINE # 500
0058 C200        E     CLR     AUXInterfaceBusy
                                           ; SOURCE LINE # 501
005A         ?C0098:
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
005A 120000      R     LCALL   L?0632
                                           ; SOURCE LINE # 506
005D 22                RET     
005E         ?C0091:
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
005E 120000      R     LCALL   PS2DeviceInactive
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
0061         ?C0100:
0061 22                RET     
             ; FUNCTION CheckNWaitReceiveDone (END)

             ; FUNCTION _Send2Port (BEGIN)
                                           ; SOURCE LINE # 516
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 63  

                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 536
000B 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 537
000E 120000      R     LCALL   ClaerPS2IFPendingEvent
                                           ; SOURCE LINE # 539
0011 900000      R     MOV     DPTR,#PortData
0014 E0                MOVX    A,@DPTR
0015 B4FF04            CJNE    A,#0FFH,?C0101
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
0018 7F78              MOV     R7,#078H
                                           ; SOURCE LINE # 542
001A 8022              SJMP    ?C0566
001C         ?C0101:
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
001C 7800        E     MOV     R0,#LOW TPACKCounter
001E E6                MOV     A,@R0
001F 6002              JZ      ?C0103
                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 548
0021 8005              SJMP    ?C0567
0023         ?C0103:
                                           ; SOURCE LINE # 549
0023 7800        E     MOV     R0,#LOW Main_KB_ACK_CUNT
0025 E6                MOV     A,@R0
0026 600B              JZ      ?C0105
                                           ; SOURCE LINE # 550
                                           ; SOURCE LINE # 551
0028         ?C0567:
0028 E6                MOV     A,@R0
0029 75F006            MOV     B,#06H
002C A4                MUL     AB
002D 900000      R     MOV     DPTR,#tempinactvietime
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
0031 8006              SJMP    ?C0104
0033         ?C0105:
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
0033 900000      R     MOV     DPTR,#tempinactvietime
0036 7406              MOV     A,#06H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 556
0039         ?C0104:
                                           ; SOURCE LINE # 557
0039 900000      R     MOV     DPTR,#tempinactvietime
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E         ?C0566:
003E 120000      R     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 558
0041         ?C0102:
                                           ; SOURCE LINE # 560
0041 E4                CLR     A
0042 FF                MOV     R7,A
0043 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 562
0046 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 563
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 64  

0048 D200        E     SETB    SendtoAUXFlag
                                           ; SOURCE LINE # 564
004A 900000      R     MOV     DPTR,#PortNum
004D 120000      R     LCALL   L?0606
0050 120000      R     LCALL   L?0628
                                           ; SOURCE LINE # 565
0053 900000      R     MOV     DPTR,#PortData
                                           ; SOURCE LINE # 566
0056 120000      R     LCALL   L?0617
                                           ; SOURCE LINE # 567
0059 900000      R     MOV     DPTR,#PortNum
005C E0                MOVX    A,@DPTR
005D 120000      R     LCALL   L?0607
0060 120000      R     LCALL   L?0622
0063 741E              MOV     A,#01EH
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 568
0066 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 569
0069 900000      R     MOV     DPTR,#PortNum
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E 120000      R     LCALL   L?0603
0071 120000      R     LCALL   L?0620
0074 C083              PUSH    DPH
0076 C082              PUSH    DPL
0078 120000      R     LCALL   L?0609
007B FF                MOV     R7,A
007C EE                MOV     A,R6
007D 4F                ORL     A,R7
007E D082              POP     DPL
0080 D083              POP     DPH
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 571
0083 900000      R     MOV     DPTR,#PortNum
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 020000      R     LJMP    _WaitPS2DeviceACK
             ; FUNCTION _Send2Port (END)

             ; FUNCTION _Send2PortNWait (BEGIN)
                                           ; SOURCE LINE # 581
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 586
000B E4                CLR     A
000C 7800        E     MOV     R0,#LOW PS2IFAck
000E F6                MOV     @R0,A
                                           ; SOURCE LINE # 587
000F 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 588
0012 120000      R     LCALL   ClaerPS2IFPendingEvent
                                           ; SOURCE LINE # 590
0015 C200        E     CLR     ECSendtoAUXFlag
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 65  

                                           ; SOURCE LINE # 591
0017 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 592
0019 120000      R     LCALL   L?0604
001C 120000      R     LCALL   L?0629
                                           ; SOURCE LINE # 593
001F 900000      R     MOV     DPTR,#cmd
                                           ; SOURCE LINE # 594
0022 120000      R     LCALL   L?0618
                                           ; SOURCE LINE # 595
0025 120000      R     LCALL   L?0604
0028 120000      R     LCALL   L?0620
002B 741E              MOV     A,#01EH
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 598
002E 7D01              MOV     R5,#01H
0030 120000      R     LCALL   _bExtAUXTimeOutCheck
0033 900000      R     MOV     DPTR,#result
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 600
0038 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 601
003B 900000      R     MOV     DPTR,#result
003E E0                MOVX    A,@DPTR
003F 702C              JNZ     ?C0108
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
0041 A3                INC     DPTR
0042 F0                MOVX    @DPTR,A
0043         ?C0109:
0043 900000      R     MOV     DPTR,#bytecunt
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 900000      R     MOV     DPTR,#index
004B E0                MOVX    A,@DPTR
004C C3                CLR     C
004D 9F                SUBB    A,R7
004E 501D              JNC     ?C0108
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 605
0050 120000      R     LCALL   L?0605
0053 120000      R     LCALL   L?0620
0056 7417              MOV     A,#017H
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 608
0059 7D02              MOV     R5,#02H
005B 120000      R     LCALL   _bExtAUXTimeOutCheck
005E 900000      R     MOV     DPTR,#result
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 610
0063 7008              JNZ     ?C0108
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 619
0065         ?C0111:
0065 900000      R     MOV     DPTR,#index
0068 E0                MOVX    A,@DPTR
0069 04                INC     A
006A F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 66  

006B 80D6              SJMP    ?C0109
                                           ; SOURCE LINE # 620
006D         ?C0108:
                                           ; SOURCE LINE # 622
006D 900000      R     MOV     DPTR,#PortNum
0070 E0                MOVX    A,@DPTR
0071 120000      R     LCALL   L?0607
0074 120000      R     LCALL   L?0622
                                           ; SOURCE LINE # 623
0077 120000      R     LCALL   L?0624
                                           ; SOURCE LINE # 625
007A 900000      R     MOV     DPTR,#result
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
                                           ; SOURCE LINE # 626
007F         ?C0113:
007F 22                RET     
             ; FUNCTION _Send2PortNWait (END)

             ; FUNCTION _SendCmdtoMouse (BEGIN)
                                           ; SOURCE LINE # 631
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 635
0005 120000      E     LCALL   Cmd_A8
                                           ; SOURCE LINE # 636
0008 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 637
000B E4                CLR     A
000C FF                MOV     R7,A
000D 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 638
0010 E4                CLR     A
0011 7800        E     MOV     R0,#LOW MS_ID_CUNT
0013 F6                MOV     @R0,A
                                           ; SOURCE LINE # 640
0014 300020      E     JNB     AUX2ByteCommand,?C0114
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
0017 7F01              MOV     R7,#01H
0019 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 643
001C 7800        E     MOV     R0,#LOW TPResolution
001E E6                MOV     A,@R0
001F B4FF04            CJNE    A,#0FFH,?C0115
                                           ; SOURCE LINE # 644
                                           ; SOURCE LINE # 645
0022 A600        E     MOV     @R0,KBHIData
                                           ; SOURCE LINE # 646
0024 8008              SJMP    ?C0116
0026         ?C0115:
                                           ; SOURCE LINE # 647
0026 7800        E     MOV     R0,#LOW TPSamplingRate
0028 E6                MOV     A,@R0
0029 B4FF02            CJNE    A,#0FFH,?C0116
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
002C A600        E     MOV     @R0,KBHIData
                                           ; SOURCE LINE # 650
002E         ?C0116:
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 67  

                                           ; SOURCE LINE # 652
002E 120000      R     LCALL   L?0637
0031 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 653
0034 C200        E     CLR     AUX2ByteCommand
0036 22                RET     
                                           ; SOURCE LINE # 655
0037         ?C0114:
                                           ; SOURCE LINE # 657
0037 E500        E     MOV     A,KBHIData
0039 240E              ADD     A,#0EH
003B 6025              JZ      ?C0132
003D 14                DEC     A
003E 6012              JZ      ?C0121
0040 14                DEC     A
0041 6017              JZ      ?C0122
0043 14                DEC     A
0044 6018              JZ      ?C0123
0046 24F6              ADD     A,#0F6H
0048 601E              JZ      ?C0135
004A 2417              ADD     A,#017H
004C 703A              JNZ     ?C0119
                                           ; SOURCE LINE # 658
                                           ; SOURCE LINE # 659
004E         ?C0120:
                                           ; SOURCE LINE # 660
004E 7800        E     MOV     R0,#LOW TPResolution
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 662
0050 8002              SJMP    ?C0568
                                           ; SOURCE LINE # 664
0052         ?C0121:
                                           ; SOURCE LINE # 665
0052 7800        E     MOV     R0,#LOW TPSamplingRate
0054         ?C0568:
0054 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 666
0056 D200        E     SETB    AUX2ByteCommand
                                           ; SOURCE LINE # 667
0058 802E              SJMP    ?C0119
                                           ; SOURCE LINE # 669
005A         ?C0122:
                                           ; SOURCE LINE # 674
005A D200        E     SETB    MouseDriverIn
                                           ; SOURCE LINE # 675
005C 802A              SJMP    ?C0119
                                           ; SOURCE LINE # 677
005E         ?C0123:
                                           ; SOURCE LINE # 678
005E C200        E     CLR     MouseDriverIn
                                           ; SOURCE LINE # 679
0060 8026              SJMP    ?C0119
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 682
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 690
                                           ; SOURCE LINE # 691
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 694
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 68  

                                           ; SOURCE LINE # 696
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 702
                                           ; SOURCE LINE # 703
                                           ; SOURCE LINE # 705
0062         ?C0132:
                                           ; SOURCE LINE # 706
0062 7800        E     MOV     R0,#LOW MS_ID_CUNT
0064 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 707
0066 8020              SJMP    ?C0119
                                           ; SOURCE LINE # 709
                                           ; SOURCE LINE # 710
                                           ; SOURCE LINE # 711
                                           ; SOURCE LINE # 713
0068         ?C0135:
                                           ; SOURCE LINE # 714
0068 C200        E     CLR     MouseDriverIn
                                           ; SOURCE LINE # 715
006A C200        E     CLR     MULPX_Multiplex
                                           ; SOURCE LINE # 718
;---- Variable 'index' assigned to Register 'R7' ----
006C E4                CLR     A
006D FF                MOV     R7,A
006E         ?C0136:
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
006E 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
0070 E6                MOV     A,@R0
0071 14                DEC     A
0072 6F                XRL     A,R7
0073 600E              JZ      ?C0138
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
0075 7400        E     MOV     A,#LOW AuxFlags
0077 2F                ADD     A,R7
0078 F8                MOV     R0,A
0079 E6                MOV     A,@R0
007A 30E706            JNB     ACC.7,?C0138
                                           ; SOURCE LINE # 723
                                           ; SOURCE LINE # 724
007D 7400        E     MOV     A,#LOW AuxFlags
007F 2F                ADD     A,R7
0080 F8                MOV     R0,A
0081 E4                CLR     A
0082 F6                MOV     @R0,A
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
0083         ?C0138:
0083 0F                INC     R7
0084 EF                MOV     A,R7
0085 B403E6            CJNE    A,#03H,?C0136
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
                                           ; SOURCE LINE # 732
0088         ?C0119:
                                           ; SOURCE LINE # 734
0088 E500        E     MOV     A,KBHIData
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 69  

008A B4FF04            CJNE    A,#0FFH,?C0142
                                           ; SOURCE LINE # 735
                                           ; SOURCE LINE # 736
008D 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 737
008F 8014              SJMP    ?C0571
0091         ?C0142:
                                           ; SOURCE LINE # 738
0091 E500        E     MOV     A,KBHIData
0093 B4F204            CJNE    A,#0F2H,?C0144
                                           ; SOURCE LINE # 739
                                           ; SOURCE LINE # 740
0096 7F02              MOV     R7,#02H
0098         ?C0569:
                                           ; SOURCE LINE # 741
0098 800B              SJMP    ?C0571
009A         ?C0144:
                                           ; SOURCE LINE # 742
009A E500        E     MOV     A,KBHIData
009C B4E904            CJNE    A,#0E9H,?C0146
                                           ; SOURCE LINE # 743
                                           ; SOURCE LINE # 744
009F 7F04              MOV     R7,#04H
00A1         ?C0570:
                                           ; SOURCE LINE # 745
00A1 8002              SJMP    ?C0571
00A3         ?C0146:
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 748
00A3 7F01              MOV     R7,#01H
00A5         ?C0571:
00A5 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 749
00A8         ?C0143:
                                           ; SOURCE LINE # 751
00A8 120000      R     LCALL   L?0637
00AB 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 752
00AE         ?C0118:
00AE 22                RET     
             ; FUNCTION _SendCmdtoMouse (END)

             ; FUNCTION _SendCmdtoMUX (BEGIN)
                                           ; SOURCE LINE # 757
0000 900000      R     MOV     DPTR,#port
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 759
0005 E4                CLR     A
0006 FF                MOV     R7,A
0007 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 760
000A 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 761
000D 300011      E     JNB     AUX2ByteCommand,?C0148
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
0010 7F01              MOV     R7,#01H
0012 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 764
0015 900000      R     MOV     DPTR,#port
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 70  

0018 120000      R     LCALL   L?0638
001B 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 765
001E C200        E     CLR     AUX2ByteCommand
0020 22                RET     
                                           ; SOURCE LINE # 767
0021         ?C0148:
                                           ; SOURCE LINE # 769
0021 E500        E     MOV     A,KBHIData
0023 240D              ADD     A,#0DH
0025 6004              JZ      ?C0152
0027 240B              ADD     A,#0BH
0029 7002              JNZ     ?C0150
                                           ; SOURCE LINE # 770
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
002B         ?C0152:
                                           ; SOURCE LINE # 773
002B D200        E     SETB    AUX2ByteCommand
                                           ; SOURCE LINE # 774
                                           ; SOURCE LINE # 776
                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
                                           ; SOURCE LINE # 783
                                           ; SOURCE LINE # 784
                                           ; SOURCE LINE # 785
                                           ; SOURCE LINE # 786
                                           ; SOURCE LINE # 787
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 789
                                           ; SOURCE LINE # 790
                                           ; SOURCE LINE # 791
                                           ; SOURCE LINE # 793
                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 795
002D         ?C0150:
                                           ; SOURCE LINE # 797
002D E500        E     MOV     A,KBHIData
002F B4FF04            CJNE    A,#0FFH,?C0169
                                           ; SOURCE LINE # 798
                                           ; SOURCE LINE # 799
0032 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 800
0034 8014              SJMP    ?C0574
0036         ?C0169:
                                           ; SOURCE LINE # 801
0036 E500        E     MOV     A,KBHIData
0038 B4F204            CJNE    A,#0F2H,?C0171
                                           ; SOURCE LINE # 802
                                           ; SOURCE LINE # 803
003B 7F02              MOV     R7,#02H
003D         ?C0572:
                                           ; SOURCE LINE # 804
003D 800B              SJMP    ?C0574
003F         ?C0171:
                                           ; SOURCE LINE # 805
003F E500        E     MOV     A,KBHIData
0041 B4E904            CJNE    A,#0E9H,?C0173
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 71  

                                           ; SOURCE LINE # 806
                                           ; SOURCE LINE # 807
0044 7F04              MOV     R7,#04H
0046         ?C0573:
                                           ; SOURCE LINE # 808
0046 8002              SJMP    ?C0574
0048         ?C0173:
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 811
0048 7F01              MOV     R7,#01H
004A         ?C0574:
004A 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 812
004D         ?C0170:
                                           ; SOURCE LINE # 814
004D 900000      R     MOV     DPTR,#port
0050 120000      R     LCALL   L?0638
0053 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 815
0056         ?C0149:
0056 22                RET     
             ; FUNCTION _SendCmdtoMUX (END)

             ; FUNCTION Ps2_Init (BEGIN)
                                           ; SOURCE LINE # 821
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 824
0000 22                RET     
             ; FUNCTION Ps2_Init (END)

             ; FUNCTION service_ps2 (BEGIN)
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 830
                                           ; SOURCE LINE # 833
0000 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0002 E6                MOV     A,@R0
0003 900000      R     MOV     DPTR,#channel
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 834
0007 E0                MOVX    A,@DPTR
0008 F4                CPL     A
0009 6016              JZ      ?C0177
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 836
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 2400        E     ADD     A,#LOW PS2PortxData
000F F8                MOV     R0,A
0010 E6                MOV     A,@R0
0011 FD                MOV     R5,A
0012 120000      E     LCALL   _Hook_service_ps2
                                           ; SOURCE LINE # 837
0015 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0017 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 838
0019 900000      R     MOV     DPTR,#channel
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 120000      R     LCALL   _SendAUXData
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 840
0021         ?C0177:
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 72  

0021 22                RET     
             ; FUNCTION service_ps2 (END)

             ; FUNCTION PS2DeviceInactive (BEGIN)
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 847
                                           ; SOURCE LINE # 848
0000 900000      E     MOV     DPTR,#PSCTL1
0003 7411              MOV     A,#011H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 849
0006 900000      E     MOV     DPTR,#PSCTL2
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 850
000A 900000      E     MOV     DPTR,#PSCTL3
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 851
000E 22                RET     
             ; FUNCTION PS2DeviceInactive (END)

             ; FUNCTION PS2Deviceactive (BEGIN)
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 859
;---- Variable 'index' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002         ?C0179:
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 861
0002 7400        E     MOV     A,#LOW AuxFlags
0004 2F                ADD     A,R7
0005 F8                MOV     R0,A
0006 E6                MOV     A,@R0
0007 30E616            JNB     ACC.6,?C0181
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 863
000A EF                MOV     A,R7
                                           ; SOURCE LINE # 864
000B 120000      R     LCALL   L?0602
000E 120000      R     LCALL   L?0620
0011 C083              PUSH    DPH
0013 C082              PUSH    DPL
0015 120000      R     LCALL   L?0609
0018 FD                MOV     R5,A
0019 EE                MOV     A,R6
001A 4D                ORL     A,R5
001B D082              POP     DPL
001D D083              POP     DPH
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 866
0020         ?C0181:
0020 0F                INC     R7
0021 EF                MOV     A,R7
0022 B403DD            CJNE    A,#03H,?C0179
0025         ?C0180:
                                           ; SOURCE LINE # 867
0025 E4                CLR     A
0026 FF                MOV     R7,A
0027         ?C0183:
                                           ; SOURCE LINE # 868
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 73  

                                           ; SOURCE LINE # 869
0027 7400        E     MOV     A,#LOW AuxFlags
0029 2F                ADD     A,R7
002A F8                MOV     R0,A
002B E6                MOV     A,@R0
002C 30E716            JNB     ACC.7,?C0185
                                           ; SOURCE LINE # 870
                                           ; SOURCE LINE # 871
002F EF                MOV     A,R7
                                           ; SOURCE LINE # 872
0030 120000      R     LCALL   L?0602
0033 120000      R     LCALL   L?0620
0036 C083              PUSH    DPH
0038 C082              PUSH    DPL
003A 120000      R     LCALL   L?0609
003D FD                MOV     R5,A
003E EE                MOV     A,R6
003F 4D                ORL     A,R5
0040 D082              POP     DPL
0042 D083              POP     DPH
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 874
0045         ?C0185:
0045 0F                INC     R7
0046 EF                MOV     A,R7
0047 B403DD            CJNE    A,#03H,?C0183
                                           ; SOURCE LINE # 875
004A         ?C0187:
004A 22                RET     
             ; FUNCTION PS2Deviceactive (END)

             ; FUNCTION InhibitAUXDevice (BEGIN)
                                           ; SOURCE LINE # 880
                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
0000 120000      R     LCALL   PS2DeviceInactive
                                           ; SOURCE LINE # 884
0003 C28E              CLR     TR1
                                           ; SOURCE LINE # 885
0005 C2AB              CLR     ET1
                                           ; SOURCE LINE # 886
0007 00                NOP     
                                           ; SOURCE LINE # 887
0008 00                NOP     
                                           ; SOURCE LINE # 888
0009 00                NOP     
                                           ; SOURCE LINE # 889
000A 00                NOP     
                                           ; SOURCE LINE # 890
000B 758DFF            MOV     TH1,#0FFH
                                           ; SOURCE LINE # 891
000E 758B8C            MOV     TL1,#08CH
                                           ; SOURCE LINE # 892
0011 C28F              CLR     TF1
                                           ; SOURCE LINE # 893
0013 D28E              SETB    TR1
0015         ?C0188:
                                           ; SOURCE LINE # 894
0015 308FFD            JNB     TF1,?C0188
0018         ?C0189:
                                           ; SOURCE LINE # 895
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 74  

                                           ; SOURCE LINE # 896
                                           ; SOURCE LINE # 897
0018 120000      R     LCALL   L?0632
                                           ; SOURCE LINE # 898
001B 22                RET     
             ; FUNCTION InhibitAUXDevice (END)

             ; FUNCTION _ScanAUXDevice (BEGIN)
                                           ; SOURCE LINE # 907
0000 900000      R     MOV     DPTR,#scan_selection
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 908
                                           ; SOURCE LINE # 912
0005 BF0106            CJNE    R7,#01H,?C0191
                                           ; SOURCE LINE # 913
                                           ; SOURCE LINE # 914
0008 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
000A E6                MOV     A,@R0
000B 6010              JZ      ?C0194
                                           ; SOURCE LINE # 915
000D 22                RET     
                                           ; SOURCE LINE # 917
                                           ; SOURCE LINE # 918
000E         ?C0191:
                                           ; SOURCE LINE # 919
000E 900000      R     MOV     DPTR,#scan_selection
0011 E0                MOVX    A,@DPTR
0012 B40208            CJNE    A,#02H,?C0194
                                           ; SOURCE LINE # 920
                                           ; SOURCE LINE # 921
0015 7800        E     MOV     R0,#LOW Main_KB_CHN
0017 E6                MOV     A,@R0
0018 6003              JZ      $ + 5H
001A 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 922
                                           ; SOURCE LINE # 924
                                           ; SOURCE LINE # 925
001D         ?C0194:
                                           ; SOURCE LINE # 927
001D E4                CLR     A
001E 900000      R     MOV     DPTR,#index
0021 F0                MOVX    @DPTR,A
0022         ?C0197:
0022 900000      R     MOV     DPTR,#index
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 C3                CLR     C
0028 9403              SUBB    A,#03H
002A 4003              JC      $ + 5H
002C 020000      R     LJMP    ?C0198
                                           ; SOURCE LINE # 928
                                           ; SOURCE LINE # 929
002F 7400        E     MOV     A,#LOW AuxFlags
0031 2F                ADD     A,R7
0032 F8                MOV     R0,A
0033 E6                MOV     A,@R0
0034 30E703            JNB     ACC.7,$ + 6H
0037 020000      R     LJMP    ?C0199
003A E0                MOVX    A,@DPTR
003B 2400        E     ADD     A,#LOW AuxFlags
003D F8                MOV     R0,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 75  

003E E6                MOV     A,@R0
003F 30E603            JNB     ACC.6,$ + 6H
0042 020000      R     LJMP    ?C0199
                                           ; SOURCE LINE # 930
                                           ; SOURCE LINE # 931
                                           ; SOURCE LINE # 932
0045         ?C0200:
                                           ; SOURCE LINE # 933
0045 900000      R     MOV     DPTR,#index
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A 2400        E     ADD     A,#LOW AuxFlags
004C F8                MOV     R0,A
004D E4                CLR     A
004E F6                MOV     @R0,A
                                           ; SOURCE LINE # 935
004F EE                MOV     A,R6
0050 7010              JNZ     ?C0202
                                           ; SOURCE LINE # 936
                                           ; SOURCE LINE # 937
0052 120000      R     LCALL   L?0644
0055 6003              JZ      $ + 5H
0057 020000      R     LJMP    ?C0199
005A 120000      R     LCALL   L?0646
005D 602E              JZ      ?C0205
                                           ; SOURCE LINE # 938
005F 020000      R     LJMP    ?C0199
                                           ; SOURCE LINE # 939
0062         ?C0202:
                                           ; SOURCE LINE # 940
0062 EF                MOV     A,R7
0063 B40110            CJNE    A,#01H,?C0206
                                           ; SOURCE LINE # 941
                                           ; SOURCE LINE # 942
0066 120000      R     LCALL   L?0648
0069 6003              JZ      $ + 5H
006B 020000      R     LJMP    ?C0199
006E 120000      R     LCALL   L?0650
0071 601A              JZ      ?C0205
                                           ; SOURCE LINE # 943
0073         ?C0575:
0073 020000      R     LJMP    ?C0199
                                           ; SOURCE LINE # 944
0076         ?C0206:
                                           ; SOURCE LINE # 945
0076 900000      R     MOV     DPTR,#index
0079 E0                MOVX    A,@DPTR
007A B40210            CJNE    A,#02H,?C0205
                                           ; SOURCE LINE # 946
                                           ; SOURCE LINE # 947
007D 120000      R     LCALL   L?0652
0080 6003              JZ      $ + 5H
0082 020000      R     LJMP    ?C0199
0085 120000      R     LCALL   L?0654
0088 6003              JZ      $ + 5H
008A 020000      R     LJMP    ?C0199
                                           ; SOURCE LINE # 948
                                           ; SOURCE LINE # 949
008D         ?C0205:
                                           ; SOURCE LINE # 951
008D 900000      R     MOV     DPTR,#index
0090 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 76  

0091 FF                MOV     R7,A
0092 7B01              MOV     R3,#01H
0094 7DFF              MOV     R5,#0FFH
0096 120000      R     LCALL   _Send2PortNWait
0099 EF                MOV     A,R7
009A 6003              JZ      $ + 5H
009C 020000      R     LJMP    ?C0213
009F 7800        E     MOV     R0,#LOW PS2IFAck
00A1 E6                MOV     A,@R0
00A2 64FA              XRL     A,#0FAH
00A4 6003              JZ      $ + 5H
00A6 020000      R     LJMP    ?C0213
                                           ; SOURCE LINE # 952
                                           ; SOURCE LINE # 953
00A9 900000      R     MOV     DPTR,#index
00AC E0                MOVX    A,@DPTR
00AD FF                MOV     R7,A
00AE 2400        E     ADD     A,#LOW AuxFlags
00B0 F8                MOV     R0,A
00B1 7401              MOV     A,#01H
00B3 46                ORL     A,@R0
00B4 F6                MOV     @R0,A
                                           ; SOURCE LINE # 955
00B5 EF                MOV     A,R7
00B6 120000      R     LCALL   L?0607
00B9 120000      R     LCALL   L?0622
00BC 7417              MOV     A,#017H
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 956
00BF E4                CLR     A
00C0 900000      R     MOV     DPTR,#timeout
00C3 F0                MOVX    @DPTR,A
00C4         ?C0214:
                                           ; SOURCE LINE # 957
                                           ; SOURCE LINE # 960
00C4 120000      R     LCALL   L?0659
00C7 6005              JZ      ?C0215
                                           ; SOURCE LINE # 962
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 964
                                           ; SOURCE LINE # 965
00C9         ?C0216:
00C9 120000      R     LCALL   L?0634
00CC 40F6              JC      ?C0214
00CE         ?C0215:
                                           ; SOURCE LINE # 967
00CE 900000      R     MOV     DPTR,#timeout
00D1 E0                MOVX    A,@DPTR
00D2 D3                SETB    C
00D3 9411              SUBB    A,#011H
00D5 400E              JC      ?C0218
                                           ; SOURCE LINE # 968
                                           ; SOURCE LINE # 969
00D7 900000      R     MOV     DPTR,#index
00DA E0                MOVX    A,@DPTR
00DB 2400        E     ADD     A,#LOW AuxFlags
00DD F8                MOV     R0,A
00DE 74FE              MOV     A,#0FEH
00E0 56                ANL     A,@R0
00E1 F6                MOV     @R0,A
                                           ; SOURCE LINE # 970
00E2 020000      R     LJMP    ?C0577
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 77  

00E5         ?C0218:
                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 973
00E5 900000      R     MOV     DPTR,#index
00E8 E0                MOVX    A,@DPTR
00E9 120000      R     LCALL   L?0607
00EC 120000      R     LCALL   L?0622
00EF 7417              MOV     A,#017H
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 974
00F2 E4                CLR     A
00F3 900000      R     MOV     DPTR,#timeout
00F6 F0                MOVX    @DPTR,A
00F7         ?C0220:
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 978
00F7 120000      R     LCALL   L?0659
00FA 6005              JZ      ?C0221
                                           ; SOURCE LINE # 980
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 982
                                           ; SOURCE LINE # 983
00FC         ?C0222:
00FC 120000      R     LCALL   L?0634
00FF 40F6              JC      ?C0220
0101         ?C0221:
                                           ; SOURCE LINE # 985
0101 900000      R     MOV     DPTR,#timeout
0104 E0                MOVX    A,@DPTR
0105 D3                SETB    C
0106 9411              SUBB    A,#011H
0108 4007              JC      ?C0224
                                           ; SOURCE LINE # 986
                                           ; SOURCE LINE # 987
                                           ; SOURCE LINE # 988
                                           ; SOURCE LINE # 989
010A 120000      R     LCALL   L?0630
010D 7026              JNZ     ?C0577
                                           ; SOURCE LINE # 990
                                           ; SOURCE LINE # 991
010F 803A              SJMP    ?C0198
                                           ; SOURCE LINE # 992
                                           ; SOURCE LINE # 993
0111         ?C0224:
                                           ; SOURCE LINE # 995
                                           ; SOURCE LINE # 996
0111 7800        E     MOV     R0,#LOW PS2IFAck
0113 E6                MOV     A,@R0
0114 7018              JNZ     ?C0227
                                           ; SOURCE LINE # 997
                                           ; SOURCE LINE # 998
0116 900000      R     MOV     DPTR,#index
0119 E0                MOVX    A,@DPTR
011A FF                MOV     R7,A
011B 2400        E     ADD     A,#LOW AuxFlags
011D F8                MOV     R0,A
011E 7480              MOV     A,#080H
0120 46                ORL     A,@R0
0121 F6                MOV     @R0,A
                                           ; SOURCE LINE # 999
0122 120000      R     LCALL   _CheckNSetMainMSCHN
                                           ; SOURCE LINE # 1000
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 78  

0125 900000      R     MOV     DPTR,#scan_selection
0128 E0                MOVX    A,@DPTR
0129 B40107            CJNE    A,#01H,?C0219
                                           ; SOURCE LINE # 1001
                                           ; SOURCE LINE # 1002
012C         ?C0576:
012C 801D              SJMP    ?C0198
                                           ; SOURCE LINE # 1003
                                           ; SOURCE LINE # 1004
012E         ?C0227:
                                           ; SOURCE LINE # 1006
                                           ; SOURCE LINE # 1007
                                           ; SOURCE LINE # 1008
                                           ; SOURCE LINE # 1009
012E 120000      R     LCALL   L?0630
0131 6018              JZ      ?C0198
                                           ; SOURCE LINE # 1010
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
0133         ?C0219:
                                           ; SOURCE LINE # 1017
                                           ; SOURCE LINE # 1018
                                           ; SOURCE LINE # 1019
0133 8000              SJMP    ?C0577
0135         ?C0213:
                                           ; SOURCE LINE # 1021
                                           ; SOURCE LINE # 1022
0135         ?C0577:
0135 900000      R     MOV     DPTR,#index
0138 E0                MOVX    A,@DPTR
0139 120000      R     LCALL   L?0607
013C 120000      R     LCALL   L?0622
                                           ; SOURCE LINE # 1023
013F 120000      R     LCALL   L?0624
                                           ; SOURCE LINE # 1024
                                           ; SOURCE LINE # 1025
                                           ; SOURCE LINE # 1026
0142         ?C0199:
0142 900000      R     MOV     DPTR,#index
0145 E0                MOVX    A,@DPTR
0146 04                INC     A
0147 F0                MOVX    @DPTR,A
0148 020000      R     LJMP    ?C0197
014B         ?C0198:
                                           ; SOURCE LINE # 1028
014B 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
014D E6                MOV     A,@R0
014E 700D              JNZ     ?C0193
0150 7800        E     MOV     R0,#LOW Main_KB_CHN
0152 E6                MOV     A,@R0
0153 7008              JNZ     ?C0193
                                           ; SOURCE LINE # 1029
                                           ; SOURCE LINE # 1030
0155 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 1031
0158 E4                CLR     A
0159 FF                MOV     R7,A
015A 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 1032
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 79  

                                           ; SOURCE LINE # 1033
015D         ?C0193:
015D 22                RET     
015E         L?0630:
015E 900000      R     MOV     DPTR,#index
0161 E0                MOVX    A,@DPTR
0162 FF                MOV     R7,A
0163 2400        E     ADD     A,#LOW AuxFlags
0165 F8                MOV     R0,A
0166 7440              MOV     A,#040H
0168 46                ORL     A,@R0
0169 F6                MOV     @R0,A
016A 120000      R     LCALL   _CheckNSetMainKBCHN
016D 900000      R     MOV     DPTR,#scan_selection
0170 E0                MOVX    A,@DPTR
0171 6402              XRL     A,#02H
0173 22                RET     
0174         L?0659:
0174 900000      R     MOV     DPTR,#index
0177 E0                MOVX    A,@DPTR
0178 FF                MOV     R7,A
0179 7D02              MOV     R5,#02H
017B 120000      R     LCALL   _bExtAUXTimeOutCheck
017E EF                MOV     A,R7
017F 22                RET     
             ; FUNCTION _ScanAUXDevice (END)

             ; FUNCTION CheckAUXDeviceType (BEGIN)
                                           ; SOURCE LINE # 1038
                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1042
0000 120000      R     LCALL   L?0626
0003 E6                MOV     A,@R0
0004 6402              XRL     A,#02H
0006 6003              JZ      $ + 5H
0008 020000      R     LJMP    ?C0252
                                           ; SOURCE LINE # 1043
                                           ; SOURCE LINE # 1044
000B 120000      R     LCALL   L?0626
000E E4                CLR     A
000F F6                MOV     @R0,A
                                           ; SOURCE LINE # 1045
0010 7800        E     MOV     R0,#LOW PS2IFAck
0012 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1047
0013 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0015 E6                MOV     A,@R0
0016 FF                MOV     R7,A
0017 7B01              MOV     R3,#01H
0019 7DFF              MOV     R5,#0FFH
001B 120000      R     LCALL   _Send2PortNWait
001E EF                MOV     A,R7
001F 6003              JZ      $ + 5H
0021 020000      R     LJMP    ?C0234
0024 7800        E     MOV     R0,#LOW PS2IFAck
0026 E6                MOV     A,@R0
0027 64FA              XRL     A,#0FAH
0029 6003              JZ      $ + 5H
002B 020000      R     LJMP    ?C0234
                                           ; SOURCE LINE # 1048
                                           ; SOURCE LINE # 1049
002E 120000      R     LCALL   L?0627
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 80  

0031 7401              MOV     A,#01H
0033 46                ORL     A,@R0
0034 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1051
0035 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0037 E6                MOV     A,@R0
0038 120000      R     LCALL   L?0607
                                           ; SOURCE LINE # 1052
003B 120000      R     LCALL   L?0636
003E         ?C0235:
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1056
003E 120000      R     LCALL   L?0662
0041 6008              JZ      ?C0236
                                           ; SOURCE LINE # 1058
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
                                           ; SOURCE LINE # 1061
0043         ?C0237:
0043 900000      R     MOV     DPTR,#timeout
0046 120000      R     LCALL   L?0635
0049 40F3              JC      ?C0235
004B         ?C0236:
                                           ; SOURCE LINE # 1063
004B 900000      R     MOV     DPTR,#timeout
004E E0                MOVX    A,@DPTR
004F D3                SETB    C
0050 9411              SUBB    A,#011H
0052 4009              JC      ?C0239
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1065
0054 120000      R     LCALL   L?0627
0057 74FE              MOV     A,#0FEH
0059 56                ANL     A,@R0
005A F6                MOV     @R0,A
                                           ; SOURCE LINE # 1066
005B 804A              SJMP    ?C0240
005D         ?C0239:
                                           ; SOURCE LINE # 1068
                                           ; SOURCE LINE # 1069
005D 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
005F E6                MOV     A,@R0
0060 120000      R     LCALL   L?0607
                                           ; SOURCE LINE # 1070
0063 120000      R     LCALL   L?0636
0066         ?C0241:
                                           ; SOURCE LINE # 1071
                                           ; SOURCE LINE # 1074
0066 120000      R     LCALL   L?0662
0069 6008              JZ      ?C0242
                                           ; SOURCE LINE # 1076
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1079
006B         ?C0243:
006B 900000      R     MOV     DPTR,#timeout
006E 120000      R     LCALL   L?0635
0071 40F3              JC      ?C0241
0073         ?C0242:
                                           ; SOURCE LINE # 1081
0073 900000      R     MOV     DPTR,#timeout
0076 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 81  

0077 D3                SETB    C
0078 9411              SUBB    A,#011H
007A 4004              JC      ?C0245
                                           ; SOURCE LINE # 1082
                                           ; SOURCE LINE # 1083
007C 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
                                           ; SOURCE LINE # 1084
                                           ; SOURCE LINE # 1085
007E 8018              SJMP    ?C0578
0080         ?C0245:
                                           ; SOURCE LINE # 1087
                                           ; SOURCE LINE # 1088
0080 7800        E     MOV     R0,#LOW PS2IFAck
0082 E6                MOV     A,@R0
0083 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0085 7011              JNZ     ?C0247
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1090
0087 E6                MOV     A,@R0
0088 2400        E     ADD     A,#LOW AuxFlags
008A F8                MOV     R0,A
008B 7480              MOV     A,#080H
008D 46                ORL     A,@R0
008E F6                MOV     @R0,A
                                           ; SOURCE LINE # 1091
008F 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0091 E6                MOV     A,@R0
0092 FF                MOV     R7,A
0093 120000      R     LCALL   _CheckNSetMainMSCHN
                                           ; SOURCE LINE # 1092
0096 800F              SJMP    ?C0240
0098         ?C0247:
                                           ; SOURCE LINE # 1094
                                           ; SOURCE LINE # 1095
0098         ?C0578:
0098 E6                MOV     A,@R0
0099 2400        E     ADD     A,#LOW AuxFlags
009B F8                MOV     R0,A
009C 7440              MOV     A,#040H
009E 46                ORL     A,@R0
009F F6                MOV     @R0,A
                                           ; SOURCE LINE # 1096
00A0 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00A2 E6                MOV     A,@R0
00A3 FF                MOV     R7,A
00A4 120000      R     LCALL   _CheckNSetMainKBCHN
                                           ; SOURCE LINE # 1097
                                           ; SOURCE LINE # 1098
                                           ; SOURCE LINE # 1099
00A7         ?C0240:
                                           ; SOURCE LINE # 1101
00A7 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00A9 E6                MOV     A,@R0
00AA 120000      R     LCALL   L?0607
                                           ; SOURCE LINE # 1102
00AD 120000      R     LCALL   L?0623
                                           ; SOURCE LINE # 1104
00B0 E6                MOV     A,@R0
00B1 2400        E     ADD     A,#LOW AuxFlags
00B3 F8                MOV     R0,A
00B4 E6                MOV     A,@R0
00B5 30E00E            JNB     ACC.0,?C0249
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 82  

                                           ; SOURCE LINE # 1105
                                           ; SOURCE LINE # 1106
00B8 120000      R     LCALL   L?0627
00BB 7408              MOV     A,#08H
00BD 46                ORL     A,@R0
00BE F6                MOV     @R0,A
                                           ; SOURCE LINE # 1107
00BF 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00C1 E6                MOV     A,@R0
00C2 24C0              ADD     A,#0C0H
                                           ; SOURCE LINE # 1108
00C4 801F              SJMP    ?C0580
00C6         ?C0249:
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
00C6 E4                CLR     A
00C7 FF                MOV     R7,A
00C8 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 1112
00CB 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00CD E6                MOV     A,@R0
00CE 24B8              ADD     A,#0B8H
00D0         ?C0579:
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1114
00D0 8013              SJMP    ?C0580
00D2         ?C0234:
                                           ; SOURCE LINE # 1116
                                           ; SOURCE LINE # 1117
00D2 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00D4 E6                MOV     A,@R0
00D5 120000      R     LCALL   L?0607
                                           ; SOURCE LINE # 1118
00D8 120000      R     LCALL   L?0623
                                           ; SOURCE LINE # 1120
00DB E4                CLR     A
00DC FF                MOV     R7,A
00DD 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 1121
00E0 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00E2 E6                MOV     A,@R0
00E3 24C8              ADD     A,#0C8H
00E5         ?C0580:
00E5 7900        E     MOV     R1,#LOW ScanAUXStepIndex
00E7 F7                MOV     @R1,A
                                           ; SOURCE LINE # 1122
00E8         ?C0251:
                                           ; SOURCE LINE # 1123
00E8 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1124
                                           ; SOURCE LINE # 1125
00EB         ?C0252:
00EB 22                RET     
00EC         L?0662:
00EC 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00EE E6                MOV     A,@R0
00EF FF                MOV     R7,A
00F0 7D02              MOV     R5,#02H
00F2 120000      R     LCALL   _bExtAUXTimeOutCheck
00F5 EF                MOV     A,R7
00F6 22                RET     
             ; FUNCTION CheckAUXDeviceType (END)
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 83  


             ; FUNCTION AUXDevicePlugOutClearVariables (BEGIN)
                                           ; SOURCE LINE # 1130
                                           ; SOURCE LINE # 1131
                                           ; SOURCE LINE # 1134
0000 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 1135
0003 E4                CLR     A
0004 FF                MOV     R7,A
0005 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 1136
0008 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
000A E6                MOV     A,@R0
000B 2400        E     ADD     A,#LOW AuxFlags
                                           ; SOURCE LINE # 1137
000D 120000      R     LCALL   L?0614
0010 E4                CLR     A
0011 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1138
0012 7800        E     MOV     R0,#LOW PS2_ReTryCunt
0014 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1139
0015 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 1140
0017 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 1142
0019 120000      R     LCALL   L?0663
001C 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
001E E6                MOV     A,@R0
001F 6F                XRL     A,R7
0020 7001              JNZ     ?C0553
0022 EE                MOV     A,R6
0023         ?C0553:
0023 7027              JNZ     ?C0253
                                           ; SOURCE LINE # 1143
                                           ; SOURCE LINE # 1144
0025 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1145
0026 900000      R     MOV     DPTR,#index
0029 F0                MOVX    @DPTR,A
002A         ?C0254:
002A 900000      R     MOV     DPTR,#index
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F C3                CLR     C
0030 9403              SUBB    A,#03H
0032 5018              JNC     ?C0253
                                           ; SOURCE LINE # 1146
                                           ; SOURCE LINE # 1147
0034 7400        E     MOV     A,#LOW AuxFlags
0036 2F                ADD     A,R7
0037 F8                MOV     R0,A
0038 E6                MOV     A,@R0
0039 30E708            JNB     ACC.7,?C0256
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
003C E0                MOVX    A,@DPTR
003D 2400        E     ADD     A,#LOW AuxFlags
                                           ; SOURCE LINE # 1150
003F 120000      R     LCALL   L?0661
                                           ; SOURCE LINE # 1151
0042 8008              SJMP    ?C0253
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 84  

                                           ; SOURCE LINE # 1152
                                           ; SOURCE LINE # 1153
0044         ?C0256:
0044 900000      R     MOV     DPTR,#index
0047 E0                MOVX    A,@DPTR
0048 04                INC     A
0049 F0                MOVX    @DPTR,A
004A 80DE              SJMP    ?C0254
                                           ; SOURCE LINE # 1154
004C         ?C0253:
                                           ; SOURCE LINE # 1156
004C 120000      R     LCALL   L?0663
004F 7800        E     MOV     R0,#LOW Main_KB_CHN
0051 E6                MOV     A,@R0
0052 6F                XRL     A,R7
0053 7001              JNZ     ?C0554
0055 EE                MOV     A,R6
0056         ?C0554:
0056 702D              JNZ     ?C0263
                                           ; SOURCE LINE # 1157
                                           ; SOURCE LINE # 1158
0058 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1159
0059 900000      R     MOV     DPTR,#index
005C F0                MOVX    @DPTR,A
005D         ?C0259:
005D 900000      R     MOV     DPTR,#index
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 C3                CLR     C
0063 9403              SUBB    A,#03H
0065 501E              JNC     ?C0263
                                           ; SOURCE LINE # 1160
                                           ; SOURCE LINE # 1161
0067 7400        E     MOV     A,#LOW AuxFlags
0069 2F                ADD     A,R7
006A F8                MOV     R0,A
006B E6                MOV     A,@R0
006C 30E60E            JNB     ACC.6,?C0261
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1163
006F E0                MOVX    A,@DPTR
0070 2400        E     ADD     A,#LOW AuxFlags
0072 F8                MOV     R0,A
0073 7410              MOV     A,#010H
0075 46                ORL     A,@R0
0076 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1164
0077 EF                MOV     A,R7
0078 04                INC     A
0079 7800        E     MOV     R0,#LOW Main_KB_CHN
007B F6                MOV     @R0,A
                                           ; SOURCE LINE # 1165
007C 22                RET     
                                           ; SOURCE LINE # 1166
                                           ; SOURCE LINE # 1167
007D         ?C0261:
007D 900000      R     MOV     DPTR,#index
0080 E0                MOVX    A,@DPTR
0081 04                INC     A
0082 F0                MOVX    @DPTR,A
0083 80D8              SJMP    ?C0259
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 85  

                                           ; SOURCE LINE # 1168
                                           ; SOURCE LINE # 1169
0085         ?C0263:
0085 22                RET     
             ; FUNCTION AUXDevicePlugOutClearVariables (END)

             ; FUNCTION PollingAUXDeviceCenter (BEGIN)
                                           ; SOURCE LINE # 1174
                                           ; SOURCE LINE # 1175
                                           ; SOURCE LINE # 1176
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0002 E6                MOV     A,@R0
0003 F4                CPL     A
0004 6019              JZ      ?C0264
                                           ; SOURCE LINE # 1177
                                           ; SOURCE LINE # 1178
0006 7FFF              MOV     R7,#0FFH
0008 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 1179
000B 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
000D 06                INC     @R0
                                           ; SOURCE LINE # 1180
000E E6                MOV     A,@R0
000F D3                SETB    C
0010 9402              SUBB    A,#02H
0012 4002              JC      ?C0265
                                           ; SOURCE LINE # 1181
                                           ; SOURCE LINE # 1182
0014 E4                CLR     A
0015 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1183
0016         ?C0265:
                                           ; SOURCE LINE # 1184
0016 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0018 E6                MOV     A,@R0
0019 24F0              ADD     A,#0F0H
001B 7900        E     MOV     R1,#LOW ScanAUXStepIndex
001D F7                MOV     @R1,A
                                           ; SOURCE LINE # 1185
001E 22                RET     
001F         ?C0264:
                                           ; SOURCE LINE # 1187
                                           ; SOURCE LINE # 1188
001F 30000F      E     JNB     ECSendtoAUXFlag,?C0269
                                           ; SOURCE LINE # 1189
                                           ; SOURCE LINE # 1190
0022 7800        E     MOV     R0,#LOW AUX_SCAN_TIMEOUT_CUNT
0024 06                INC     @R0
                                           ; SOURCE LINE # 1191
0025 E6                MOV     A,@R0
0026 C3                CLR     C
0027 9408              SUBB    A,#08H
0029 4006              JC      ?C0269
                                           ; SOURCE LINE # 1192
                                           ; SOURCE LINE # 1193
002B 120000      R     LCALL   AUXDevicePlugOutClearVariables
                                           ; SOURCE LINE # 1194
002E 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1195
                                           ; SOURCE LINE # 1196
                                           ; SOURCE LINE # 1197
                                           ; SOURCE LINE # 1198
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 86  

0031         ?C0269:
0031 22                RET     
             ; FUNCTION PollingAUXDeviceCenter (END)

             ; FUNCTION _UpdateExtKeyboard (BEGIN)
                                           ; SOURCE LINE # 1205
0000 900000      R     MOV     DPTR,#portnum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1206
                                           ; SOURCE LINE # 1209
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
0008         ?C0270:
0008 900000      R     MOV     DPTR,#index
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D C3                CLR     C
000E 9404              SUBB    A,#04H
0010 4003              JC      $ + 5H
0012 020000      R     LJMP    ?C0278
                                           ; SOURCE LINE # 1210
                                           ; SOURCE LINE # 1212
0015 120000      R     LCALL   L?0664
0018 E6                MOV     A,@R0
0019 FD                MOV     R5,A
001A 7C00              MOV     R4,#00H
001C 7401              MOV     A,#01H
001E 7E00              MOV     R6,#00H
0020 C8                XCH     A,R0
0021 EF                MOV     A,R7
0022 C8                XCH     A,R0
0023 08                INC     R0
0024 8005              SJMP    ?C0556
0026         ?C0555:
0026 C3                CLR     C
0027 33                RLC     A
0028 CE                XCH     A,R6
0029 33                RLC     A
002A CE                XCH     A,R6
002B         ?C0556:
002B D8F9              DJNZ    R0,?C0555
002D FF                MOV     R7,A
002E EE                MOV     A,R6
002F 5C                ANL     A,R4
0030 FE                MOV     R6,A
0031 EF                MOV     A,R7
0032 5D                ANL     A,R5
0033 4E                ORL     A,R6
0034 605D              JZ      ?C0272
                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1214
0036 900000      R     MOV     DPTR,#portnum
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B A3                INC     DPTR
003C E0                MOVX    A,@DPTR
003D 900000      R     MOV     DPTR,#UpdateConfigAUXKB
0040 93                MOVC    A,@A+DPTR
0041 FD                MOV     R5,A
0042 7B01              MOV     R3,#01H
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 87  

0044 120000      R     LCALL   _Send2PortNWait
0047 EF                MOV     A,R7
0048 7049              JNZ     ?C0272
                                           ; SOURCE LINE # 1215
                                           ; SOURCE LINE # 1216
004A 900000      R     MOV     DPTR,#index
004D E0                MOVX    A,@DPTR
004E 900000      R     MOV     DPTR,#UpdateConfigAUXKB
0051 93                MOVC    A,@A+DPTR
0052 B4F30A            CJNE    A,#0F3H,?C0275
                                           ; SOURCE LINE # 1217
                                           ; SOURCE LINE # 1218
0055 900000      R     MOV     DPTR,#portnum
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A 7800        E     MOV     R0,#LOW Save_Typematic
005C E6                MOV     A,@R0
                                           ; SOURCE LINE # 1219
005D 8014              SJMP    ?C0581
005F         ?C0275:
                                           ; SOURCE LINE # 1220
005F 900000      R     MOV     DPTR,#index
0062 E0                MOVX    A,@DPTR
0063 900000      R     MOV     DPTR,#UpdateConfigAUXKB
0066 93                MOVC    A,@A+DPTR
0067 B4ED0F            CJNE    A,#0EDH,?C0276
                                           ; SOURCE LINE # 1221
                                           ; SOURCE LINE # 1222
006A 900000      R     MOV     DPTR,#portnum
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F E500        E     MOV     A,Led_Data
0071 5407              ANL     A,#07H
0073         ?C0581:
0073 FD                MOV     R5,A
0074 7B01              MOV     R3,#01H
0076 120000      R     LCALL   _Send2PortNWait
                                           ; SOURCE LINE # 1223
0079         ?C0276:
                                           ; SOURCE LINE # 1224
0079 120000      R     LCALL   L?0664
007C C9                XCH     A,R1
007D E8                MOV     A,R0
007E C9                XCH     A,R1
007F 900000      R     MOV     DPTR,#index
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 7401              MOV     A,#01H
0086 C8                XCH     A,R0
0087 EF                MOV     A,R7
0088 C8                XCH     A,R0
0089 08                INC     R0
008A 8002              SJMP    ?C0558
008C         ?C0557:
008C C3                CLR     C
008D 33                RLC     A
008E         ?C0558:
008E D8FC              DJNZ    R0,?C0557
0090 F4                CPL     A
0091 57                ANL     A,@R1
0092 F7                MOV     @R1,A
                                           ; SOURCE LINE # 1225
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 88  

                                           ; SOURCE LINE # 1226
                                           ; SOURCE LINE # 1227
0093         ?C0272:
0093 900000      R     MOV     DPTR,#index
0096 E0                MOVX    A,@DPTR
0097 04                INC     A
0098 F0                MOVX    @DPTR,A
0099 020000      R     LJMP    ?C0270
                                           ; SOURCE LINE # 1228
009C         ?C0278:
009C 22                RET     
             ; FUNCTION _UpdateExtKeyboard (END)

             ; FUNCTION UpdateAUXKBDevice (BEGIN)
                                           ; SOURCE LINE # 1233
                                           ; SOURCE LINE # 1234
                                           ; SOURCE LINE # 1235
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0002 E6                MOV     A,@R0
0003 FF                MOV     R7,A
0004 120000      R     LCALL   _UpdateExtKeyboard
                                           ; SOURCE LINE # 1236
0007 E4                CLR     A
0008 FF                MOV     R7,A
0009 020000      R     LJMP    _SetAUXScanIndexHS
             ; FUNCTION UpdateAUXKBDevice (END)

             ; FUNCTION InitAUXDevice (BEGIN)
                                           ; SOURCE LINE # 1243
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1245
0000 120000      R     LCALL   L?0627
0003 E6                MOV     A,@R0
0004 30E61C            JNB     ACC.6,?C0280
                                           ; SOURCE LINE # 1246
                                           ; SOURCE LINE # 1247
0007 200003      E     JB      KeyboardDriverIn,$ + 6H
000A 020000      R     LJMP    ?C0285
                                           ; SOURCE LINE # 1248
                                           ; SOURCE LINE # 1249
000D 120000      R     LCALL   L?0665
0010 E6                MOV     A,@R0
0011 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0013 7007              JNZ     ?C0282
                                           ; SOURCE LINE # 1250
                                           ; SOURCE LINE # 1251
0015 E6                MOV     A,@R0
0016 FF                MOV     R7,A
0017 120000      R     LCALL   _ConfigExtKeyboard
                                           ; SOURCE LINE # 1252
001A 805D              SJMP    ?C0582
001C         ?C0282:
                                           ; SOURCE LINE # 1254
                                           ; SOURCE LINE # 1255
001C E6                MOV     A,@R0
001D FF                MOV     R7,A
001E 120000      R     LCALL   _UpdateExtKeyboard
                                           ; SOURCE LINE # 1256
0021         ?C0283:
                                           ; SOURCE LINE # 1257
                                           ; SOURCE LINE # 1258
0021 8056              SJMP    ?C0582
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 89  

                                           ; SOURCE LINE # 1260
                                           ; SOURCE LINE # 1262
                                           ; SOURCE LINE # 1263
0023         ?C0280:
                                           ; SOURCE LINE # 1265
                                           ; SOURCE LINE # 1266
0023 300061      E     JNB     MouseDriverIn,?C0286
                                           ; SOURCE LINE # 1267
                                           ; SOURCE LINE # 1268
0026 300020      E     JNB     MULPX_Multiplex,?C0287
                                           ; SOURCE LINE # 1269
                                           ; SOURCE LINE # 1270
0029 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
002B E6                MOV     A,@R0
002C FD                MOV     R5,A
002D 7FAA              MOV     R7,#0AAH
002F 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1271
0032 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0034 E6                MOV     A,@R0
0035 FD                MOV     R5,A
0036 E4                CLR     A
0037 FF                MOV     R7,A
0038 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1272
003B 120000      R     LCALL   L?0627
003E 74F7              MOV     A,#0F7H
0040 56                ANL     A,@R0
0041 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1273
0042 7F0A              MOV     R7,#0AH
0044 120000      R     LCALL   _SetPS2SkipScanTime
                                           ; SOURCE LINE # 1274
0047 805D              SJMP    ?C0285
0049         ?C0287:
                                           ; SOURCE LINE # 1276
                                           ; SOURCE LINE # 1277
0049 7800        E     MOV     R0,#LOW MS_DRIVER_TYPE
004B E6                MOV     A,@R0
004C FF                MOV     R7,A
004D 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
004F E6                MOV     A,@R0
0050 FD                MOV     R5,A
0051 120000      R     LCALL   _SetIntellimouse
0054 EF                MOV     A,R7
0055 6026              JZ      ?C0289
                                           ; SOURCE LINE # 1278
                                           ; SOURCE LINE # 1279
0057 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0059 E6                MOV     A,@R0
005A FF                MOV     R7,A
005B 120000      R     LCALL   _ReadMouseID
005E 7800        E     MOV     R0,#LOW MS_DRIVER_TYPE
0060 E6                MOV     A,@R0
0061 6F                XRL     A,R7
0062 700E              JNZ     ?C0290
                                           ; SOURCE LINE # 1280
                                           ; SOURCE LINE # 1281
0064 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0066 E6                MOV     A,@R0
0067 FF                MOV     R7,A
0068 120000      R     LCALL   _ConfigExtMouse
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 90  

006B EF                MOV     A,R7
006C 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
006E 600F              JZ      ?C0584
                                           ; SOURCE LINE # 1282
                                           ; SOURCE LINE # 1283
                                           ; SOURCE LINE # 1284
0070 802C              SJMP    ?C0585
0072         ?C0290:
                                           ; SOURCE LINE # 1291
                                           ; SOURCE LINE # 1292
0072 120000      R     LCALL   L?0627
0075 7404              MOV     A,#04H
0077 46                ORL     A,@R0
0078 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1293
0079         ?C0582:
0079 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
007B         ?C0583:
                                           ; SOURCE LINE # 1294
                                           ; SOURCE LINE # 1295
007B 8021              SJMP    ?C0585
007D         ?C0289:
                                           ; SOURCE LINE # 1297
                                           ; SOURCE LINE # 1298
007D 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
007F         ?C0584:
007F E6                MOV     A,@R0
0080 2400        E     ADD     A,#LOW AuxFlags
0082 F8                MOV     R0,A
0083 E4                CLR     A
0084 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1299
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1301
0085 801F              SJMP    ?C0285
0087         ?C0286:
                                           ; SOURCE LINE # 1303
                                           ; SOURCE LINE # 1304
0087 30001C      E     JNB     MULPX_Multiplex,?C0285
                                           ; SOURCE LINE # 1305
                                           ; SOURCE LINE # 1306
008A 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
008C E6                MOV     A,@R0
008D FD                MOV     R5,A
008E 7FAA              MOV     R7,#0AAH
0090 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1307
0093 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0095 E6                MOV     A,@R0
0096 FD                MOV     R5,A
0097 E4                CLR     A
0098 FF                MOV     R7,A
0099 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1308
009C 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
009E         ?C0585:
009E E6                MOV     A,@R0
009F 2400        E     ADD     A,#LOW AuxFlags
00A1 F8                MOV     R0,A
00A2 74F7              MOV     A,#0F7H
00A4 56                ANL     A,@R0
00A5 F6                MOV     @R0,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 91  

                                           ; SOURCE LINE # 1309
                                           ; SOURCE LINE # 1310
                                           ; SOURCE LINE # 1311
00A6         ?C0285:
                                           ; SOURCE LINE # 1312
00A6 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1313
00A9 E4                CLR     A
00AA FF                MOV     R7,A
00AB 020000      R     LJMP    _SetAUXScanIndexHS
             ; FUNCTION InitAUXDevice (END)

             ; FUNCTION TPOnlyLowLevelFunc (BEGIN)
                                           ; SOURCE LINE # 1321
                                           ; SOURCE LINE # 1322
                                           ; SOURCE LINE # 1325
0000 200003      E     JB      StartENAUXDevice,$ + 6H
0003 020000      R     LJMP    ?C0300
                                           ; SOURCE LINE # 1326
                                           ; SOURCE LINE # 1327
0006 C200        E     CLR     StartENAUXDevice
                                           ; SOURCE LINE # 1329
0008 7800        E     MOV     R0,#LOW MSPending
000A E6                MOV     A,@R0
000B 6433              XRL     A,#033H
000D 7003              JNZ     $ + 5H
000F 020000      R     LJMP    ?C0300
                                           ; SOURCE LINE # 1330
                                           ; SOURCE LINE # 1332
0012         ?C0299:
                                           ; SOURCE LINE # 1334
0012 7800        E     MOV     R0,#LOW TPACKCounter
0014 E6                MOV     A,@R0
0015 6003              JZ      $ + 5H
0017 020000      R     LJMP    ?C0300
                                           ; SOURCE LINE # 1335
                                           ; SOURCE LINE # 1337
001A         ?C0301:
                                           ; SOURCE LINE # 1339
001A 120000      E     LCALL   Hook_TPOnlyLowLevelFunc
                                           ; SOURCE LINE # 1341
001D 7800        E     MOV     R0,#LOW AUXInactiveCounter
001F E6                MOV     A,@R0
0020 6002              JZ      ?C0302
                                           ; SOURCE LINE # 1342
                                           ; SOURCE LINE # 1343
0022 16                DEC     @R0
0023 22                RET     
                                           ; SOURCE LINE # 1345
0024         ?C0302:
                                           ; SOURCE LINE # 1347
                                           ; SOURCE LINE # 1348
0024 900000      E     MOV     DPTR,#PSSTS1
0027 E0                MOVX    A,@DPTR
0028 30E203            JNB     ACC.2,$ + 6H
002B 020000      R     LJMP    ?C0300
002E 900000      E     MOV     DPTR,#PSSTS2
0031 E0                MOVX    A,@DPTR
0032 30E203            JNB     ACC.2,$ + 6H
0035 020000      R     LJMP    ?C0300
0038 900000      E     MOV     DPTR,#PSSTS3
003B E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 92  

003C 30E203            JNB     ACC.2,$ + 6H
003F 020000      R     LJMP    ?C0300
0042 20007B      E     JB      F_Service_PS2,?C0300
                                           ; SOURCE LINE # 1349
                                           ; SOURCE LINE # 1351
                                           ; SOURCE LINE # 1352
0045         ?C0303:
                                           ; SOURCE LINE # 1354
0045 7800        E     MOV     R0,#LOW AUXInactiveCounter
0047 E6                MOV     A,@R0
0048 7076              JNZ     ?C0300
                                           ; SOURCE LINE # 1355
                                           ; SOURCE LINE # 1356
004A 900000      R     MOV     DPTR,#index
004D F0                MOVX    @DPTR,A
004E         ?C0307:
004E 900000      R     MOV     DPTR,#index
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 C3                CLR     C
0054 9403              SUBB    A,#03H
0056 5068              JNC     ?C0300
                                           ; SOURCE LINE # 1357
                                           ; SOURCE LINE # 1358
0058 7400        E     MOV     A,#LOW AuxFlags2
005A 2F                ADD     A,R7
005B F8                MOV     R0,A
005C E6                MOV     A,@R0
005D 30E01C            JNB     ACC.0,?C0310
                                           ; SOURCE LINE # 1359
                                           ; SOURCE LINE # 1360
0060 7B01              MOV     R3,#01H
0062 7DF5              MOV     R5,#0F5H
0064 120000      R     LCALL   _Send2PortNWait
0067 EF                MOV     A,R7
0068 704D              JNZ     ?C0309
                                           ; SOURCE LINE # 1361
                                           ; SOURCE LINE # 1362
006A 120000      R     LCALL   L?0640
006D 74FE              MOV     A,#0FEH
006F 56                ANL     A,@R0
0070 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1363
0071 7400        E     MOV     A,#LOW AuxFlags2
0073 2F                ADD     A,R7
0074 F8                MOV     R0,A
0075 7402              MOV     A,#02H
0077 46                ORL     A,@R0
0078 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1364
                                           ; SOURCE LINE # 1365
0079 020000      R     LJMP    ?C0309
007C         ?C0310:
                                           ; SOURCE LINE # 1366
007C 120000      R     LCALL   L?0640
007F E6                MOV     A,@R0
0080 30E434            JNB     ACC.4,?C0309
                                           ; SOURCE LINE # 1367
                                           ; SOURCE LINE # 1368
0083 7B01              MOV     R3,#01H
0085 7DF4              MOV     R5,#0F4H
0087 120000      R     LCALL   _Send2PortNWait
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 93  

008A EF                MOV     A,R7
008B 702A              JNZ     ?C0309
                                           ; SOURCE LINE # 1369
                                           ; SOURCE LINE # 1370
008D 120000      R     LCALL   L?0641
0090 74EF              MOV     A,#0EFH
0092 56                ANL     A,@R0
0093 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1371
0094 7400        E     MOV     A,#LOW AuxFlags2
0096 2F                ADD     A,R7
0097 F8                MOV     R0,A
0098 7420              MOV     A,#020H
009A 46                ORL     A,@R0
009B F6                MOV     @R0,A
                                           ; SOURCE LINE # 1372
                                           ; SOURCE LINE # 1373
009C 120000      R     LCALL   L?0601
009F 120000      R     LCALL   L?0622
00A2 C083              PUSH    DPH
00A4 C082              PUSH    DPL
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 900000      R     MOV     DPTR,#index
00AB E0                MOVX    A,@DPTR
00AC 120000      R     LCALL   L?0611
00AF FE                MOV     R6,A
00B0 EF                MOV     A,R7
00B1 4E                ORL     A,R6
00B2 D082              POP     DPL
00B4 D083              POP     DPH
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1374
                                           ; SOURCE LINE # 1375
                                           ; SOURCE LINE # 1376
00B7         ?C0309:
00B7 900000      R     MOV     DPTR,#index
00BA E0                MOVX    A,@DPTR
00BB 04                INC     A
00BC F0                MOVX    @DPTR,A
00BD 020000      R     LJMP    ?C0307
                                           ; SOURCE LINE # 1377
                                           ; SOURCE LINE # 1378
                                           ; SOURCE LINE # 1379
00C0         ?C0300:
00C0 22                RET     
             ; FUNCTION TPOnlyLowLevelFunc (END)

             ; FUNCTION ExternalAUXLowLevelFunc (BEGIN)
                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1385
                                           ; SOURCE LINE # 1388
0000 200003      E     JB      StartENAUXDevice,$ + 6H
0003 020000      R     LJMP    ?C0317
                                           ; SOURCE LINE # 1389
                                           ; SOURCE LINE # 1390
0006 C200        E     CLR     StartENAUXDevice
                                           ; SOURCE LINE # 1392
0008 7800        E     MOV     R0,#LOW MSPending
000A E6                MOV     A,@R0
000B 6433              XRL     A,#033H
000D 7003              JNZ     $ + 5H
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 94  

000F 020000      R     LJMP    ?C0317
                                           ; SOURCE LINE # 1393
                                           ; SOURCE LINE # 1395
0012         ?C0316:
                                           ; SOURCE LINE # 1397
0012 120000      R     LCALL   EnableAUXDevice
                                           ; SOURCE LINE # 1399
0015 7800        E     MOV     R0,#LOW AUXInactiveCounter
0017 E6                MOV     A,@R0
0018 6003              JZ      $ + 5H
001A 020000      R     LJMP    ?C0317
                                           ; SOURCE LINE # 1400
                                           ; SOURCE LINE # 1402
001D         ?C0318:
                                           ; SOURCE LINE # 1404
001D 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
001F E6                MOV     A,@R0
0020 6003              JZ      $ + 5H
0022 020000      R     LJMP    ?C0317
                                           ; SOURCE LINE # 1405
                                           ; SOURCE LINE # 1407
0025         ?C0319:
                                           ; SOURCE LINE # 1409
0025 900000      E     MOV     DPTR,#PSSTS1
0028 E0                MOVX    A,@DPTR
0029 20E211            JB      ACC.2,?C0321
002C 900000      E     MOV     DPTR,#PSSTS2
002F E0                MOVX    A,@DPTR
0030 20E20A            JB      ACC.2,?C0321
0033 900000      E     MOV     DPTR,#PSSTS3
0036 E0                MOVX    A,@DPTR
0037 20E203            JB      ACC.2,?C0321
003A 30004E      E     JNB     PS2StartBit,?C0320
003D         ?C0321:
                                           ; SOURCE LINE # 1410
                                           ; SOURCE LINE # 1411
003D 7800        E     MOV     R0,#LOW AuxScanWDT
003F 06                INC     @R0
                                           ; SOURCE LINE # 1413
0040 E6                MOV     A,@R0
0041 D3                SETB    C
0042 9464              SUBB    A,#064H
0044 5003              JNC     $ + 5H
0046 020000      R     LJMP    ?C0317
                                           ; SOURCE LINE # 1414
                                           ; SOURCE LINE # 1415
0049 E4                CLR     A
004A F6                MOV     @R0,A
                                           ; SOURCE LINE # 1416
004B C200        E     CLR     PS2StartBit
                                           ; SOURCE LINE # 1418
004D 120000      R     LCALL   AUXDevicePlugOutClearVariables
                                           ; SOURCE LINE # 1419
0050 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1421
0053 900000      E     MOV     DPTR,#PSSTS1
0056 E0                MOVX    A,@DPTR
0057 20E205            JB      ACC.2,?C0324
005A 7800        E     MOV     R0,#LOW PS2_SSIRQ_Channel
005C E6                MOV     A,@R0
005D 7005              JNZ     ?C0323
005F         ?C0324:
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 95  

                                           ; SOURCE LINE # 1422
                                           ; SOURCE LINE # 1423
005F 900000      E     MOV     DPTR,#PSCTL1
                                           ; SOURCE LINE # 1424
0062 8023              SJMP    ?C0587
0064         ?C0323:
                                           ; SOURCE LINE # 1425
0064 900000      E     MOV     DPTR,#PSSTS2
0067 E0                MOVX    A,@DPTR
0068 20E206            JB      ACC.2,?C0327
006B 7800        E     MOV     R0,#LOW PS2_SSIRQ_Channel
006D E6                MOV     A,@R0
006E B40105            CJNE    A,#01H,?C0326
0071         ?C0327:
                                           ; SOURCE LINE # 1426
                                           ; SOURCE LINE # 1427
0071 900000      E     MOV     DPTR,#PSCTL2
0074         ?C0586:
                                           ; SOURCE LINE # 1428
0074 8011              SJMP    ?C0587
0076         ?C0326:
                                           ; SOURCE LINE # 1429
0076 900000      E     MOV     DPTR,#PSSTS3
0079 E0                MOVX    A,@DPTR
007A 20E207            JB      ACC.2,?C0330
007D 7800        E     MOV     R0,#LOW PS2_SSIRQ_Channel
007F E6                MOV     A,@R0
0080 6402              XRL     A,#02H
0082 7057              JNZ     ?C0317
0084         ?C0330:
                                           ; SOURCE LINE # 1430
                                           ; SOURCE LINE # 1431
0084 900000      E     MOV     DPTR,#PSCTL3
0087         ?C0587:
0087 7411              MOV     A,#011H
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1432
                                           ; SOURCE LINE # 1433
008A 22                RET     
                                           ; SOURCE LINE # 1435
008B         ?C0320:
                                           ; SOURCE LINE # 1437
                                           ; SOURCE LINE # 1438
008B E4                CLR     A
008C 7800        E     MOV     R0,#LOW AuxScanWDT
008E F6                MOV     @R0,A
                                           ; SOURCE LINE # 1440
008F 900000      E     MOV     DPTR,#ISR2
0092 E0                MOVX    A,@DPTR
;---- Variable 'ISR2Temp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1441
0093 541C              ANL     A,#01CH
0095 FF                MOV     R7,A
                                           ; SOURCE LINE # 1442
0096 7043              JNZ     ?C0317
                                           ; SOURCE LINE # 1443
                                           ; SOURCE LINE # 1445
0098         ?C0332:
                                           ; SOURCE LINE # 1447
                                           ; SOURCE LINE # 1449
0098 200040      E     JB      F_Service_PS2,?C0317
                                           ; SOURCE LINE # 1450
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 96  

                                           ; SOURCE LINE # 1452
009B         ?C0334:
                                           ; SOURCE LINE # 1454
                                           ; SOURCE LINE # 1455
009B 120000      R     LCALL   PS2DeviceInactive
                                           ; SOURCE LINE # 1456
                                           ; SOURCE LINE # 1457
                                           ; SOURCE LINE # 1458
009E         ?C0331:
                                           ; SOURCE LINE # 1460
009E 120000      R     LCALL   PollingAUXDeviceCenter
                                           ; SOURCE LINE # 1462
00A1 7800        E     MOV     R0,#LOW ScanAUXStepIndex
00A3 E6                MOV     A,@R0
00A4 120000      E     LCALL   ?C?CCASE
00A7 0000        R     DW      ?C0348
00A9 A0                DB      0A0H
00AA 0000        R     DW      ?C0348
00AC A1                DB      0A1H
00AD 0000        R     DW      ?C0348
00AF A2                DB      0A2H
00B0 0000        R     DW      ?C0342
00B2 B0                DB      0B0H
00B3 0000        R     DW      ?C0342
00B5 B1                DB      0B1H
00B6 0000        R     DW      ?C0342
00B8 B2                DB      0B2H
00B9 0000        R     DW      ?C0345
00BB C0                DB      0C0H
00BC 0000        R     DW      ?C0345
00BE C1                DB      0C1H
00BF 0000        R     DW      ?C0345
00C1 C2                DB      0C2H
00C2 0000        R     DW      ?C0339
00C4 F0                DB      0F0H
00C5 0000        R     DW      ?C0339
00C7 F1                DB      0F1H
00C8 0000        R     DW      ?C0339
00CA F2                DB      0F2H
00CB 0000              DW      00H
00CD 0000        R     DW      ?C0317
                                           ; SOURCE LINE # 1463
                                           ; SOURCE LINE # 1464
                                           ; SOURCE LINE # 1465
                                           ; SOURCE LINE # 1466
00CF         ?C0339:
                                           ; SOURCE LINE # 1467
00CF 020000      R     LJMP    ScanAUXPortX
                                           ; SOURCE LINE # 1468
                                           ; SOURCE LINE # 1470
                                           ; SOURCE LINE # 1471
                                           ; SOURCE LINE # 1472
00D2         ?C0342:
                                           ; SOURCE LINE # 1473
00D2 020000      R     LJMP    CheckAUXDeviceType
                                           ; SOURCE LINE # 1474
                                           ; SOURCE LINE # 1476
                                           ; SOURCE LINE # 1477
                                           ; SOURCE LINE # 1478
00D5         ?C0345:
                                           ; SOURCE LINE # 1479
00D5 020000      R     LJMP    InitAUXDevice
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 97  

                                           ; SOURCE LINE # 1480
                                           ; SOURCE LINE # 1482
                                           ; SOURCE LINE # 1483
                                           ; SOURCE LINE # 1484
00D8         ?C0348:
                                           ; SOURCE LINE # 1485
00D8 120000      R     LCALL   UpdateAUXKBDevice
                                           ; SOURCE LINE # 1486
                                           ; SOURCE LINE # 1488
                                           ; SOURCE LINE # 1489
                                           ; SOURCE LINE # 1490
                                           ; SOURCE LINE # 1492
                                           ; SOURCE LINE # 1493
                                           ; SOURCE LINE # 1494
                                           ; SOURCE LINE # 1496
                                           ; SOURCE LINE # 1497
                                           ; SOURCE LINE # 1498
                                           ; SOURCE LINE # 1500
                                           ; SOURCE LINE # 1501
                                           ; SOURCE LINE # 1502
                                           ; SOURCE LINE # 1504
                                           ; SOURCE LINE # 1505
                                           ; SOURCE LINE # 1506
                                           ; SOURCE LINE # 1508
                                           ; SOURCE LINE # 1509
                                           ; SOURCE LINE # 1510
                                           ; SOURCE LINE # 1512
                                           ; SOURCE LINE # 1513
00DB         ?C0317:
00DB 22                RET     
             ; FUNCTION ExternalAUXLowLevelFunc (END)

             ; FUNCTION ScanAUXDeviceStep (BEGIN)
                                           ; SOURCE LINE # 1518
                                           ; SOURCE LINE # 1519
                                           ; SOURCE LINE # 1521
0000 020000      R     LJMP    TPOnlyLowLevelFunc
             ; FUNCTION ScanAUXDeviceStep (END)

             ; FUNCTION ScanAUXPortX (BEGIN)
                                           ; SOURCE LINE # 1530
                                           ; SOURCE LINE # 1531
                                           ; SOURCE LINE # 1532
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0002 E6                MOV     A,@R0
0003 F4                CPL     A
0004 7074              JNZ     ?C0384
                                           ; SOURCE LINE # 1533
                                           ; SOURCE LINE # 1534
0006 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0008 E6                MOV     A,@R0
0009 700C              JNZ     ?C0367
                                           ; SOURCE LINE # 1535
                                           ; SOURCE LINE # 1536
000B 120000      R     LCALL   L?0644
000E 7029              JNZ     ?C0589
0010 120000      R     LCALL   L?0646
0013 6029              JZ      ?C0370
0015         ?C0369:
                                           ; SOURCE LINE # 1537
                                           ; SOURCE LINE # 1538
                                           ; SOURCE LINE # 1539
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 98  

                                           ; SOURCE LINE # 1540
0015 8022              SJMP    ?C0589
0017         ?C0367:
                                           ; SOURCE LINE # 1541
0017 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0019 E6                MOV     A,@R0
001A B4010C            CJNE    A,#01H,?C0371
                                           ; SOURCE LINE # 1542
                                           ; SOURCE LINE # 1543
001D 120000      R     LCALL   L?0648
0020 7005              JNZ     ?C0373
0022 120000      R     LCALL   L?0650
0025 6017              JZ      ?C0370
0027         ?C0373:
                                           ; SOURCE LINE # 1544
                                           ; SOURCE LINE # 1545
0027         ?C0588:
                                           ; SOURCE LINE # 1546
                                           ; SOURCE LINE # 1547
0027 8010              SJMP    ?C0589
0029         ?C0371:
                                           ; SOURCE LINE # 1548
0029 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
002B E6                MOV     A,@R0
002C B4020F            CJNE    A,#02H,?C0370
                                           ; SOURCE LINE # 1549
                                           ; SOURCE LINE # 1550
002F 120000      R     LCALL   L?0652
0032 7005              JNZ     ?C0377
0034 120000      R     LCALL   L?0654
0037 6005              JZ      ?C0370
0039         ?C0377:
                                           ; SOURCE LINE # 1551
                                           ; SOURCE LINE # 1552
0039         ?C0589:
0039 E4                CLR     A
003A FF                MOV     R7,A
003B 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 1553
                                           ; SOURCE LINE # 1554
003E         ?C0370:
                                           ; SOURCE LINE # 1556
003E 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0040 E6                MOV     A,@R0
0041 7007              JNZ     ?C0378
                                           ; SOURCE LINE # 1557
                                           ; SOURCE LINE # 1558
0043 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0045 E6                MOV     A,@R0
0046 24D0              ADD     A,#0D0H
                                           ; SOURCE LINE # 1559
0048 802D              SJMP    ?C0590
004A         ?C0378:
                                           ; SOURCE LINE # 1561
                                           ; SOURCE LINE # 1562
004A 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 1563
004D 120000      R     LCALL   L?0616
0050 E6                MOV     A,@R0
0051 30E008            JNB     ACC.0,?C0380
                                           ; SOURCE LINE # 1564
                                           ; SOURCE LINE # 1565
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 99  

0054 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0056 E6                MOV     A,@R0
0057 FF                MOV     R7,A
0058 7DF5              MOV     R5,#0F5H
                                           ; SOURCE LINE # 1566
005A 8013              SJMP    ?C0592
005C         ?C0380:
                                           ; SOURCE LINE # 1567
005C 120000      R     LCALL   L?0616
005F E6                MOV     A,@R0
0060 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0062 30E406            JNB     ACC.4,?C0382
                                           ; SOURCE LINE # 1568
                                           ; SOURCE LINE # 1569
0065 E6                MOV     A,@R0
0066 FF                MOV     R7,A
0067 7DF4              MOV     R5,#0F4H
0069         ?C0591:
                                           ; SOURCE LINE # 1570
0069 8004              SJMP    ?C0592
006B         ?C0382:
                                           ; SOURCE LINE # 1572
                                           ; SOURCE LINE # 1573
006B E6                MOV     A,@R0
006C FF                MOV     R7,A
006D 7DF1              MOV     R5,#0F1H
006F         ?C0592:
006F 120000      R     LCALL   _ECSend2Port
                                           ; SOURCE LINE # 1574
0072         ?C0381:
                                           ; SOURCE LINE # 1575
0072 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0074 E6                MOV     A,@R0
0075 24E0              ADD     A,#0E0H
0077         ?C0590:
0077 7900        E     MOV     R1,#LOW ScanAUXStepIndex
0079 F7                MOV     @R1,A
                                           ; SOURCE LINE # 1576
                                           ; SOURCE LINE # 1577
                                           ; SOURCE LINE # 1578
007A         ?C0384:
007A 22                RET     
             ; FUNCTION ScanAUXPortX (END)

             ; FUNCTION EnableAUXDevice (BEGIN)
                                           ; SOURCE LINE # 1583
                                           ; SOURCE LINE # 1584
                                           ; SOURCE LINE # 1585
0000 7800        E     MOV     R0,#LOW AUXInactiveCounter
0002 E6                MOV     A,@R0
0003 6007              JZ      ?C0385
                                           ; SOURCE LINE # 1586
                                           ; SOURCE LINE # 1587
0005 16                DEC     @R0
0006 E6                MOV     A,@R0
0007 7003              JNZ     ?C0385
                                           ; SOURCE LINE # 1588
                                           ; SOURCE LINE # 1589
0009 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1590
                                           ; SOURCE LINE # 1591
000C         ?C0385:
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 100 

                                           ; SOURCE LINE # 1593
000C 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
000E E6                MOV     A,@R0
000F 6001              JZ      ?C0388
                                           ; SOURCE LINE # 1594
                                           ; SOURCE LINE # 1595
0011 16                DEC     @R0
                                           ; SOURCE LINE # 1596
                                           ; SOURCE LINE # 1597
0012         ?C0388:
0012 22                RET     
             ; FUNCTION EnableAUXDevice (END)

             ; FUNCTION _bExtAUXTimeOutCheck (BEGIN)
                                           ; SOURCE LINE # 1604
;---- Variable 'channel' assigned to Register 'R7' ----
;---- Variable 'p_mode' assigned to Register 'R1' ----
0000 C9                XCH     A,R1
0001 ED                MOV     A,R5
0002 C9                XCH     A,R1
                                           ; SOURCE LINE # 1605
                                           ; SOURCE LINE # 1607
;---- Variable 'result' assigned to Register 'R6' ----
0003 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 1609
0005 C28E              CLR     TR1
                                           ; SOURCE LINE # 1610
0007 C2AB              CLR     ET1
                                           ; SOURCE LINE # 1611
0009 00                NOP     
                                           ; SOURCE LINE # 1612
000A 00                NOP     
                                           ; SOURCE LINE # 1613
000B 00                NOP     
                                           ; SOURCE LINE # 1614
000C 00                NOP     
                                           ; SOURCE LINE # 1615
                                           ; SOURCE LINE # 1616
                                           ; SOURCE LINE # 1617
                                           ; SOURCE LINE # 1618
000D 120000      R     LCALL   L?0660
0010         ?C0391:
                                           ; SOURCE LINE # 1651
                                           ; SOURCE LINE # 1657
0010 120000      R     LCALL   L?0656
0013 120000      R     LCALL   L?0619
0016 E0                MOVX    A,@DPTR
0017 FD                MOV     R5,A
0018 120000      R     LCALL   L?0610
001B FC                MOV     R4,A
001C ED                MOV     A,R5
001D 5C                ANL     A,R4
001E 6072              JZ      ?C0389
                                           ; SOURCE LINE # 1658
                                           ; SOURCE LINE # 1659
0020 E9                MOV     A,R1
0021 6401              XRL     A,#01H
0023 7037              JNZ     ?C0393
                                           ; SOURCE LINE # 1660
                                           ; SOURCE LINE # 1661
0025 900000      E     MOV     DPTR,#PS2DataPinStatus
0028 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 101 

0029         ?C0394:
                                           ; SOURCE LINE # 1662
                                           ; SOURCE LINE # 1667
0029 EF                MOV     A,R7
002A B40209            CJNE    A,#02H,?C0397
                                           ; SOURCE LINE # 1668
                                           ; SOURCE LINE # 1672
002D 900000      E     MOV     DPTR,#GPDRF
0030 E0                MOVX    A,@DPTR
0031 30E519            JNB     ACC.5,?C0399
                                           ; SOURCE LINE # 1673
                                           ; SOURCE LINE # 1674
0034 8026              SJMP    ?C0393
                                           ; SOURCE LINE # 1675
                                           ; SOURCE LINE # 1676
0036         ?C0397:
                                           ; SOURCE LINE # 1677
0036 EF                MOV     A,R7
0037 B40109            CJNE    A,#01H,?C0400
                                           ; SOURCE LINE # 1678
                                           ; SOURCE LINE # 1682
003A 900000      E     MOV     DPTR,#GPDRF
003D E0                MOVX    A,@DPTR
003E 30E30C            JNB     ACC.3,?C0399
                                           ; SOURCE LINE # 1683
                                           ; SOURCE LINE # 1684
0041 8019              SJMP    ?C0393
                                           ; SOURCE LINE # 1685
                                           ; SOURCE LINE # 1686
0043         ?C0400:
                                           ; SOURCE LINE # 1687
0043 EF                MOV     A,R7
0044 7007              JNZ     ?C0399
                                           ; SOURCE LINE # 1688
                                           ; SOURCE LINE # 1692
0046 900000      E     MOV     DPTR,#GPDRF
0049 E0                MOVX    A,@DPTR
004A 20E10F            JB      ACC.1,?C0393
                                           ; SOURCE LINE # 1693
                                           ; SOURCE LINE # 1694
                                           ; SOURCE LINE # 1695
                                           ; SOURCE LINE # 1696
                                           ; SOURCE LINE # 1698
                                           ; SOURCE LINE # 1700
004D         ?C0399:
                                           ; SOURCE LINE # 1705
004D E4                CLR     A
004E 900000      E     MOV     DPTR,#WNCKR
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1706
0052 900000      E     MOV     DPTR,#PS2DataPinStatus
0055 E0                MOVX    A,@DPTR
0056 04                INC     A
0057 F0                MOVX    @DPTR,A
0058 E0                MOVX    A,@DPTR
0059 B405CD            CJNE    A,#05H,?C0394
                                           ; SOURCE LINE # 1707
005C         ?C0393:
                                           ; SOURCE LINE # 1715
005C EF                MOV     A,R7
005D 120000      R     LCALL   L?0607
0060 120000      R     LCALL   L?0620
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 102 

0063 7411              MOV     A,#011H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1716
0066 EF                MOV     A,R7
0067 75F00D            MOV     B,#0DH
006A A4                MUL     AB
006B 2400        R     ADD     A,#LOW asPS2Struct+06H
006D F582              MOV     DPL,A
006F E4                CLR     A
0070 3400        R     ADDC    A,#HIGH asPS2Struct+06H
0072 120000      R     LCALL   L?0619
0075 E0                MOVX    A,@DPTR
0076 7800        E     MOV     R0,#LOW PS2IFAck
0078 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1717
0079 E4                CLR     A
007A FE                MOV     R6,A
                                           ; SOURCE LINE # 1719
007B 120000      R     LCALL   L?0610
007E FD                MOV     R5,A
007F 120000      R     LCALL   L?0656
0082 F583              MOV     DPH,A
0084 E4                CLR     A
0085 93                MOVC    A,@A+DPTR
0086 FA                MOV     R2,A
0087 7401              MOV     A,#01H
0089 93                MOVC    A,@A+DPTR
008A F582              MOV     DPL,A
008C 8A83              MOV     DPH,R2
008E ED                MOV     A,R5
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1720
0090 8006              SJMP    ?C0390
                                           ; SOURCE LINE # 1721
                                           ; SOURCE LINE # 1722
0092         ?C0389:
0092 208F03            JB      TF1,$ + 6H
0095 020000      R     LJMP    ?C0391
0098         ?C0390:
                                           ; SOURCE LINE # 1724
                                           ; SOURCE LINE # 1725
                                           ; SOURCE LINE # 1726
0098 120000      R     LCALL   L?0633
                                           ; SOURCE LINE # 1727
009B CF                XCH     A,R7
009C EE                MOV     A,R6
009D CF                XCH     A,R7
                                           ; SOURCE LINE # 1728
009E         ?C0406:
009E 22                RET     
             ; FUNCTION _bExtAUXTimeOutCheck (END)

             ; FUNCTION _ConfigExtKeyboard (BEGIN)
                                           ; SOURCE LINE # 1735
0000 900000      R     MOV     DPTR,#portnum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1736
                                           ; SOURCE LINE # 1739
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 103 

0008         ?C0407:
0008 900000      R     MOV     DPTR,#index
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D C3                CLR     C
000E 9403              SUBB    A,#03H
0010 504A              JNC     ?C0414
                                           ; SOURCE LINE # 1740
                                           ; SOURCE LINE # 1741
0012 900000      R     MOV     DPTR,#portnum
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EE                MOV     A,R6
0018 900000      R     MOV     DPTR,#ConfigAUXKB
001B 93                MOVC    A,@A+DPTR
001C FD                MOV     R5,A
001D 7B01              MOV     R3,#01H
001F 120000      R     LCALL   _Send2PortNWait
0022 EF                MOV     A,R7
0023 702F              JNZ     ?C0409
                                           ; SOURCE LINE # 1742
                                           ; SOURCE LINE # 1743
0025 900000      R     MOV     DPTR,#index
0028 E0                MOVX    A,@DPTR
0029 900000      R     MOV     DPTR,#ConfigAUXKB
002C 93                MOVC    A,@A+DPTR
002D B4F30A            CJNE    A,#0F3H,?C0411
                                           ; SOURCE LINE # 1744
                                           ; SOURCE LINE # 1745
0030 900000      R     MOV     DPTR,#portnum
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 7800        E     MOV     R0,#LOW Save_Typematic
0037 E6                MOV     A,@R0
                                           ; SOURCE LINE # 1746
0038 8014              SJMP    ?C0593
003A         ?C0411:
                                           ; SOURCE LINE # 1747
003A 900000      R     MOV     DPTR,#index
003D E0                MOVX    A,@DPTR
003E 900000      R     MOV     DPTR,#ConfigAUXKB
0041 93                MOVC    A,@A+DPTR
0042 B4ED0F            CJNE    A,#0EDH,?C0409
                                           ; SOURCE LINE # 1748
                                           ; SOURCE LINE # 1749
0045 900000      R     MOV     DPTR,#portnum
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A E500        E     MOV     A,Led_Data
004C 5407              ANL     A,#07H
004E         ?C0593:
004E FD                MOV     R5,A
004F 7B01              MOV     R3,#01H
0051 120000      R     LCALL   _Send2PortNWait
                                           ; SOURCE LINE # 1750
                                           ; SOURCE LINE # 1751
                                           ; SOURCE LINE # 1752
0054         ?C0409:
0054 900000      R     MOV     DPTR,#index
0057 E0                MOVX    A,@DPTR
0058 04                INC     A
0059 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 104 

005A 80AC              SJMP    ?C0407
                                           ; SOURCE LINE # 1753
005C         ?C0414:
005C 22                RET     
             ; FUNCTION _ConfigExtKeyboard (END)

             ; FUNCTION _EnableMouse (BEGIN)
                                           ; SOURCE LINE # 1759
;---- Variable 'port' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1760
                                           ; SOURCE LINE # 1762
0000 7B01              MOV     R3,#01H
0002 7DF4              MOV     R5,#0F4H
0004 120000      R     LCALL   _Send2PortNWait
0007 EF                MOV     A,R7
0008 7007              JNZ     ?C0415
                                           ; SOURCE LINE # 1763
                                           ; SOURCE LINE # 1764
000A 900000      R     MOV     DPTR,#resault
000D 04                INC     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1765
000F 8005              SJMP    ?C0416
0011         ?C0415:
                                           ; SOURCE LINE # 1767
                                           ; SOURCE LINE # 1768
0011 E4                CLR     A
0012 900000      R     MOV     DPTR,#resault
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1769
0016         ?C0416:
                                           ; SOURCE LINE # 1770
0016 900000      R     MOV     DPTR,#resault
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
                                           ; SOURCE LINE # 1771
001B         ?C0417:
001B 22                RET     
             ; FUNCTION _EnableMouse (END)

             ; FUNCTION _SetResolution (BEGIN)
                                           ; SOURCE LINE # 1777
0000 900000      R     MOV     DPTR,#resolution
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#port
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1778
                                           ; SOURCE LINE # 1780
000A 7B01              MOV     R3,#01H
000C 7DE8              MOV     R5,#0E8H
000E 120000      R     LCALL   _Send2PortNWait
0011 EF                MOV     A,R7
0012 7017              JNZ     ?C0418
                                           ; SOURCE LINE # 1781
                                           ; SOURCE LINE # 1782
0014 900000      R     MOV     DPTR,#port
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 105 

001B FD                MOV     R5,A
001C 7B01              MOV     R3,#01H
001E 120000      R     LCALL   _Send2PortNWait
0021 EF                MOV     A,R7
0022 7007              JNZ     ?C0594
                                           ; SOURCE LINE # 1783
                                           ; SOURCE LINE # 1784
0024 900000      R     MOV     DPTR,#resault
0027 04                INC     A
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1785
0029 8005              SJMP    ?C0421
002B         ?C0418:
                                           ; SOURCE LINE # 1792
                                           ; SOURCE LINE # 1793
002B         ?C0594:
002B E4                CLR     A
002C 900000      R     MOV     DPTR,#resault
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1794
0030         ?C0421:
                                           ; SOURCE LINE # 1795
0030 900000      R     MOV     DPTR,#resault
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
                                           ; SOURCE LINE # 1796
0035         ?C0422:
0035 22                RET     
             ; FUNCTION _SetResolution (END)

             ; FUNCTION _Setsamplerate (BEGIN)
                                           ; SOURCE LINE # 1802
0000 900000      R     MOV     DPTR,#samplerate
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#port
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1803
                                           ; SOURCE LINE # 1805
000A 7B01              MOV     R3,#01H
000C 7DF3              MOV     R5,#0F3H
000E 120000      R     LCALL   _Send2PortNWait
0011 EF                MOV     A,R7
0012 7017              JNZ     ?C0423
                                           ; SOURCE LINE # 1806
                                           ; SOURCE LINE # 1807
0014 900000      R     MOV     DPTR,#port
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B FD                MOV     R5,A
001C 7B01              MOV     R3,#01H
001E 120000      R     LCALL   _Send2PortNWait
0021 EF                MOV     A,R7
0022 7007              JNZ     ?C0595
                                           ; SOURCE LINE # 1808
                                           ; SOURCE LINE # 1809
0024 900000      R     MOV     DPTR,#resault
0027 04                INC     A
0028 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 106 

                                           ; SOURCE LINE # 1810
0029 8005              SJMP    ?C0426
002B         ?C0423:
                                           ; SOURCE LINE # 1817
                                           ; SOURCE LINE # 1818
002B         ?C0595:
002B E4                CLR     A
002C 900000      R     MOV     DPTR,#resault
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1819
0030         ?C0426:
                                           ; SOURCE LINE # 1820
0030 900000      R     MOV     DPTR,#resault
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
                                           ; SOURCE LINE # 1821
0035         ?C0427:
0035 22                RET     
             ; FUNCTION _Setsamplerate (END)

             ; FUNCTION _SetIntellimouse (BEGIN)
                                           ; SOURCE LINE # 1836
0000 900000      R     MOV     DPTR,#port
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#DriverType
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1837
                                           ; SOURCE LINE # 1840
000A 900000      R     MOV     DPTR,#result
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1842
0010 EF                MOV     A,R7
0011 6403              XRL     A,#03H
0013 7029              JNZ     ?C0428
                                           ; SOURCE LINE # 1843
                                           ; SOURCE LINE # 1844
0015 900000      R     MOV     DPTR,#index
0018 F0                MOVX    @DPTR,A
0019         ?C0429:
0019 900000      R     MOV     DPTR,#index
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E C3                CLR     C
001F 9403              SUBB    A,#03H
0021 5050              JNC     ?C0433
                                           ; SOURCE LINE # 1845
                                           ; SOURCE LINE # 1846
0023 900000      R     MOV     DPTR,#port
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EE                MOV     A,R6
0029 900000      R     MOV     DPTR,#Intellimouse_4Byte
002C 93                MOVC    A,@A+DPTR
002D FD                MOV     R5,A
002E 120000      R     LCALL   _Setsamplerate
0031 EF                MOV     A,R7
0032 7002              JNZ     ?C0431
                                           ; SOURCE LINE # 1847
                                           ; SOURCE LINE # 1848
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 107 

                                           ; SOURCE LINE # 1849
0034 802F              SJMP    ?C0596
                                           ; SOURCE LINE # 1850
                                           ; SOURCE LINE # 1851
0036         ?C0431:
0036 900000      R     MOV     DPTR,#index
0039 E0                MOVX    A,@DPTR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
003C 80DB              SJMP    ?C0429
                                           ; SOURCE LINE # 1852
003E         ?C0428:
                                           ; SOURCE LINE # 1853
003E 900000      R     MOV     DPTR,#DriverType
0041 E0                MOVX    A,@DPTR
0042 6404              XRL     A,#04H
0044 702D              JNZ     ?C0433
                                           ; SOURCE LINE # 1854
                                           ; SOURCE LINE # 1855
0046 900000      R     MOV     DPTR,#index
0049 F0                MOVX    @DPTR,A
004A         ?C0435:
004A 900000      R     MOV     DPTR,#index
004D E0                MOVX    A,@DPTR
004E FE                MOV     R6,A
004F C3                CLR     C
0050 9403              SUBB    A,#03H
0052 501F              JNC     ?C0433
                                           ; SOURCE LINE # 1856
                                           ; SOURCE LINE # 1857
0054 900000      R     MOV     DPTR,#port
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EE                MOV     A,R6
005A 900000      R     MOV     DPTR,#Intellimouse_5Byte
005D 93                MOVC    A,@A+DPTR
005E FD                MOV     R5,A
005F 120000      R     LCALL   _Setsamplerate
0062 EF                MOV     A,R7
0063 7006              JNZ     ?C0437
                                           ; SOURCE LINE # 1858
                                           ; SOURCE LINE # 1859
0065         ?C0596:
0065 900000      R     MOV     DPTR,#result
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1860
0069 8008              SJMP    ?C0433
                                           ; SOURCE LINE # 1861
                                           ; SOURCE LINE # 1862
006B         ?C0437:
006B 900000      R     MOV     DPTR,#index
006E E0                MOVX    A,@DPTR
006F 04                INC     A
0070 F0                MOVX    @DPTR,A
0071 80D7              SJMP    ?C0435
                                           ; SOURCE LINE # 1863
0073         ?C0433:
                                           ; SOURCE LINE # 1864
0073 900000      R     MOV     DPTR,#result
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
                                           ; SOURCE LINE # 1865
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 108 

0078         ?C0439:
0078 22                RET     
             ; FUNCTION _SetIntellimouse (END)

             ; FUNCTION _ReadMouseID (BEGIN)
                                           ; SOURCE LINE # 1867
;---- Variable 'port' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1868
                                           ; SOURCE LINE # 1869
0000 7B02              MOV     R3,#02H
0002 7DF2              MOV     R5,#0F2H
0004 120000      R     LCALL   _Send2PortNWait
0007 EF                MOV     A,R7
0008 7005              JNZ     ?C0440
                                           ; SOURCE LINE # 1870
                                           ; SOURCE LINE # 1871
000A 7800        E     MOV     R0,#LOW PS2IFAck
000C E6                MOV     A,@R0
000D FF                MOV     R7,A
000E 22                RET     
                                           ; SOURCE LINE # 1872
000F         ?C0440:
                                           ; SOURCE LINE # 1873
000F 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 1874
0011         ?C0441:
0011 22                RET     
             ; FUNCTION _ReadMouseID (END)

             ; FUNCTION _ConfigExtMouse (BEGIN)
                                           ; SOURCE LINE # 1879
0000 900000      R     MOV     DPTR,#portnum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1880
                                           ; SOURCE LINE # 1882
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1884
0008 7800        E     MOV     R0,#LOW TPResolution
000A E6                MOV     A,@R0
000B FD                MOV     R5,A
000C 120000      R     LCALL   _SetResolution
000F EF                MOV     A,R7
0010 6011              JZ      ?C0442
                                           ; SOURCE LINE # 1885
                                           ; SOURCE LINE # 1886
0012 900000      R     MOV     DPTR,#portnum
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 120000      R     LCALL   _EnableMouse
001A EF                MOV     A,R7
001B 6006              JZ      ?C0442
                                           ; SOURCE LINE # 1887
                                           ; SOURCE LINE # 1888
001D 900000      R     MOV     DPTR,#result
0020 7401              MOV     A,#01H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1889
                                           ; SOURCE LINE # 1890
0023         ?C0442:
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 109 

                                           ; SOURCE LINE # 1891
0023 900000      R     MOV     DPTR,#result
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
                                           ; SOURCE LINE # 1892
0028         ?C0444:
0028 22                RET     
             ; FUNCTION _ConfigExtMouse (END)

             ; FUNCTION CheckAuxMux (BEGIN)
                                           ; SOURCE LINE # 1897
;---- Variable 'data_byte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1898
                                           ; SOURCE LINE # 1900
;---- Variable 'current' assigned to Register 'R6' ----
0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 1901
0002 E500        E     MOV     A,KBHIData
0004 B4F009            CJNE    A,#0F0H,?C0445
                                           ; SOURCE LINE # 1902
                                           ; SOURCE LINE # 1903
0007 D200        E     SETB    MULPX_Mx_state2
                                           ; SOURCE LINE # 1904
0009 C200        E     CLR     MULPX_Mx_state3
                                           ; SOURCE LINE # 1905
000B 1E                DEC     R6
                                           ; SOURCE LINE # 1906
000C 7FF0              MOV     R7,#0F0H
                                           ; SOURCE LINE # 1907
000E 8030              SJMP    ?C0446
0010         ?C0445:
                                           ; SOURCE LINE # 1908
0010 E500        E     MOV     A,KBHIData
0012 B4560D            CJNE    A,#056H,?C0447
                                           ; SOURCE LINE # 1909
                                           ; SOURCE LINE # 1910
0015 300028      E     JNB     MULPX_Mx_state2,?C0446
                                           ; SOURCE LINE # 1911
                                           ; SOURCE LINE # 1912
0018 C200        E     CLR     MULPX_Mx_state2
                                           ; SOURCE LINE # 1913
001A D200        E     SETB    MULPX_Mx_state3
                                           ; SOURCE LINE # 1914
001C E4                CLR     A
001D FE                MOV     R6,A
                                           ; SOURCE LINE # 1915
001E 7F56              MOV     R7,#056H
                                           ; SOURCE LINE # 1916
                                           ; SOURCE LINE # 1917
0020 801E              SJMP    ?C0446
0022         ?C0447:
                                           ; SOURCE LINE # 1918
0022 E500        E     MOV     A,KBHIData
0024 B4A409            CJNE    A,#0A4H,?C0450
                                           ; SOURCE LINE # 1919
                                           ; SOURCE LINE # 1920
0027 300016      E     JNB     MULPX_Mx_state3,?C0446
                                           ; SOURCE LINE # 1921
                                           ; SOURCE LINE # 1922
002A D200        E     SETB    MULPX_Multiplex
                                           ; SOURCE LINE # 1923
002C 7F11              MOV     R7,#011H
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 110 

                                           ; SOURCE LINE # 1924
                                           ; SOURCE LINE # 1925
002E 8010              SJMP    ?C0446
0030         ?C0450:
                                           ; SOURCE LINE # 1926
0030 E500        E     MOV     A,KBHIData
0032 B4A509            CJNE    A,#0A5H,?C0453
                                           ; SOURCE LINE # 1927
                                           ; SOURCE LINE # 1928
0035 300008      E     JNB     MULPX_Mx_state3,?C0446
                                           ; SOURCE LINE # 1929
                                           ; SOURCE LINE # 1930
0038 C200        E     CLR     MULPX_Multiplex
                                           ; SOURCE LINE # 1931
003A 7F11              MOV     R7,#011H
                                           ; SOURCE LINE # 1932
                                           ; SOURCE LINE # 1933
003C 8002              SJMP    ?C0446
003E         ?C0453:
                                           ; SOURCE LINE # 1935
                                           ; SOURCE LINE # 1936
003E AF00        E     MOV     R7,KBHIData
                                           ; SOURCE LINE # 1937
0040         ?C0446:
                                           ; SOURCE LINE # 1939
0040 EE                MOV     A,R6
0041 6004              JZ      ?C0456
                                           ; SOURCE LINE # 1940
                                           ; SOURCE LINE # 1941
0043 C200        E     CLR     MULPX_Mx_state2
                                           ; SOURCE LINE # 1942
0045 C200        E     CLR     MULPX_Mx_state3
                                           ; SOURCE LINE # 1943
0047         ?C0456:
                                           ; SOURCE LINE # 1944
                                           ; SOURCE LINE # 1945
0047         ?C0457:
0047 22                RET     
             ; FUNCTION CheckAuxMux (END)

             ; FUNCTION _OnOffPS2Channel_X (BEGIN)
                                           ; SOURCE LINE # 1954
;---- Variable 'portnum' assigned to Register 'R7' ----
;---- Variable 'active' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1955
                                           ; SOURCE LINE # 1956
0000 EF                MOV     A,R7
0001 700B              JNZ     ?C0458
                                           ; SOURCE LINE # 1957
                                           ; SOURCE LINE # 1958
0003 120000      R     LCALL   L?0645
0006 705F              JNZ     ?C0461
0008 120000      R     LCALL   L?0647
000B 601E              JZ      ?C0462
                                           ; SOURCE LINE # 1959
000D 22                RET     
                                           ; SOURCE LINE # 1961
                                           ; SOURCE LINE # 1962
000E         ?C0458:
                                           ; SOURCE LINE # 1963
000E EF                MOV     A,R7
000F B4010B            CJNE    A,#01H,?C0463
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 111 

                                           ; SOURCE LINE # 1964
                                           ; SOURCE LINE # 1965
0012 120000      R     LCALL   L?0649
0015 7050              JNZ     ?C0461
0017 120000      R     LCALL   L?0651
001A 600F              JZ      ?C0462
                                           ; SOURCE LINE # 1966
001C         ?C0597:
001C 22                RET     
                                           ; SOURCE LINE # 1968
                                           ; SOURCE LINE # 1969
001D         ?C0463:
                                           ; SOURCE LINE # 1970
001D EF                MOV     A,R7
001E B4020A            CJNE    A,#02H,?C0462
                                           ; SOURCE LINE # 1971
                                           ; SOURCE LINE # 1972
0021 120000      R     LCALL   L?0653
0024 7041              JNZ     ?C0461
0026 120000      R     LCALL   L?0655
0029 703C              JNZ     ?C0461
                                           ; SOURCE LINE # 1973
                                           ; SOURCE LINE # 1975
                                           ; SOURCE LINE # 1976
002B         ?C0462:
                                           ; SOURCE LINE # 1978
002B 7400        E     MOV     A,#LOW AuxFlags
002D 2F                ADD     A,R7
002E F8                MOV     R0,A
002F E6                MOV     A,@R0
0030 30E719            JNB     ACC.7,?C0470
                                           ; SOURCE LINE # 1979
                                           ; SOURCE LINE # 1980
0033 300031      E     JNB     MouseDriverIn,?C0461
                                           ; SOURCE LINE # 1981
                                           ; SOURCE LINE # 1982
0036 ED                MOV     A,R5
0037 700A              JNZ     ?C0472
                                           ; SOURCE LINE # 1983
                                           ; SOURCE LINE # 1984
0039 7400        E     MOV     A,#LOW AuxFlags2
003B 2F                ADD     A,R7
003C F8                MOV     R0,A
003D 7401              MOV     A,#01H
003F 46                ORL     A,@R0
0040 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1985
0041 8020              SJMP    ?C0598
0043         ?C0472:
                                           ; SOURCE LINE # 1986
0043 ED                MOV     A,R5
0044 B40103            CJNE    A,#01H,?C0473
                                           ; SOURCE LINE # 1987
                                           ; SOURCE LINE # 1988
0047 120000      R     LCALL   L?0657
                                           ; SOURCE LINE # 1989
004A         ?C0473:
                                           ; SOURCE LINE # 1990
                                           ; SOURCE LINE # 1991
                                           ; SOURCE LINE # 1992
004A 8017              SJMP    ?C0598
004C         ?C0470:
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 112 

                                           ; SOURCE LINE # 1994
                                           ; SOURCE LINE # 1995
004C 300018      E     JNB     KeyboardDriverIn,?C0461
                                           ; SOURCE LINE # 1996
                                           ; SOURCE LINE # 1997
004F ED                MOV     A,R5
0050 700A              JNZ     ?C0477
                                           ; SOURCE LINE # 1998
                                           ; SOURCE LINE # 1999
0052 7400        E     MOV     A,#LOW AuxFlags2
0054 2F                ADD     A,R7
0055 F8                MOV     R0,A
0056 7401              MOV     A,#01H
0058 46                ORL     A,@R0
0059 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2000
005A 8007              SJMP    ?C0478
005C         ?C0477:
                                           ; SOURCE LINE # 2001
005C ED                MOV     A,R5
005D B40103            CJNE    A,#01H,?C0478
                                           ; SOURCE LINE # 2002
                                           ; SOURCE LINE # 2003
0060 120000      R     LCALL   L?0657
                                           ; SOURCE LINE # 2004
0063         ?C0478:
                                           ; SOURCE LINE # 2005
0063         ?C0598:
0063 E4                CLR     A
0064 7800        E     MOV     R0,#LOW PS2_ReTryCunt
0066 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2006
                                           ; SOURCE LINE # 2007
                                           ; SOURCE LINE # 2008
0067         ?C0461:
0067 22                RET     
             ; FUNCTION _OnOffPS2Channel_X (END)

             ; FUNCTION _KBCmdAckByteCunt (BEGIN)
                                           ; SOURCE LINE # 2013
;---- Variable 'ackcunt' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2014
                                           ; SOURCE LINE # 2015
0000 7800        E     MOV     R0,#LOW Main_KB_ACK_CUNT
0002 EF                MOV     A,R7
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2016
0004 22                RET     
             ; FUNCTION _KBCmdAckByteCunt (END)

             ; FUNCTION _SetOtherKBNeedUpdataFlag (BEGIN)
                                           ; SOURCE LINE # 2021
;---- Variable 'KBCmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2022
                                           ; SOURCE LINE # 2025
;---- Variable 'index' assigned to Register 'R6' ----
0000 E4                CLR     A
0001 FE                MOV     R6,A
0002         ?C0481:
                                           ; SOURCE LINE # 2026
                                           ; SOURCE LINE # 2027
0002 7400        E     MOV     A,#LOW AuxFlags
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 113 

0004 2E                ADD     A,R6
0005 F8                MOV     R0,A
0006 E6                MOV     A,@R0
0007 30E64E            JNB     ACC.6,?C0483
                                           ; SOURCE LINE # 2028
                                           ; SOURCE LINE # 2029
000A EE                MOV     A,R6
000B 2401              ADD     A,#01H
000D FD                MOV     R5,A
000E E4                CLR     A
000F 33                RLC     A
0010 FC                MOV     R4,A
0011 7800        E     MOV     R0,#LOW Main_KB_CHN
0013 E6                MOV     A,@R0
0014 6D                XRL     A,R5
0015 7001              JNZ     ?C0559
0017 EC                MOV     A,R4
0018         ?C0559:
0018 603E              JZ      ?C0483
                                           ; SOURCE LINE # 2030
                                           ; SOURCE LINE # 2031
001A 7400        E     MOV     A,#LOW AuxFlags
001C 2E                ADD     A,R6
001D F8                MOV     R0,A
001E E6                MOV     A,@R0
001F 20E336            JB      ACC.3,?C0483
                                           ; SOURCE LINE # 2032
                                           ; SOURCE LINE # 2033
0022 EF                MOV     A,R7
0023 B4ED0A            CJNE    A,#0EDH,?C0487
                                           ; SOURCE LINE # 2034
                                           ; SOURCE LINE # 2035
0026 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0028 2E                ADD     A,R6
0029 F8                MOV     R0,A
002A 7408              MOV     A,#08H
002C 46                ORL     A,@R0
002D F6                MOV     @R0,A
                                           ; SOURCE LINE # 2036
002E 8028              SJMP    ?C0483
0030         ?C0487:
                                           ; SOURCE LINE # 2037
0030 EF                MOV     A,R7
0031 B4F30A            CJNE    A,#0F3H,?C0489
                                           ; SOURCE LINE # 2038
                                           ; SOURCE LINE # 2039
0034 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0036 2E                ADD     A,R6
0037 F8                MOV     R0,A
0038 7404              MOV     A,#04H
003A 46                ORL     A,@R0
003B F6                MOV     @R0,A
                                           ; SOURCE LINE # 2040
003C 801A              SJMP    ?C0483
003E         ?C0489:
                                           ; SOURCE LINE # 2041
003E EF                MOV     A,R7
003F B4F40A            CJNE    A,#0F4H,?C0491
                                           ; SOURCE LINE # 2042
                                           ; SOURCE LINE # 2043
0042 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0044 2E                ADD     A,R6
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 114 

0045 F8                MOV     R0,A
0046 7402              MOV     A,#02H
0048 46                ORL     A,@R0
0049 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2044
004A 800C              SJMP    ?C0483
004C         ?C0491:
                                           ; SOURCE LINE # 2045
004C EF                MOV     A,R7
004D B4F508            CJNE    A,#0F5H,?C0483
                                           ; SOURCE LINE # 2046
                                           ; SOURCE LINE # 2047
0050 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0052 2E                ADD     A,R6
0053 F8                MOV     R0,A
0054 7401              MOV     A,#01H
0056 46                ORL     A,@R0
0057 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2048
                                           ; SOURCE LINE # 2049
                                           ; SOURCE LINE # 2050
                                           ; SOURCE LINE # 2051
                                           ; SOURCE LINE # 2052
0058         ?C0483:
0058 0E                INC     R6
0059 EE                MOV     A,R6
005A 6403              XRL     A,#03H
005C 70A4              JNZ     ?C0481
                                           ; SOURCE LINE # 2053
005E         ?C0494:
005E 22                RET     
             ; FUNCTION _SetOtherKBNeedUpdataFlag (END)

             ; FUNCTION SetStartScanAUXFlag (BEGIN)
                                           ; SOURCE LINE # 2058
                                           ; SOURCE LINE # 2059
                                           ; SOURCE LINE # 2060
0000 D200        E     SETB    StartENAUXDevice
                                           ; SOURCE LINE # 2061
0002 22                RET     
             ; FUNCTION SetStartScanAUXFlag (END)

             ; FUNCTION _AUXData_To_Host_nWait (BEGIN)
                                           ; SOURCE LINE # 2066
;---- Variable 'portnum' assigned to Register 'R5' ----
;---- Variable 'data_byte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2067
                                           ; SOURCE LINE # 2068
0000 ED                MOV     A,R5
0001 F4                CPL     A
0002 6004              JZ      ?C0496
                                           ; SOURCE LINE # 2069
                                           ; SOURCE LINE # 2070
0004 7800        E     MOV     R0,#LOW AUXPortNum
0006 ED                MOV     A,R5
0007 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2071
0008         ?C0496:
                                           ; SOURCE LINE # 2072
0008 120000      R     LCALL   _SendFromAux
                                           ; SOURCE LINE # 2074
000B C28E              CLR     TR1
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 115 

                                           ; SOURCE LINE # 2075
000D C2AB              CLR     ET1
                                           ; SOURCE LINE # 2076
000F 00                NOP     
                                           ; SOURCE LINE # 2077
0010 00                NOP     
                                           ; SOURCE LINE # 2078
0011 00                NOP     
                                           ; SOURCE LINE # 2079
0012 00                NOP     
                                           ; SOURCE LINE # 2080
0013 758DB2            MOV     TH1,#0B2H
                                           ; SOURCE LINE # 2081
0016 758B19            MOV     TL1,#019H
                                           ; SOURCE LINE # 2082
0019 C28F              CLR     TF1
                                           ; SOURCE LINE # 2083
001B D28E              SETB    TR1
001D         ?C0497:
                                           ; SOURCE LINE # 2085
001D 208F0E            JB      TF1,?C0498
                                           ; SOURCE LINE # 2086
                                           ; SOURCE LINE # 2087
0020 900000      E     MOV     DPTR,#KBHISR
0023 E0                MOVX    A,@DPTR
0024 30E007            JNB     ACC.0,?C0498
                                           ; SOURCE LINE # 2088
                                           ; SOURCE LINE # 2089
                                           ; SOURCE LINE # 2090
0027         ?C0499:
                                           ; SOURCE LINE # 2091
0027 900000      E     MOV     DPTR,#KBHISR
002A E0                MOVX    A,@DPTR
002B 30E1EF            JNB     ACC.1,?C0497
                                           ; SOURCE LINE # 2092
                                           ; SOURCE LINE # 2093
                                           ; SOURCE LINE # 2094
                                           ; SOURCE LINE # 2095
002E         ?C0498:
                                           ; SOURCE LINE # 2097
                                           ; SOURCE LINE # 2098
                                           ; SOURCE LINE # 2099
002E 120000      R     LCALL   L?0633
                                           ; SOURCE LINE # 2100
0031 22                RET     
             ; FUNCTION _AUXData_To_Host_nWait (END)

             ; FUNCTION ReSendPS2PendingData (BEGIN)
                                           ; SOURCE LINE # 2105
                                           ; SOURCE LINE # 2106
                                           ; SOURCE LINE # 2107
0000 7800        E     MOV     R0,#LOW MSPending
0002 E6                MOV     A,@R0
0003 B43302            CJNE    A,#033H,?C0503
                                           ; SOURCE LINE # 2108
                                           ; SOURCE LINE # 2109
0006 D200        E     SETB    F_Service_Send_PS2
                                           ; SOURCE LINE # 2110
                                           ; SOURCE LINE # 2111
0008         ?C0503:
0008 22                RET     
             ; FUNCTION ReSendPS2PendingData (END)
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 116 


             ; FUNCTION _CheckNSetMainKBCHN (BEGIN)
                                           ; SOURCE LINE # 2116
;---- Variable 'PortNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2117
                                           ; SOURCE LINE # 2118
0000 7800        E     MOV     R0,#LOW Main_KB_CHN
0002 E6                MOV     A,@R0
0003 700A              JNZ     ?C0505
                                           ; SOURCE LINE # 2119
                                           ; SOURCE LINE # 2120
0005 7400        E     MOV     A,#LOW AuxFlags
0007 120000      R     LCALL   L?0658
                                           ; SOURCE LINE # 2121
000A EF                MOV     A,R7
000B 04                INC     A
000C 7800        E     MOV     R0,#LOW Main_KB_CHN
000E F6                MOV     @R0,A
                                           ; SOURCE LINE # 2122
                                           ; SOURCE LINE # 2123
000F         ?C0505:
000F 22                RET     
             ; FUNCTION _CheckNSetMainKBCHN (END)

             ; FUNCTION _CheckNSetMainMSCHN (BEGIN)
                                           ; SOURCE LINE # 2128
;---- Variable 'PortNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2129
                                           ; SOURCE LINE # 2130
0000 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
0002 E6                MOV     A,@R0
0003 7006              JNZ     ?C0507
                                           ; SOURCE LINE # 2131
                                           ; SOURCE LINE # 2132
0005 7400        E     MOV     A,#LOW AuxFlags
0007 2F                ADD     A,R7
                                           ; SOURCE LINE # 2133
0008 120000      R     LCALL   L?0661
                                           ; SOURCE LINE # 2134
                                           ; SOURCE LINE # 2135
000B         ?C0507:
000B 22                RET     
             ; FUNCTION _CheckNSetMainMSCHN (END)

             ; FUNCTION ResetMSPendingData (BEGIN)
                                           ; SOURCE LINE # 2140
                                           ; SOURCE LINE # 2141
                                           ; SOURCE LINE # 2142
0000 7800        E     MOV     R0,#LOW MSPending
0002 7688              MOV     @R0,#088H
                                           ; SOURCE LINE # 2143
0004 C200        E     CLR     F_Service_Send_PS2
                                           ; SOURCE LINE # 2144
0006 22                RET     
             ; FUNCTION ResetMSPendingData (END)

             ; FUNCTION DisablePS2Port_0 (BEGIN)
                                           ; SOURCE LINE # 2152
                                           ; SOURCE LINE # 2153
                                           ; SOURCE LINE # 2154
0000 E4                CLR     A
0001 FD                MOV     R5,A
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 117 

0002 FF                MOV     R7,A
0003 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION DisablePS2Port_0 (END)

             ; FUNCTION DisablePS2Port_1 (BEGIN)
                                           ; SOURCE LINE # 2160
                                           ; SOURCE LINE # 2161
                                           ; SOURCE LINE # 2162
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F01              MOV     R7,#01H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION DisablePS2Port_1 (END)

             ; FUNCTION DisablePS2Port_2 (BEGIN)
                                           ; SOURCE LINE # 2168
                                           ; SOURCE LINE # 2169
                                           ; SOURCE LINE # 2170
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F02              MOV     R7,#02H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION DisablePS2Port_2 (END)

             ; FUNCTION EnablePS2Port_0 (BEGIN)
                                           ; SOURCE LINE # 2176
                                           ; SOURCE LINE # 2177
                                           ; SOURCE LINE # 2178
0000 7D01              MOV     R5,#01H
0002 E4                CLR     A
0003 FF                MOV     R7,A
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION EnablePS2Port_0 (END)

             ; FUNCTION EnablePS2Port_1 (BEGIN)
                                           ; SOURCE LINE # 2184
                                           ; SOURCE LINE # 2185
                                           ; SOURCE LINE # 2186
0000 7D01              MOV     R5,#01H
0002 7F01              MOV     R7,#01H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION EnablePS2Port_1 (END)

             ; FUNCTION EnablePS2Port_2 (BEGIN)
                                           ; SOURCE LINE # 2192
                                           ; SOURCE LINE # 2193
                                           ; SOURCE LINE # 2194
0000 7D01              MOV     R5,#01H
0002 7F02              MOV     R7,#02H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION EnablePS2Port_2 (END)

             ; FUNCTION PS2_PowerOff (BEGIN)
                                           ; SOURCE LINE # 2200
                                           ; SOURCE LINE # 2201
                                           ; SOURCE LINE # 2203
0000 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 2204
0003 120000      R     LCALL   ClaerPS2IFPendingEvent
                                           ; SOURCE LINE # 2206
0006 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 2207
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 118 

0009 E4                CLR     A
000A FF                MOV     R7,A
000B 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 2208
000E E4                CLR     A
000F 7800        E     MOV     R0,#LOW PS2_ReTryCunt
0011 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2209
0012 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 2210
0014 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 2211
0016 7800        E     MOV     R0,#LOW AUXInactiveCounter
0018 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2212
0019 C200        E     CLR     StartENAUXDevice
                                           ; SOURCE LINE # 2214
;---- Variable 'index' assigned to Register 'R7' ----
001B FF                MOV     R7,A
001C         ?C0515:
                                           ; SOURCE LINE # 2215
                                           ; SOURCE LINE # 2216
001C 7400        E     MOV     A,#LOW AuxFlags
001E 2F                ADD     A,R7
001F F8                MOV     R0,A
0020 E4                CLR     A
0021 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2217
0022 7400        E     MOV     A,#LOW AuxFlags2
0024 2F                ADD     A,R7
0025 F8                MOV     R0,A
0026 E4                CLR     A
0027 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2218
0028 0F                INC     R7
0029 EF                MOV     A,R7
002A B403EF            CJNE    A,#03H,?C0515
002D         ?C0516:
                                           ; SOURCE LINE # 2220
002D 120000      R     LCALL   L?0645
0030 7015              JNZ     ?C0518
0032 120000      R     LCALL   L?0647
0035 7010              JNZ     ?C0518
                                           ; SOURCE LINE # 2221
                                           ; SOURCE LINE # 2222
0037 900000      E     MOV     DPTR,#GPCRF0
003A 7442              MOV     A,#042H
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2223
003D 900000      E     MOV     DPTR,#GPCRF1
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2224
0041 7800        E     MOV     R0,#LOW AuxFlags2
0043 E6                MOV     A,@R0
0044 4480              ORL     A,#080H
0046 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2225
0047         ?C0518:
                                           ; SOURCE LINE # 2227
0047 120000      R     LCALL   L?0649
004A 7015              JNZ     ?C0519
004C 120000      R     LCALL   L?0651
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 119 

004F 7010              JNZ     ?C0519
                                           ; SOURCE LINE # 2228
                                           ; SOURCE LINE # 2229
0051 900000      E     MOV     DPTR,#GPCRF2
0054 7442              MOV     A,#042H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2230
0057 900000      E     MOV     DPTR,#GPCRF3
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2231
005B 7800        E     MOV     R0,#LOW AuxFlags2+01H
005D E6                MOV     A,@R0
005E 4480              ORL     A,#080H
0060 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2232
0061         ?C0519:
                                           ; SOURCE LINE # 2234
0061 120000      R     LCALL   L?0653
0064 7015              JNZ     ?C0521
0066 120000      R     LCALL   L?0655
0069 7010              JNZ     ?C0521
                                           ; SOURCE LINE # 2235
                                           ; SOURCE LINE # 2236
006B 900000      E     MOV     DPTR,#GPCRF4
006E 7442              MOV     A,#042H
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2237
0071 900000      E     MOV     DPTR,#GPCRF5
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2238
0075 7800        E     MOV     R0,#LOW AuxFlags2+02H
0077 E6                MOV     A,@R0
0078 4480              ORL     A,#080H
007A F6                MOV     @R0,A
                                           ; SOURCE LINE # 2239
                                           ; SOURCE LINE # 2240
007B         ?C0521:
007B 22                RET     
             ; FUNCTION PS2_PowerOff (END)

             ; FUNCTION PS2_PowerOn (BEGIN)
                                           ; SOURCE LINE # 2245
                                           ; SOURCE LINE # 2246
                                           ; SOURCE LINE # 2247
0000 120000      R     LCALL   PS2DeviceInactive
                                           ; SOURCE LINE # 2248
0003 7800        E     MOV     R0,#LOW AuxFlags2
0005 E6                MOV     A,@R0
0006 30E70D            JNB     ACC.7,?C0522
                                           ; SOURCE LINE # 2249
                                           ; SOURCE LINE # 2250
0009 E6                MOV     A,@R0
000A 547F              ANL     A,#07FH
000C F6                MOV     @R0,A
                                           ; SOURCE LINE # 2251
000D E4                CLR     A
000E 900000      E     MOV     DPTR,#GPCRF0
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2252
0012 900000      E     MOV     DPTR,#GPCRF1
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2253
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 120 

0016         ?C0522:
                                           ; SOURCE LINE # 2255
0016 7800        E     MOV     R0,#LOW AuxFlags2+01H
0018 E6                MOV     A,@R0
0019 30E70D            JNB     ACC.7,?C0523
                                           ; SOURCE LINE # 2256
                                           ; SOURCE LINE # 2257
001C E6                MOV     A,@R0
001D 547F              ANL     A,#07FH
001F F6                MOV     @R0,A
                                           ; SOURCE LINE # 2258
0020 E4                CLR     A
0021 900000      E     MOV     DPTR,#GPCRF2
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2259
0025 900000      E     MOV     DPTR,#GPCRF3
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2260
0029         ?C0523:
                                           ; SOURCE LINE # 2262
0029 7800        E     MOV     R0,#LOW AuxFlags2+02H
002B E6                MOV     A,@R0
002C 30E70D            JNB     ACC.7,?C0525
                                           ; SOURCE LINE # 2263
                                           ; SOURCE LINE # 2264
002F E6                MOV     A,@R0
0030 547F              ANL     A,#07FH
0032 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2265
0033 E4                CLR     A
0034 900000      E     MOV     DPTR,#GPCRF4
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2266
0038 900000      E     MOV     DPTR,#GPCRF5
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2267
                                           ; SOURCE LINE # 2268
003C         ?C0525:
003C 22                RET     
             ; FUNCTION PS2_PowerOn (END)

             ; FUNCTION PowerOffClearTPPendingData (BEGIN)
                                           ; SOURCE LINE # 2273
                                           ; SOURCE LINE # 2274
                                           ; SOURCE LINE # 2275
0000 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 2276
0003 020000      R     LJMP    ClaerPS2IFPendingEvent
             ; FUNCTION PowerOffClearTPPendingData (END)

             ; FUNCTION _SetPS2CmdACKCounter (BEGIN)
                                           ; SOURCE LINE # 2279
;---- Variable 'ackcunt' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2280
                                           ; SOURCE LINE # 2281
0000 7800        E     MOV     R0,#LOW TPACKCounter
0002 EF                MOV     A,R7
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2282
0004 22                RET     
             ; FUNCTION _SetPS2CmdACKCounter (END)

C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 121 

             ; FUNCTION _WaitECSend2PortACK (BEGIN)
                                           ; SOURCE LINE # 2287
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2288
                                           ; SOURCE LINE # 2292
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2293
0008 900000      R     MOV     DPTR,#PortNum
000B E0                MOVX    A,@DPTR
000C 2400        E     ADD     A,#LOW AuxFlags
000E F8                MOV     R0,A
000F E6                MOV     A,@R0
0010 7004              JNZ     ?C0528
                                           ; SOURCE LINE # 2294
                                           ; SOURCE LINE # 2295
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 22                RET     
                                           ; SOURCE LINE # 2296
0016         ?C0528:
                                           ; SOURCE LINE # 2298
0016 C28E              CLR     TR1
                                           ; SOURCE LINE # 2299
0018 C2AB              CLR     ET1
                                           ; SOURCE LINE # 2300
001A 00                NOP     
                                           ; SOURCE LINE # 2301
001B 00                NOP     
                                           ; SOURCE LINE # 2302
001C 00                NOP     
                                           ; SOURCE LINE # 2303
001D 00                NOP     
                                           ; SOURCE LINE # 2304
001E E4                CLR     A
001F F58D              MOV     TH1,A
                                           ; SOURCE LINE # 2305
0021 758B01            MOV     TL1,#01H
                                           ; SOURCE LINE # 2306
0024 C28F              CLR     TF1
                                           ; SOURCE LINE # 2307
0026 D28E              SETB    TR1
0028         ?C0530:
                                           ; SOURCE LINE # 2309
0028 208F44            JB      TF1,?C0531
                                           ; SOURCE LINE # 2310
                                           ; SOURCE LINE # 2311
002B 3000FA      E     JNB     F_Service_PS2,?C0530
                                           ; SOURCE LINE # 2312
                                           ; SOURCE LINE # 2313
002E 30002B      E     JNB     SendtoAUXFlag,?C0533
                                           ; SOURCE LINE # 2314
                                           ; SOURCE LINE # 2315
0031 C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 2316
0033 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 2317
0035 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 122 

0037 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 2318
0039 900000      R     MOV     DPTR,#PortNum
                                           ; SOURCE LINE # 2319
003C 120000      R     LCALL   L?0601
003F 120000      R     LCALL   L?0622
0042 C083              PUSH    DPH
0044 C082              PUSH    DPL
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 900000      R     MOV     DPTR,#PortNum
004B E0                MOVX    A,@DPTR
004C 120000      R     LCALL   L?0611
004F FE                MOV     R6,A
0050 EF                MOV     A,R7
0051 4E                ORL     A,R6
0052 D082              POP     DPL
0054 D083              POP     DPH
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2320
0057 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 2321
005A 80CC              SJMP    ?C0530
005C         ?C0533:
                                           ; SOURCE LINE # 2323
                                           ; SOURCE LINE # 2324
005C 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
005E E6                MOV     A,@R0
005F FF                MOV     R7,A
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2325
0060 C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 2326
0062 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 2327
0064 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 2328
0066 E4                CLR     A
0067 FD                MOV     R5,A
0068 120000      R     LCALL   _ProcessECTestAUXACK
                                           ; SOURCE LINE # 2329
006B C28E              CLR     TR1
                                           ; SOURCE LINE # 2330
006D C28F              CLR     TF1
                                           ; SOURCE LINE # 2331
                                           ; SOURCE LINE # 2332
                                           ; SOURCE LINE # 2333
                                           ; SOURCE LINE # 2334
006F         ?C0531:
                                           ; SOURCE LINE # 2336
006F 308F06            JNB     TF1,?C0535
                                           ; SOURCE LINE # 2337
                                           ; SOURCE LINE # 2338
0072 900000      R     MOV     DPTR,#timeout
0075 7401              MOV     A,#01H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2339
0078         ?C0535:
                                           ; SOURCE LINE # 2341
                                           ; SOURCE LINE # 2342
                                           ; SOURCE LINE # 2343
0078 120000      R     LCALL   L?0633
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 123 

                                           ; SOURCE LINE # 2344
007B 900000      R     MOV     DPTR,#timeout
007E E0                MOVX    A,@DPTR
007F FF                MOV     R7,A
                                           ; SOURCE LINE # 2345
0080         ?C0529:
0080 22                RET     
             ; FUNCTION _WaitECSend2PortACK (END)

             ; FUNCTION _WaitPS2DeviceACK (BEGIN)
                                           ; SOURCE LINE # 2351
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2352
                                           ; SOURCE LINE # 2353
0005 C28E              CLR     TR1
                                           ; SOURCE LINE # 2354
0007 C2AB              CLR     ET1
                                           ; SOURCE LINE # 2355
0009 00                NOP     
                                           ; SOURCE LINE # 2356
000A 00                NOP     
                                           ; SOURCE LINE # 2357
000B 00                NOP     
                                           ; SOURCE LINE # 2358
000C 00                NOP     
                                           ; SOURCE LINE # 2359
000D 758D88            MOV     TH1,#088H
                                           ; SOURCE LINE # 2360
0010 758B4F            MOV     TL1,#04FH
                                           ; SOURCE LINE # 2361
0013 C28F              CLR     TF1
                                           ; SOURCE LINE # 2362
0015 D28E              SETB    TR1
0017         ?C0536:
                                           ; SOURCE LINE # 2364
0017 208F31            JB      TF1,?C0537
                                           ; SOURCE LINE # 2365
                                           ; SOURCE LINE # 2366
001A 3000FA      E     JNB     F_Service_PS2,?C0536
                                           ; SOURCE LINE # 2367
                                           ; SOURCE LINE # 2368
001D 30002B      E     JNB     SendtoAUXFlag,?C0537
                                           ; SOURCE LINE # 2369
                                           ; SOURCE LINE # 2370
0020 C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 2371
0022 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 2372
0024 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0026 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 2373
0028 900000      R     MOV     DPTR,#PortNum
                                           ; SOURCE LINE # 2374
002B 120000      R     LCALL   L?0601
002E 120000      R     LCALL   L?0622
0031 C083              PUSH    DPH
0033 C082              PUSH    DPL
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 900000      R     MOV     DPTR,#PortNum
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 124 

003A E0                MOVX    A,@DPTR
003B 120000      R     LCALL   L?0611
003E FE                MOV     R6,A
003F EF                MOV     A,R7
0040 4E                ORL     A,R6
0041 D082              POP     DPL
0043 D083              POP     DPH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2375
0046 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 2376
0049 80CC              SJMP    ?C0536
                                           ; SOURCE LINE # 2378
                                           ; SOURCE LINE # 2379
                                           ; SOURCE LINE # 2380
                                           ; SOURCE LINE # 2381
                                           ; SOURCE LINE # 2382
004B         ?C0537:
                                           ; SOURCE LINE # 2384
                                           ; SOURCE LINE # 2385
                                           ; SOURCE LINE # 2386
004B 120000      R     LCALL   L?0633
                                           ; SOURCE LINE # 2387
004E 22                RET     
             ; FUNCTION _WaitPS2DeviceACK (END)

             ; FUNCTION PS2CheckPendingISR (BEGIN)
                                           ; SOURCE LINE # 2394
                                           ; SOURCE LINE # 2395
                                           ; SOURCE LINE # 2397
;---- Variable 'pending' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 2399
0002 900000      E     MOV     DPTR,#PSSTS3
0005 E0                MOVX    A,@DPTR
0006 30E31D            JNB     ACC.3,?C0542
                                           ; SOURCE LINE # 2400
                                           ; SOURCE LINE # 2401
0009 900000      E     MOV     DPTR,#IER2
000C E0                MOVX    A,@DPTR
000D 30E25B            JNB     ACC.2,?C0544
0010 900000      E     MOV     DPTR,#ISR2
0013 E0                MOVX    A,@DPTR
0014 20E254            JB      ACC.2,?C0544
0017 900000      E     MOV     DPTR,#PSCTL3
001A E0                MOVX    A,@DPTR
001B 6417              XRL     A,#017H
001D 704C              JNZ     ?C0544
                                           ; SOURCE LINE # 2402
                                           ; SOURCE LINE # 2403
001F 120000      E     LCALL   IRQ_INT18_PS2Interrupt2
                                           ; SOURCE LINE # 2404
0022 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2405
                                           ; SOURCE LINE # 2406
0024 8045              SJMP    ?C0544
0026         ?C0542:
                                           ; SOURCE LINE # 2407
0026 900000      E     MOV     DPTR,#PSSTS2
0029 E0                MOVX    A,@DPTR
002A 30E31D            JNB     ACC.3,?C0545
C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 125 

                                           ; SOURCE LINE # 2408
                                           ; SOURCE LINE # 2409
002D 900000      E     MOV     DPTR,#IER2
0030 E0                MOVX    A,@DPTR
0031 30E337            JNB     ACC.3,?C0544
0034 900000      E     MOV     DPTR,#ISR2
0037 E0                MOVX    A,@DPTR
0038 20E330            JB      ACC.3,?C0544
003B 900000      E     MOV     DPTR,#PSCTL2
003E E0                MOVX    A,@DPTR
003F 6417              XRL     A,#017H
0041 7028              JNZ     ?C0544
                                           ; SOURCE LINE # 2410
                                           ; SOURCE LINE # 2411
0043 120000      E     LCALL   IRQ_INT19_PS2Interrupt1
                                           ; SOURCE LINE # 2412
0046 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2413
                                           ; SOURCE LINE # 2414
0048 8021              SJMP    ?C0544
004A         ?C0545:
                                           ; SOURCE LINE # 2415
004A 900000      E     MOV     DPTR,#PSSTS1
004D E0                MOVX    A,@DPTR
004E 30E31A            JNB     ACC.3,?C0544
                                           ; SOURCE LINE # 2416
                                           ; SOURCE LINE # 2417
0051 900000      E     MOV     DPTR,#IER2
0054 E0                MOVX    A,@DPTR
0055 30E413            JNB     ACC.4,?C0544
0058 900000      E     MOV     DPTR,#ISR2
005B E0                MOVX    A,@DPTR
005C 20E40C            JB      ACC.4,?C0544
005F 900000      E     MOV     DPTR,#PSCTL1
0062 E0                MOVX    A,@DPTR
0063 B41705            CJNE    A,#017H,?C0544
                                           ; SOURCE LINE # 2418
                                           ; SOURCE LINE # 2419
0066 120000      E     LCALL   IRQ_INT20_PS2Interrupt0
                                           ; SOURCE LINE # 2420
0069 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2421
                                           ; SOURCE LINE # 2422
006B         ?C0544:
                                           ; SOURCE LINE # 2424
                                           ; SOURCE LINE # 2425
006B         ?C0550:
006B 22                RET     
             ; FUNCTION PS2CheckPendingISR (END)

             ; FUNCTION _SetAUXScanIndexHS (BEGIN)
                                           ; SOURCE LINE # 2430
;---- Variable 'status' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2431
                                           ; SOURCE LINE # 2432
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0002 EF                MOV     A,R7
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2433
0004 22                RET     
             ; FUNCTION _SetAUXScanIndexHS (END)

C51 COMPILER V8.12   CORE_PS2                                                              07/28/2018 12:03:34 PAGE 126 

             ; FUNCTION ClearAUXScanTimeOutCunt (BEGIN)
                                           ; SOURCE LINE # 2438
                                           ; SOURCE LINE # 2439
                                           ; SOURCE LINE # 2440
0000 E4                CLR     A
0001 7800        E     MOV     R0,#LOW AUX_SCAN_TIMEOUT_CUNT
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2441
0004 22                RET     
             ; FUNCTION ClearAUXScanTimeOutCunt (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5348    ----
   CONSTANT SIZE    =     77    ----
   XDATA SIZE       =   ----      49
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
