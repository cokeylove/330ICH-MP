C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE OEM_INIT
OBJECT MODULE PLACED IN Code\Oem\OEM_INIT.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\Oem\OEM_INIT.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\IN
                    -CLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: OEM_INIT.C
   3           *
   4           * Author : Dino
   5           *
   6           * Note : These functions are reference only.
   7           *        Please follow your project software specification to do some modification.
   8           *---------------------------------------------------------------------------*/
   9          
  10          #include <CORE_INCLUDE.H>
  11          #include <OEM_INCLUDE.H>
  12          
  13          //----------------------------------------------------------------------------
  14          // Oem_StartUp
  15          //----------------------------------------------------------------------------
  16          void Oem_StartUp(void)
  17          {
  18   1      
  19   1      }
  20          
  21          //----------------------------------------------------------------------------
  22          // The function of init. registers
  23          //----------------------------------------------------------------------------
  24          //const struct REG_INIT_DEF code reg_init_table[] =
  25          const sREG_INIT_DEF code reg_init_table[] =
  26          {
  27          // ADC
  28                  { &ADCSTS       ,AINITB             },  // Enable Analog accuracy initialization
  29              //{ &ADCSTS         ,0                              },      // Stop adc accuracy initialization
  30              { &ADCSTS           ,0x80                   },  // Stop adc accuracy initialization
  31                  { &ADCCFG       ,0x21                   },  //
  32              { &KDCTL            ,AHCE               },  // Enable Hardware Callibration
  33                  //{ &ADCCFG     ,DFILEN                         },      // Enable Digital Filter enable,
  34                  { &ADCCTL               ,0x15                           },
  35          
  36          // DAC
  37              { &DACPWRDN         ,0x00               },  //
  38          
  39          //PWM
  40                  { &ZTIER                ,0x00                           },      // Disable
  41                  { &C0CPRS               ,0x23                           },      // Channel 0 Clock Prescaler Register 
  42                  { &CTR                  ,0xFF                           },      // Cycle Time 0
  43                  //{ &DCR0               ,0xFF                           },      // Channel 0 PWM Duty Cycle
  44                  { &DCR1                 ,0xFF                           },      // Channel 1 PWM Duty Cycle
  45                  { &DCR2                 ,0xFF                           },      // Channel 2 PWM Duty Cycle
  46                  { &DCR3                 ,0x00                           },      // Channel 3 PWM Duty Cycle
  47                  { &DCR4                 ,0x00                           },      // Channel 4 PWM Duty Cycle
  48                  { &DCR5                 ,0x00                           },      // Channel 5 PWM Duty Cycle
  49                  //{ &DCR6               ,0x00                           },      // Channel 6 PWM Duty Cycle
  50                  { &DCR7                 ,0x00                           },      // Channel 7 PWM Duty Cycle
  51                  { &PWMPOL               ,0x00                           },      // PWM Polarity
  52                  { &PCFSR                ,0x05                           },      // bit7=1: Disable CR256 channel 1 output. bit0-bit3: 0 => select 32.768 kHz, 1=> s
             -elect EC clock frequency
  53                  { &PCSSGL               ,0x17                           },      // Select channel 0-3 GroupG36
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 2   

  54                  { &PCSSGH               ,0xCA                           },      // Select channel 4-7 Group
  55                  { &CR256PCSSG   ,0x80                           },      // CR256 Prescaler Clock Source Select Group
  56                  { &PCSGR                ,0x00                           },      // Prescaler Clock Source Gating Register
  57                  { &C4CPRS               ,0xE3                           },      // Channel 4 Clock Prescaler Register
  58                  { &C4MCPRS              ,0x00                           },      // Channel 4 Clock Prescaler MSB Register
  59                  { &C6CPRS               ,0x01                           },      // 23KHz Channel 6 Clock Prescaler Register for fan
  60                  { &C6MCPRS              ,0x00                           },      // 23KHz Channel 6 Clock Prescaler MSB Register
  61                  { &C7CPRS               ,0x00                           },      // Channel 7 Clock Prescaler Register G36  //MEILING030:change 0xE0 to 0x00.
  62                  { &C7MCPRS              ,0x00                           },      // Channel 7 Clock Prescaler MSB Register
  63                  { &CLK6MSEL             ,0x10                           },      // PWM Clock 6MHz Select Register G36
  64                  { &CTR1                 ,0xFF                           },      // Cycle Time 1
  65                  { &CTR2                 ,0xC8                           },      // 23KHz Cycle Time 2(Fan used)
  66                  { &CTR3                 ,0xFF                           },      // Cycle Time 3(Panel used)
  67                  { &PWMODENR             ,0x06                           },      // PWM output open-drain  //cwy
  68                  { &TSWCTRL              ,0x0A                           },      // Enable TACH0A,TACH1A speed.
  69                  { &ZTIER                ,0x02                           },      // Enable
  70                  //{ &GCR19        ,0x00                         },      
  71                  { &GCR15                ,0xC0                           },  // Tony: Fix the issue of black screen when plug out 80port.
  72                  { &PWM0LCR1     ,0x35                           },  // MEILING030:add.
  73                  { &PWM0LCR2     ,0x50                           },  // MEILING030:add.
  74          };
  75          
  76          void Init_Regs(void)
  77          {
  78   1              BYTE index = 0x00;
  79   1          while(index < (sizeof(reg_init_table)/sizeof(sREG_INIT_DEF)))
  80   1          {
  81   2              Tmp_XPntr = reg_init_table[index].address;
  82   2              *Tmp_XPntr = reg_init_table[index].initdata;
  83   2              index ++;
  84   2          }
  85   1              //RamDebug(0xAA);
  86   1      }
  87          
  88          
  89          //for initial PWM setting
  90          const sREG_INIT_DEF code Init_SMBus_table[] =
  91          {
  92          // SMBus
  93            { &SMB4P7USL          ,0x28           },      // 100K
  94            { &SMB4P0USH          ,0x25           },
  95            { &SMB300NS           ,0x03           },
  96            { &SMB250NS           ,0x05           },//:modify SMBUS date step from 0x02 to 0x03// G62:Modify SMBUS date step 
             -from 0x03 to 0x05.
  97            { &SMB25MS            ,0x19           },
  98            { &SMB45P3USL         ,0xA5           },
  99            { &SMBS4P3USH         ,0x01           },
 100            { &SMB4P7A4P0H        ,0x00           },
 101          
 102            { &HOCTL2_A           ,0x01           },
 103            { &HOCTL_A            ,0x03           },
 104            { &HOCTL_A            ,0x01           },
 105            { &HOSTA_A            ,0xFF           },
 106          
 107            { &HOCTL2_B           ,0x01           },
 108            { &HOCTL_B            ,0x03           },
 109            { &HOCTL_B            ,0x01           },
 110            { &HOSTA_B            ,0xFF           },
 111          
 112            { &HOCTL2_C           ,0x01           },
 113            { &HOCTL_C            ,0x03           },
 114            { &HOCTL_C            ,0x01           },
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 3   

 115            { &HOSTA_C            ,0xFF           },
 116          };
 117          //ITE Smart update for initial SMBUS
 118          void Init_SMBus_Regs(void)
 119          {
 120   1          BYTE index = 0x00;
 121   1          while(index < (sizeof(Init_SMBus_table)/sizeof(sREG_INIT_DEF)))
 122   1          {
 123   2              Tmp_XPntr = Init_SMBus_table[index].address;
 124   2                      *Tmp_XPntr = Init_SMBus_table[index].initdata;
 125   2              index ++;
 126   2          }
 127   1      }
 128          
 129          
 130          //----------------------------------------------------------------------------
 131          // Oem_Initialization - Initialize the registers, data variables, and oem
 132          // functions after kernel init. function.
 133          //----------------------------------------------------------------------------
 134          void Oem_Initialization(void)
 135          {
 136   1      
 137   1              ECBIOSVersionH = REV0_BYTE0;
 138   1              ECBIOSVersionL = REV0_BYTE1;
 139   1              ECBIOSUbSVersion = REV0_BYTE3;
 140   1          
 141   1          TP_Type =0xFF; //T071A+
 142   1          // GPCRM4=0X02;
 143   1              CheckKSO1617Support();
 144   1              Init_Regs();
 145   1              Init_SMBus_Regs();      // initial SMBUS
 146   1              //8586 BX test  ChangePLLFrequency(0x07);
 147   1              InitSysMemory2ECRam();          // H2RAM function
 148   1              Init_ADC();
 149   1              Init_PECI();//:Change PECI initialize after S0 states.
 150   1              InitChargerIC();//ANGELAS016:Change charge IC option setting.
 151   1              //SetPowerBatteryparameter();
 152   1              Init_VC(3);     // Init All VC Channel. // CMW 20121022
 153   1              //LID_readytime = 11; //ANGELAS007:Optimize power on sequence.
 154   1      
 155   1              eEEPROMData = Read_Eflash_Byte(EEPROMA2,(EEPROMA1_B03 | 0x07) ,0xE4);   // read USB charger status of EEPRO
             -M 0x0001B7E4
 156   1      #if Support_USB_Charge  //T19+
                  #if UCS1022_Support
                      //UCS1002ID = ReadUCS1022ID();
                      UCS1002ID = SMSC_UCS1002ID;
                      //SET_MASK(EMStatusBit, b1SetUSBChgEn);
                      if (IS_MASK_SET(eEEPROMData,b1SetUSBChgEn))
                      {
                              SET_MASK(EMStatusBit,b1SetUSBChgEn);    // Enable Charger in S4/S5.
                              /*//ANGELAS007:Optimize power on sequence.
                              //ANGELAS005:s+ Support UMA SKU EC_ON pin design.
                              if(NTC_V1>682)
                              {
                                      GPCRF0 = OUTPUT;
                                      SET_MASK(GPDRF,BIT(0));
                              }
                              else
                              //ANGELAS005:e+ Support UMA SKU EC_ON pin design.
                              *///ANGELAS007:Optimize power on sequence.
                              //EC_ON_HI(); //ANGELAS038:remove 
                              //EC_ON2_HI();
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 4   

                              CLR_MASK(LENOVOPMFW_Temp,b5EC_ON_EN);   // EC not turn off USB.
                      }
                      else
                      { CLEAR_MASK(EMStatusBit,b1SetUSBChgEn); }      // Disable Charger in S4/S5.
                  #else
                      if (IS_MASK_SET(eEEPROMData,b1SetUSBChgEn))     // Check S4/S5 feature.
                      {
                              SET_MASK(EMStatusBit,b1SetUSBChgEn);    // Enable Charger in S4/S5.
                              /*//ANGELAS007:Optimize power on sequence.
                              //ANGELAS005:s+ Support UMA SKU EC_ON pin design.
                              if(NTC_V1>682)
                              {
                                      GPCRF0 = OUTPUT;
                                      SET_MASK(GPDRF,BIT(0));
                              }
                              else
                              //ANGELAS005:e+ Support UMA SKU EC_ON pin design.
                              *///ANGELAS007:Optimize power on sequence.
                              //EC_ON_HI(); //ANGELAS038:remove 
                              //EC_ON2_HI();
                              CLR_MASK(LENOVOPMFW_Temp,b5EC_ON_EN);   // EC not turn off USB.
                      }
                      else
                      { CLEAR_MASK(EMStatusBit,b1SetUSBChgEn); }      // Disable Charger in S4/S5.
                  #endif      // UCS1022_Support
              #endif                           // Support_USB_Charge      
 202   1              CheckECCHIPVer();
 203   1      NOVO_COUNTER = T_PSWOFF;//Hang check//JERRYCH003:Enable SMI for hang debug.
 204   1      }
 205          
 206          void CheckECCHIPVer(void)
 207          {
 208   1              if( (ECHIPID1==0x85) && (ECHIPID2==0x86) )
 209   1              {
 210   2                      if( ECHIPVER == 0x05 )
 211   2                      {
 212   3                              cCHIPType = 0x01;
 213   3                      }
 214   2              }
 215   1      }
 216          
 217          //----------------------------------------------------------------------------
 218          // The function of clearing external ram for OEM code
 219          // Clear external ram (0x100~0xFFF)
 220          //----------------------------------------------------------------------------
 221          void Init_ClearRam(void)
 222          {
 223   1          PORT_BYTE_PNTR byte_register_pntr;
 224   1      
 225   1          byte_register_pntr=0x100;
 226   1          while(byte_register_pntr<0x1000)// Clear external ram (0x100~0xFFF)
 227   1          {
 228   2              *byte_register_pntr=0;
 229   2                byte_register_pntr ++;
 230   2          }
 231   1      
 232   1          byte_register_pntr=0x2200;
 233   1          //while(byte_register_pntr<0x2280)// Clear Batt ram BANK0 (0x2200~0x227F)  //MEILING009:remove.
 234   1          while(byte_register_pntr<0x2270) //MEILING009:add.
 235   1          {
 236   2              *byte_register_pntr=0;
 237   2                byte_register_pntr ++;
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 5   

 238   2          }
 239   1      }
 240          
 241          void Clear_RAM_Range(WORD nAddr, WORD nSize)
 242          {
 243   1          Tmp_XPntr = (unsigned int*)nAddr;
 244   1          for( ITempW01=0; ITempW01<=nSize; ITempW01++ )
 245   1          {
 246   2              *Tmp_XPntr = 0;
 247   2              Tmp_XPntr++;
 248   2          }
 249   1      }
 250          
 251          void RAM_travel(WORD sour, WORD targ, BYTE count)
 252          {
 253   1          Tmp_XPntr = (unsigned int*)sour;
 254   1          Tmp_XPntr1 = (unsigned int*)targ;
 255   1          while(count) 
 256   1          {
 257   2              *Tmp_XPntr1++ = *Tmp_XPntr++;
 258   2              count--;
 259   2          };
 260   1      }
 261          
 262          
 263          //----------------------------------------------------------------------------
 264          // The function of DMA for scratch sram
 265          //----------------------------------------------------------------------------
 266          const sDMAScratchSRAM code asDMAScratchSRAM[]=
 267          {
 268                  {       &SCRA1H,        &SCRA1M,        &SCRA1L },              // 1024 bytes (externl ram 0x800 ~ 0xBFF)
 269                  {       &SCRA2H,        &SCRA2M,        &SCRA2L },              // 512 bytes  (externl ram 0xC00 ~ 0xDFF)
 270                  {       &SCRA3H,        &SCRA3M,        &SCRA3L },              // 256 bytes  (externl ram 0xE00 ~ 0xEFF)
 271                  {       &SCRA4H,        &SCRA4M,        &SCRA4L }               // 256 bytes  (externl ram 0xF00 ~ 0xFFF)
 272          
 273          };
 274          void  CacheDma(BYTE sramnum,WORD addr)
 275          {
 276   1              *asDMAScratchSRAM[sramnum].scarh = 0x80;
 277   1              *asDMAScratchSRAM[sramnum].scarm = (WORD) addr >> 8;    // high byte of function address
 278   1              *asDMAScratchSRAM[sramnum].scarl = (WORD) addr & 0xff;  // low byte of function address
 279   1              *asDMAScratchSRAM[sramnum].scarh = 0x00;        // start cache dma
 280   1      }
 281          
 282          
 283          
 284          //----------------------------------------------------------------------------
 285          // Hook_ECExitFollowMode
 286          //----------------------------------------------------------------------------
 287          void Hook_ECExitFollowMode(void)
 288          {
 289   1              CLEAR_MASK(nStopChgStat3H, ECFLASH);
 290   1      }
 291          
 292          //----------------------------------------------------------------------------
 293          // EC leaves follow mode or EC scatch ROM and jump to main function
 294          //  Note:
 295          //      1. Before jump to main function if want to keep EC setting [return(0x33);] is necessary.
 296          //      2. If you don't understand the use of Hook_ECRetunrMainFuncKeepCondition function,
 297          //          don't change anything.
 298          //      3. Always at bank0 (0x9000)
 299          //----------------------------------------------------------------------------
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 6   

 300          BYTE Hook_ECRetunrMainFuncKeepCondition(void)
 301          {
 302   1          if(WinFlashMark==0x33 && WinFlashMark2==0x88)
 303   1          {
 304   2              return(0x33);
 305   2          }
 306   1          else
 307   1          {
 308   2              return(0x00);
 309   2          }
 310   1      }
 311          
 312          void Check_Mirror_Occurs(void)
 313          {
 314   1              if(IS_MASK_SET(FLHCTRL3R,BIT7))
 315   1              {
 316   2                      SET_MASK(FLHCTRL3R,BIT7);
 317   2                      SET_MASK(FLHCTRL3R,BIT0);
 318   2                      SET_MASK(HINSTC1,BIT6);
 319   2              }
 320   1      }
 321          
 322          
 323          const sCharger chargerInitTable[] =
 324          {
 325                  {C_ChargerMode,         &CHGIC_WriteCmd0x12L    },
 326                  {C_ChargeCurrent,       &nBattCharCurrentL      },  
 327                  {C_ChargeVoltage,       &nChargingVoltL },
 328                  {C_ChargerMode1,    &CHGIC_ReadCmd0x3BL         },      
 329                  {C_InputCurrent,        &CHGIC_InputCurrentL    },
 330                  {C_ChargerProchot,      &CHGIC_ReadCmd0x3CL             },
 331                  {C_ChargerProchot1, &CHGIC_ReadCmd0x3DL         },
 332                  {C_ChargerDischargeCurrent,     &CHGIC_ReadCmd0x39L             },
 333                  {C_ChargerMode2,     &CHGIC_WriteCmd0x38L       },      
 334                  {C_ChargerMode3,     &CHGIC_WriteCmd0x37L       },
 335          };
 336          
 337          
 338          
 339          
 340          void InitChargerIC(void)
 341          {
 342   1              chargerInitIndex=0;
 343   1              CHGIC_WriteCmd0x12L=0x18;
 344   1      
 345   1              //power low enable bit: S3/S5 is 1, S0 is 0.
 346   1              if(SystemIsS0)
 347   1                      CHGIC_WriteCmd0x12H=0x61;
 348   1              else
 349   1                      CHGIC_WriteCmd0x12H=0xE1; 
 350   1      
 351   1              nBattCharCurrentL = 0x00; //charge current = 256mA .
 352   1              nBattCharCurrentH = 0x01; 
 353   1              nChargingVoltL=0x40; //Charger initial charge voltage = 12.6V 
 354   1              nChargingVoltH=0x31; //
 355   1              
 356   1              CHGIC_ReadCmd0x3BL=0x10;  
 357   1              CHGIC_ReadCmd0x3BH=0x46;  //COKEYXU003:change 0x44 to 0x46
 358   1      
 359   1              CHGIC_ReadCmd0x3CL=0x56; 
 360   1              CHGIC_ReadCmd0x3CH=0x4E; 
 361   1      
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 7   

 362   1              //COKEYXU041: 135W Adapter
 363   1          CHGIC_InputCurrentL = 0x00; 
 364   1          CHGIC_InputCurrentH = 0x18; //4096mA+2048mA //6.144A
 365   1      
 366   1          CHGIC_ReadCmd0x39L=0x91; //COKEYXU003: discharger current 7825mA
 367   1              CHGIC_ReadCmd0x39H=0x1E; 
 368   1      
 369   1              CHGIC_ReadCmd0x3DL=0x39;  
 370   1              CHGIC_ReadCmd0x3DH=0x51;  //COKEYXU020: 71 to 51
 371   1      
 372   1              CHGIC_WriteCmd0x38L=0x84;  
 373   1              CHGIC_WriteCmd0x38H=0x03; 
 374   1      
 375   1              CHGIC_WriteCmd0x37L=0x44; 
 376   1              CHGIC_WriteCmd0x37H=0x86;
 377   1              
 378   1              while(chargerInitIndex < (sizeof(chargerInitTable)/sizeof(sCharger)))
 379   1              {
 380   2                      bRWSMBus(SMbusChB, SMbusWW, Charger_Addr, chargerInitTable[chargerInitIndex].Cmd, 
 381   2                      chargerInitTable[chargerInitIndex].Var,SMBus_NoPEC);
 382   2                      chargerInitIndex++;
 383   2              }
 384   1        
 385   1      }
 386          
 387          
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0028 (BEGIN)
0000         L?0041:
0000 EB                MOV     A,R3
0001 75F006            MOV     B,#06H
0004 A4                MUL     AB
0005 2400        R     ADD     A,#LOW asDMAScratchSRAM
0007 F582              MOV     DPL,A
0009 E4                CLR     A
000A 3400        R     ADDC    A,#HIGH asDMAScratchSRAM
000C F583              MOV     DPH,A
000E E4                CLR     A
000F 93                MOVC    A,@A+DPTR
0010 FE                MOV     R6,A
0011 7401              MOV     A,#01H
0013 93                MOVC    A,@A+DPTR
0014 F582              MOV     DPL,A
0016 8E83              MOV     DPH,R6
0018 22                RET     
0019         L?0042:
0019 F583              MOV     DPH,A
001B E4                CLR     A
001C 93                MOVC    A,@A+DPTR
001D FC                MOV     R4,A
001E 7401              MOV     A,#01H
0020 93                MOVC    A,@A+DPTR
0021 FD                MOV     R5,A
0022 7800        E     MOV     R0,#LOW Tmp_XPntr
0024 EC                MOV     A,R4
0025 F6                MOV     @R0,A
0026 08                INC     R0
0027 ED                MOV     A,R5
0028 F6                MOV     @R0,A
0029 EF                MOV     A,R7
002A 75F003            MOV     B,#03H
002D A4                MUL     AB
002E 22                RET     
002F         L?0043:
002F 7800        E     MOV     R0,#LOW Tmp_XPntr
0031         L?0044:
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 CF                XCH     A,R7
0036 F6                MOV     @R0,A
0037 08                INC     R0
0038 EF                MOV     A,R7
0039 F6                MOV     @R0,A
003A 22                RET     
003B         L?0045:
003B F583              MOV     DPH,A
003D E4                CLR     A
003E 93                MOVC    A,@A+DPTR
003F FC                MOV     R4,A
0040 7401              MOV     A,#01H
0042 93                MOVC    A,@A+DPTR
0043         L?0046:
0043 F582              MOV     DPL,A
0045 8C83              MOV     DPH,R4
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 9   

0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
0049 22                RET     
004A         L?0047:
004A F583              MOV     DPH,A
004C E4                CLR     A
004D 93                MOVC    A,@A+DPTR
004E 8D82              MOV     DPL,R5
0050 8C83              MOV     DPH,R4
0052 F0                MOVX    @DPTR,A
0053 0F                INC     R7
0054 EF                MOV     A,R7
0055 22                RET     
             ; FUNCTION Com0028 (END)

             ; FUNCTION Oem_StartUp (BEGIN)
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 19
0000 22                RET     
             ; FUNCTION Oem_StartUp (END)

             ; FUNCTION Init_Regs (BEGIN)
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
;---- Variable 'index' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002         ?C0002:
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
0002 EF                MOV     A,R7
0003 75F003            MOV     B,#03H
0006 A4                MUL     AB
0007 2400        R     ADD     A,#LOW reg_init_table
0009 F582              MOV     DPL,A
000B E4                CLR     A
000C 3400        R     ADDC    A,#HIGH reg_init_table
                                           ; SOURCE LINE # 82
000E 120000      R     LCALL   L?0042
0011 2400        R     ADD     A,#LOW reg_init_table+02H
0013 F582              MOV     DPL,A
0015 E4                CLR     A
0016 3400        R     ADDC    A,#HIGH reg_init_table+02H
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
0018 120000      R     LCALL   L?0047
001B B425E4            CJNE    A,#025H,?C0002
                                           ; SOURCE LINE # 86
001E         ?C0004:
001E 22                RET     
             ; FUNCTION Init_Regs (END)

             ; FUNCTION Init_SMBus_Regs (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
;---- Variable 'index' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 10  

0002         ?C0005:
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
0002 EF                MOV     A,R7
0003 75F003            MOV     B,#03H
0006 A4                MUL     AB
0007 2400        R     ADD     A,#LOW Init_SMBus_table
0009 F582              MOV     DPL,A
000B E4                CLR     A
000C 3400        R     ADDC    A,#HIGH Init_SMBus_table
                                           ; SOURCE LINE # 124
000E 120000      R     LCALL   L?0042
0011 2400        R     ADD     A,#LOW Init_SMBus_table+02H
0013 F582              MOV     DPL,A
0015 E4                CLR     A
0016 3400        R     ADDC    A,#HIGH Init_SMBus_table+02H
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
0018 120000      R     LCALL   L?0047
001B B414E4            CJNE    A,#014H,?C0005
                                           ; SOURCE LINE # 127
001E         ?C0007:
001E 22                RET     
             ; FUNCTION Init_SMBus_Regs (END)

             ; FUNCTION Oem_Initialization (BEGIN)
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 137
0000 900000      E     MOV     DPTR,#ECBIOSVersionH
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
0006 900000      E     MOV     DPTR,#ECBIOSVersionL
0009 741B              MOV     A,#01BH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECBIOSUbSVersion
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
0011 900000      E     MOV     DPTR,#TP_Type
0014 74FF              MOV     A,#0FFH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
0017 120000      E     LCALL   CheckKSO1617Support
                                           ; SOURCE LINE # 144
001A 120000      R     LCALL   Init_Regs
                                           ; SOURCE LINE # 145
001D 120000      R     LCALL   Init_SMBus_Regs
                                           ; SOURCE LINE # 147
0020 120000      E     LCALL   InitSysMemory2ECRam
                                           ; SOURCE LINE # 148
0023 120000      E     LCALL   Init_ADC
                                           ; SOURCE LINE # 149
0026 120000      E     LCALL   Init_PECI
                                           ; SOURCE LINE # 150
0029 120000      R     LCALL   InitChargerIC
                                           ; SOURCE LINE # 152
002C 7F03              MOV     R7,#03H
002E 120000      E     LCALL   _Init_VC
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 11  

                                           ; SOURCE LINE # 155
0031 7BE4              MOV     R3,#0E4H
0033 7DB7              MOV     R5,#0B7H
0035 7F01              MOV     R7,#01H
0037 120000      E     LCALL   _Read_Eflash_Byte
003A 900000      E     MOV     DPTR,#eEEPROMData
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
003F 120000      R     LCALL   CheckECCHIPVer
                                           ; SOURCE LINE # 203
0042 900000      E     MOV     DPTR,#NOVO_COUNTER
0045 7401              MOV     A,#01H
0047 F0                MOVX    @DPTR,A
0048 A3                INC     DPTR
0049 74F4              MOV     A,#0F4H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
004C 22                RET     
             ; FUNCTION Oem_Initialization (END)

             ; FUNCTION CheckECCHIPVer (BEGIN)
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
0000 900000      E     MOV     DPTR,#ECHIPID1
0003 E0                MOVX    A,@DPTR
0004 B48514            CJNE    A,#085H,?C0011
0007 900000      E     MOV     DPTR,#ECHIPID2
000A E0                MOVX    A,@DPTR
000B B4860D            CJNE    A,#086H,?C0011
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
000E 900000      E     MOV     DPTR,#ECHIPVER
0011 E0                MOVX    A,@DPTR
0012 B40506            CJNE    A,#05H,?C0011
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0015 900000      E     MOV     DPTR,#cCHIPType
0018 7401              MOV     A,#01H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
001B         ?C0011:
001B 22                RET     
             ; FUNCTION CheckECCHIPVer (END)

             ; FUNCTION Init_ClearRam (BEGIN)
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 225
;---- Variable 'byte_register_pntr' assigned to Register 'DPTR' ----
0000 900100            MOV     DPTR,#0100H
0003         ?C0012:
                                           ; SOURCE LINE # 226
0003 AE83              MOV     R6,DPH
0005 C3                CLR     C
0006 EE                MOV     A,R6
0007 9410              SUBB    A,#010H
0009 5005              JNC     ?C0013
                                           ; SOURCE LINE # 227
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 12  

                                           ; SOURCE LINE # 228
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
000D A3                INC     DPTR
                                           ; SOURCE LINE # 230
000E 80F3              SJMP    ?C0012
0010         ?C0013:
                                           ; SOURCE LINE # 232
0010 902200            MOV     DPTR,#02200H
0013         ?C0014:
                                           ; SOURCE LINE # 234
0013 AF82              MOV     R7,DPL
0015 AE83              MOV     R6,DPH
0017 C3                CLR     C
0018 EF                MOV     A,R7
0019 9470              SUBB    A,#070H
001B EE                MOV     A,R6
001C 9422              SUBB    A,#022H
001E 5005              JNC     ?C0016
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
0020 E4                CLR     A
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
0022 A3                INC     DPTR
                                           ; SOURCE LINE # 238
0023 80EE              SJMP    ?C0014
                                           ; SOURCE LINE # 239
0025         ?C0016:
0025 22                RET     
             ; FUNCTION Init_ClearRam (END)

             ; FUNCTION _Clear_RAM_Range (BEGIN)
                                           ; SOURCE LINE # 241
0000 900000      R     MOV     DPTR,#nAddr
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#nSize
000B EC                MOV     A,R4
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E ED                MOV     A,R5
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
0010 900000      R     MOV     DPTR,#nAddr
0013 120000      R     LCALL   L?0043
                                           ; SOURCE LINE # 244
0016 E4                CLR     A
0017 F500        E     MOV     ITempW01,A
0019 F500        E     MOV     ITempW01+01H,A
001B         ?C0017:
001B C3                CLR     C
001C 900000      R     MOV     DPTR,#nSize+01H
001F E0                MOVX    A,@DPTR
0020 9500        E     SUBB    A,ITempW01+01H
0022 900000      R     MOV     DPTR,#nSize
0025 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 13  

0026 9500        E     SUBB    A,ITempW01
0028 401C              JC      ?C0020
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
002A 7800        E     MOV     R0,#LOW Tmp_XPntr
002C E6                MOV     A,@R0
002D FE                MOV     R6,A
002E 08                INC     R0
002F E6                MOV     A,@R0
0030 F582              MOV     DPL,A
0032 8E83              MOV     DPH,R6
0034 E4                CLR     A
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0036 06                INC     @R0
0037 E6                MOV     A,@R0
0038 18                DEC     R0
0039 7001              JNZ     ?C0036
003B 06                INC     @R0
003C         ?C0036:
                                           ; SOURCE LINE # 248
003C 0500        E     INC     ITempW01+01H
003E E500        E     MOV     A,ITempW01+01H
0040 70D9              JNZ     ?C0017
0042 0500        E     INC     ITempW01
0044         ?C0037:
0044 80D5              SJMP    ?C0017
                                           ; SOURCE LINE # 249
0046         ?C0020:
0046 22                RET     
             ; FUNCTION _Clear_RAM_Range (END)

             ; FUNCTION _RAM_travel (BEGIN)
                                           ; SOURCE LINE # 251
0000 900000      R     MOV     DPTR,#sour
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#targ
000B EC                MOV     A,R4
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E ED                MOV     A,R5
000F F0                MOVX    @DPTR,A
;---- Variable 'count' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
0010 900000      R     MOV     DPTR,#sour
0013 120000      R     LCALL   L?0043
                                           ; SOURCE LINE # 254
0016 900000      R     MOV     DPTR,#targ
0019 7800        E     MOV     R0,#LOW Tmp_XPntr1
001B 120000      R     LCALL   L?0044
001E         ?C0021:
                                           ; SOURCE LINE # 255
001E EB                MOV     A,R3
001F 6026              JZ      ?C0023
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0021 7800        E     MOV     R0,#LOW Tmp_XPntr
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 14  

0023 08                INC     R0
0024 06                INC     @R0
0025 E6                MOV     A,@R0
0026 18                DEC     R0
0027 CE                XCH     A,R6
0028 E6                MOV     A,@R0
0029 CE                XCH     A,R6
002A 7001              JNZ     ?C0038
002C 06                INC     @R0
002D         ?C0038:
002D 14                DEC     A
002E F582              MOV     DPL,A
0030 8E83              MOV     DPH,R6
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 7800        E     MOV     R0,#LOW Tmp_XPntr1
0036 08                INC     R0
0037 06                INC     @R0
0038 E6                MOV     A,@R0
0039 18                DEC     R0
003A CC                XCH     A,R4
003B E6                MOV     A,@R0
003C CC                XCH     A,R4
003D 7001              JNZ     ?C0039
003F 06                INC     @R0
0040         ?C0039:
0040 14                DEC     A
0041 120000      R     LCALL   L?0046
                                           ; SOURCE LINE # 258
0044 1B                DEC     R3
                                           ; SOURCE LINE # 259
0045 80D7              SJMP    ?C0021
                                           ; SOURCE LINE # 260
0047         ?C0023:
0047 22                RET     
             ; FUNCTION _RAM_travel (END)

             ; FUNCTION _CacheDma (BEGIN)
                                           ; SOURCE LINE # 274
0000 900000      R     MOV     DPTR,#addr
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
;---- Variable 'sramnum' assigned to Register 'R3' ----
0008 CB                XCH     A,R3
0009 EF                MOV     A,R7
000A CB                XCH     A,R3
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
000B 120000      R     LCALL   L?0041
000E 7480              MOV     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
0011 900000      R     MOV     DPTR,#addr
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 EB                MOV     A,R3
0017 75F006            MOV     B,#06H
001A A4                MUL     AB
001B 2400        R     ADD     A,#LOW asDMAScratchSRAM+02H
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 15  

001D F582              MOV     DPL,A
001F E4                CLR     A
0020 3400        R     ADDC    A,#HIGH asDMAScratchSRAM+02H
0022 120000      R     LCALL   L?0045
                                           ; SOURCE LINE # 278
0025 900000      R     MOV     DPTR,#addr
0028 E0                MOVX    A,@DPTR
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EB                MOV     A,R3
002D 75F006            MOV     B,#06H
0030 A4                MUL     AB
0031 2400        R     ADD     A,#LOW asDMAScratchSRAM+04H
0033 F582              MOV     DPL,A
0035 E4                CLR     A
0036 3400        R     ADDC    A,#HIGH asDMAScratchSRAM+04H
0038 120000      R     LCALL   L?0045
                                           ; SOURCE LINE # 279
003B 120000      R     LCALL   L?0041
003E E4                CLR     A
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
0040 22                RET     
             ; FUNCTION _CacheDma (END)

             ; FUNCTION Hook_ECExitFollowMode (BEGIN)
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0000 900000      E     MOV     DPTR,#nStopChgStat3H
0003 E0                MOVX    A,@DPTR
0004 54EF              ANL     A,#0EFH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
0007 22                RET     
             ; FUNCTION Hook_ECExitFollowMode (END)

             ; FUNCTION Hook_ECRetunrMainFuncKeepCondition (BEGIN)
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
0000 900000      E     MOV     DPTR,#WinFlashMark
0003 E0                MOVX    A,@DPTR
0004 B4330A            CJNE    A,#033H,?C0026
0007 900000      E     MOV     DPTR,#WinFlashMark2
000A E0                MOVX    A,@DPTR
000B B48803            CJNE    A,#088H,?C0026
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 304
000E 7F33              MOV     R7,#033H
0010 22                RET     
                                           ; SOURCE LINE # 305
0011         ?C0026:
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
0011 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
0013         ?C0027:
0013 22                RET     
             ; FUNCTION Hook_ECRetunrMainFuncKeepCondition (END)
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 16  


             ; FUNCTION Check_Mirror_Occurs (BEGIN)
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
0000 900000      E     MOV     DPTR,#FLHCTRL3R
0003 E0                MOVX    A,@DPTR
0004 30E70F            JNB     ACC.7,?C0030
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
0007 E0                MOVX    A,@DPTR
0008 4480              ORL     A,#080H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
000B E0                MOVX    A,@DPTR
000C 4401              ORL     A,#01H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
000F 900000      E     MOV     DPTR,#HINSTC1
0012 E0                MOVX    A,@DPTR
0013 4440              ORL     A,#040H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
0016         ?C0030:
0016 22                RET     
             ; FUNCTION Check_Mirror_Occurs (END)

             ; FUNCTION InitChargerIC (BEGIN)
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#chargerInitIndex
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
0005 900000      E     MOV     DPTR,#CHGIC_WriteCmd0x12L
0008 7418              MOV     A,#018H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
000B 900000      E     MOV     DPTR,#SysPowState
000E E0                MOVX    A,@DPTR
000F 900000      E     MOV     DPTR,#CHGIC_WriteCmd0x12H
0012 B41105            CJNE    A,#011H,?C0031
                                           ; SOURCE LINE # 347
0015 7461              MOV     A,#061H
0017 F0                MOVX    @DPTR,A
0018 8003              SJMP    ?C0032
001A         ?C0031:
                                           ; SOURCE LINE # 349
001A 74E1              MOV     A,#0E1H
001C F0                MOVX    @DPTR,A
001D         ?C0032:
                                           ; SOURCE LINE # 351
001D E4                CLR     A
001E 900000      E     MOV     DPTR,#nBattCharCurrentL
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
0022 900000      E     MOV     DPTR,#nBattCharCurrentH
0025 04                INC     A
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 17  

0027 900000      E     MOV     DPTR,#nChargingVoltL
002A 7440              MOV     A,#040H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
002D 900000      E     MOV     DPTR,#nChargingVoltH
0030 7431              MOV     A,#031H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 356
0033 900000      E     MOV     DPTR,#CHGIC_ReadCmd0x3BL
0036 7410              MOV     A,#010H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
0039 900000      E     MOV     DPTR,#CHGIC_ReadCmd0x3BH
003C 7446              MOV     A,#046H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
003F 900000      E     MOV     DPTR,#CHGIC_ReadCmd0x3CL
0042 7456              MOV     A,#056H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
0045 900000      E     MOV     DPTR,#CHGIC_ReadCmd0x3CH
0048 744E              MOV     A,#04EH
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
004B E4                CLR     A
004C 900000      E     MOV     DPTR,#CHGIC_InputCurrentL
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
0050 900000      E     MOV     DPTR,#CHGIC_InputCurrentH
0053 7418              MOV     A,#018H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
0056 900000      E     MOV     DPTR,#CHGIC_ReadCmd0x39L
0059 7491              MOV     A,#091H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
005C 900000      E     MOV     DPTR,#CHGIC_ReadCmd0x39H
005F 741E              MOV     A,#01EH
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
0062 900000      E     MOV     DPTR,#CHGIC_ReadCmd0x3DL
0065 7439              MOV     A,#039H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0068 900000      E     MOV     DPTR,#CHGIC_ReadCmd0x3DH
006B 7451              MOV     A,#051H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
006E 900000      E     MOV     DPTR,#CHGIC_WriteCmd0x38L
0071 7484              MOV     A,#084H
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
0074 900000      E     MOV     DPTR,#CHGIC_WriteCmd0x38H
0077 7403              MOV     A,#03H
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
007A 900000      E     MOV     DPTR,#CHGIC_WriteCmd0x37L
007D 7444              MOV     A,#044H
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
0080 900000      E     MOV     DPTR,#CHGIC_WriteCmd0x37H
0083 7486              MOV     A,#086H
C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 18  

0085 F0                MOVX    @DPTR,A
0086         ?C0033:
                                           ; SOURCE LINE # 378
0086 900000      E     MOV     DPTR,#chargerInitIndex
0089 E0                MOVX    A,@DPTR
008A C3                CLR     C
008B 940A              SUBB    A,#0AH
008D 504A              JNC     ?C0035
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
008F E0                MOVX    A,@DPTR
0090 25E0              ADD     A,ACC
0092 25E0              ADD     A,ACC
0094 2400        R     ADD     A,#LOW chargerInitTable
0096 F582              MOV     DPL,A
0098 E4                CLR     A
0099 3400        R     ADDC    A,#HIGH chargerInitTable
009B F583              MOV     DPH,A
009D E0                MOVX    A,@DPTR
009E FF                MOV     R7,A
009F 900000      E     MOV     DPTR,#chargerInitIndex
00A2 E0                MOVX    A,@DPTR
00A3 25E0              ADD     A,ACC
00A5 25E0              ADD     A,ACC
00A7 2400        R     ADD     A,#LOW chargerInitTable+01H
00A9 F582              MOV     DPL,A
00AB E4                CLR     A
00AC 3400        R     ADDC    A,#HIGH chargerInitTable+01H
00AE F583              MOV     DPH,A
00B0 120000      E     LCALL   ?C?PLDXDATA
00B3 CD                XCH     A,R5
00B4 E9                MOV     A,R1
00B5 CD                XCH     A,R5
00B6 900000      E     MOV     DPTR,#?_bRWSMBus?BYTE+04H
00B9 EA                MOV     A,R2
00BA F0                MOVX    @DPTR,A
00BB A3                INC     DPTR
00BC ED                MOV     A,R5
00BD F0                MOVX    @DPTR,A
00BE 900000      E     MOV     DPTR,#?_bRWSMBus?BYTE+03H
00C1 EF                MOV     A,R7
00C2 F0                MOVX    @DPTR,A
00C3 E4                CLR     A
00C4 900000      E     MOV     DPTR,#?_bRWSMBus?BYTE+06H
00C7 F0                MOVX    @DPTR,A
00C8 7B12              MOV     R3,#012H
00CA 7D8C              MOV     R5,#08CH
00CC 7F01              MOV     R7,#01H
00CE 120000      E     LCALL   _bRWSMBus
                                           ; SOURCE LINE # 382
00D1 900000      E     MOV     DPTR,#chargerInitIndex
00D4 E0                MOVX    A,@DPTR
00D5 04                INC     A
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 383
00D7 80AD              SJMP    ?C0033
                                           ; SOURCE LINE # 385
00D9         ?C0035:
00D9 22                RET     
             ; FUNCTION InitChargerIC (END)


C51 COMPILER V8.12   OEM_INIT                                                              07/28/2018 12:03:50 PAGE 19  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    769    ----
   CONSTANT SIZE    =    195    ----
   XDATA SIZE       =     40      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
