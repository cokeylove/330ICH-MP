C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE CORE_IRQ
OBJECT MODULE PLACED IN Code\CORE\CORE_IRQ.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\CORE\CORE_IRQ.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\I
                    -NCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_IRQ.C - Interrupt Service Routines (ISR).
   3           *
   4           * The Interrupt Service Routines (ISR).  The actual interrupt functions are
   5           * implemented in the "CHIP_IRQ.C".
   6           *
   7           * Copyright (c) 1983-2007, Insyde Software Corporation. All Rights Reserved.
   8           *
   9           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
  10           * transmit, broadcast, present, recite, release, license or otherwise exploit
  11           * any part of this publication in any form, by any means, without the prior
  12           * written permission of Insyde Software Corporation.
  13           *---------------------------------------------------------------------------*/
  14          
  15          #include <CORE_INCLUDE.H>
  16          #include <OEM_INCLUDE.H>
  17          
  18          //----------------------------------------------------------------------------
  19          // Input full irq lock scan
  20          //----------------------------------------------------------------------------
  21          void IrqLock_scan(void)
  22          {
  23   1              Int_Var.Scan_Lock = 1;
  24   1          //Timer_B.fbit.SEND_ENABLE = 0;     // Lock scanner.
  25   1      }
  26          
  27          //----------------------------------------------------------------------------
  28          // Null function
  29          //----------------------------------------------------------------------------
  30          void IRQ_INT0_Null(void)
  31          {
  32   1      
  33   1      }
  34          
  35          //----------------------------------------------------------------------------
  36          // WKO[20]
  37          //----------------------------------------------------------------------------
  38          void IRQ_INT1_WKO20(void)
  39          {
  40   1          Hook_IRQ_INT1_WKO20();
  41   1      }
  42          
  43          //----------------------------------------------------------------------------
  44          // KBC Output Buffer Empty Interrupt
  45          //----------------------------------------------------------------------------
  46          void IRQ_INT2_KBCOBE(void)
  47          {
  48   1          Hook_IRQ_INT2_KBCOBE();
  49   1      }
  50          
  51          //----------------------------------------------------------------------------
  52          // PMC Output Buffer Empty Intr. PMC1 Output Buffer Empty Intr.
  53          //----------------------------------------------------------------------------
  54          void IRQ_INT3_PMCPMC1OBE(void)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 2   

  55          {
  56   1          Hook_IRQ_INT3_PMCPMC1OBE();
  57   1      }
  58          
  59          //----------------------------------------------------------------------------
  60          // SMBus D Interrupt
  61          //----------------------------------------------------------------------------
  62          void IRQ_INT4_SMBusD(void)
  63          {
  64   1          Hook_IRQ_INT4_SMBusD();
  65   1      }
  66          
  67          //----------------------------------------------------------------------------
  68          // WKINTAD (WKINTA or WKINTD)
  69          //----------------------------------------------------------------------------
  70          void IRQ_INT5_WKINTAD(void)
  71          {
  72   1          Hook_IRQ_INT5_WKINTAD();
  73   1      }
  74          
  75          //----------------------------------------------------------------------------
  76          // WKO[23]
  77          //----------------------------------------------------------------------------
  78          void IRQ_INT6_WKO23(void)
  79          {
  80   1          Hook_IRQ_INT6_WKO23();
  81   1      }
  82          
  83          //----------------------------------------------------------------------------
  84          // PWM Interrupt
  85          //----------------------------------------------------------------------------
  86          void IRQ_INT7_PWM(void)
  87          {
  88   1          Hook_IRQ_INT7_PWM();
  89   1      }
  90          
  91          //----------------------------------------------------------------------------
  92          // ADC Interrupt
  93          //----------------------------------------------------------------------------
  94          void IRQ_INT8_ADC(void)
  95          {
  96   1          Hook_IRQ_INT8_ADC();
  97   1      }
  98          
  99          //----------------------------------------------------------------------------
 100          // SMBus A Interrupt
 101          //----------------------------------------------------------------------------
 102          void IRQ_INT9_SMBusA(void)
 103          {
 104   1          Hook_IRQ_INT9_SMBusA();
 105   1      }
 106          
 107          //----------------------------------------------------------------------------
 108          // SMBus B Interrupt
 109          //----------------------------------------------------------------------------
 110          void IRQ_INT10_SMBusB(void)
 111          {
 112   1          Hook_IRQ_INT10_SMBusB();
 113   1      }
 114          
 115          //----------------------------------------------------------------------------
 116          // KB Matrix Scan Interrupt
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 3   

 117          //----------------------------------------------------------------------------
 118          void IRQ_INT11_KBMatrixScan(void)
 119          {
 120   1              CLEAR_MASK(IER1,Int_KB);
 121   1          ISR1 = Int_KB;
 122   1              F_Service_KEY = 1;      // Post service request to scan internal keyboard.
 123   1      
 124   1          Hook_IRQ_INT11_KBMatrixScan();
 125   1      }
 126          
 127          //----------------------------------------------------------------------------
 128          // WKO[26]
 129          //----------------------------------------------------------------------------
 130          void IRQ_INT12_WKO26(void)
 131          {
 132   1          Hook_IRQ_INT12_WKO26();
 133   1      }
 134          
 135          //----------------------------------------------------------------------------
 136          // WKINTC
 137          //----------------------------------------------------------------------------
 138          void IRQ_INT13_WKINTC(void)
 139          {
 140   1          Hook_IRQ_INT13_WKINTC();
 141   1      }
 142          
 143          //----------------------------------------------------------------------------
 144          // WKO[25]
 145          //----------------------------------------------------------------------------
 146          void IRQ_INT14_WKO25(void)
 147          {
 148   1          Hook_IRQ_INT14_WKO25();
 149   1      }
 150          
 151          //----------------------------------------------------------------------------
 152          // CIR Interrupt
 153          //----------------------------------------------------------------------------
 154          void IRQ_INT15_CIR(void)
 155          {
 156   1          Hook_IRQ_INT15_CIR();
 157   1      }
 158          
 159          //----------------------------------------------------------------------------
 160          // SMBus C Interrupt
 161          //----------------------------------------------------------------------------
 162          void IRQ_INT16_SMBusC(void)
 163          {
 164   1          Hook_IRQ_INT16_SMBusC();
 165   1      }
 166          
 167          //----------------------------------------------------------------------------
 168          // WKO[24]
 169          //----------------------------------------------------------------------------
 170          void IRQ_INT17_WKO24(void)
 171          {
 172   1          Hook_IRQ_INT17_WKO24();
 173   1      }
 174          
 175          //----------------------------------------------------------------------------
 176          // PS/2 Interrupt 2
 177          //----------------------------------------------------------------------------
 178          void IRQ_INT18_PS2Interrupt2(void)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 4   

 179          {
 180   1              /*if(IS_MASK_SET(PSSTS3, TDS))    // Transaction done interrupt
 181   1              {
 182   1                      CLEAR_MASK(IER2,Int_PS2_2); // Disable PS2 interrupt 2
 183   1                  ISR2 = Int_PS2_2;           // Write to clear pending interrupt
 184   1      
 185   1                  if(SendtoAUXFlag)
 186   1                  {
 187   1                  for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
 188   1                  {
 189   1                      if(IS_MASK_SET(PSSTS3, DLS))   // DATA Line Status is high
 190   1                      {
 191   1                          break;
 192   1                      }
 193   1                      else
 194   1                      {
 195   1                          WNCKR = 0x00;   // Delay 15.26 us
 196   1                      }
 197   1                  }
 198   1              }
 199   1              else
 200   1              {
 201   1                  WNCKR = 0x00;           // Delay 15.26 us
 202   1                  WNCKR = 0x00;           // Delay 15.26 us
 203   1                  WNCKR = 0x00;           // Delay 15.26 us
 204   1                  WNCKR = 0x00;           // Delay 15.26 us
 205   1                  WNCKR = 0x00;           // Delay 15.26 us
 206   1                  WNCKR = 0x00;           // Delay 15.26 us
 207   1                  WNCKR = 0x00;           // Delay 15.26 us
 208   1              }
 209   1      
 210   1                      PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
 211   1                      PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
 212   1                      PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 213   1      
 214   1                      PS2_IRQ_Channel = 2;        // Set PS2 2 service flag
 215   1                      F_Service_PS2 = 1;          // Set main service flag
 216   1                      PS2StartBit=0;                  // clear start bit flag
 217   1                  PS2_SSIRQ_Channel = 0xFF;   //
 218   1                  PS2PortxData[2]=PSDAT3;
 219   1              }
 220   1          else                                                // Start bit interrupt
 221   1          {
 222   1              PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
 223   1              PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
 224   1              IER2&= ~(Int_PS2_0+Int_PS2_1+Int_PS2_2);    // Disable all PS2 interrupt
 225   1              ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
 226   1              PS2StartBit = 1;                // Set start bit flag
 227   1              PS2_SSIRQ_Channel = 2;      //
 228   1              SET_MASK(IER2,Int_PS2_2);   // Enable PS2 interrupt 2
 229   1          }
 230   1      
 231   1          Hook_IRQ_INT18_PS2Interrupt2();*/
 232   1          
 233   1      #if TouchPad_only
 234   1              CLEAR_MASK(IER2,Int_PS2_2); // Disable PS2 interrupt 2  
 235   1          ISR2 = Int_PS2_2;           // Write to clear pending interrupt
 236   1              
 237   1          if(SendtoAUXFlag)
 238   1          {
 239   2              for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
 240   2              {
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 5   

 241   3                  //if(IS_MASK_SET(PSSTS3, DLS))   // DATA Line Status is high
 242   3                  if(IS_MASK_SET(GPDRF, BIT5))   // DATA Line Status is high
 243   3                  {
 244   4                      break;
 245   4                  }
 246   3                  else
 247   3                  {
 248   4                      WNCKR = 0x00;   // Delay 15.26 us
 249   4                  }
 250   3              }
 251   2          }
 252   1           
 253   1          PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
 254   1          PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
 255   1          PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 256   1           
 257   1          PS2_IRQ_Channel = 2;        // Set PS2 2 service flag
 258   1          F_Service_PS2 = 1;          // Set main service flag
 259   1          PS2StartBit=0;                 // clear start bit flag
 260   1          PS2_SSIRQ_Channel = 0xFF;   //
 261   1          PS2PortxData[2]=PSDAT3;
 262   1      #else
                  if(IS_MASK_SET(PSSTS3, TDS))    // Transaction done interrupt 
                  {
                      CLEAR_MASK(IER2,Int_PS2_2); // Disable PS2 interrupt 2  
                      ISR2 = Int_PS2_2;           // Write to clear pending interrupt
                              
                      if(SendtoAUXFlag)
                      {
                          for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
                          {
                              if(IS_MASK_SET(PSSTS3, DLS))   // DATA Line Status is high
                              {
                                  break;
                              }
                              else
                              {
                                  WNCKR = 0x00;   // Delay 15.26 us
                              }
                          }
                      }
                      else
                      {
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                      }
                          
                      PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
                      PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
                      PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
                   
                      PS2_IRQ_Channel = 2;        // Set PS2 2 service flag
                      F_Service_PS2 = 1;          // Set main service flag
                      PS2StartBit=0;                 // clear start bit flag
                      PS2_SSIRQ_Channel = 0xFF;   //
                      PS2PortxData[2]=PSDAT3;
                      }
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 6   

                      else                                          // Start bit interrupt 
                  {
                      PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
                      PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
                      IER2&= ~(Int_PS2_0+Int_PS2_1+Int_PS2_2);    // Disable all PS2 interrupt
                      ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
                      PS2StartBit = 1;               // Set start bit flag
                      PS2_SSIRQ_Channel = 2;      //
                      SET_MASK(IER2,Int_PS2_2);   // Enable PS2 interrupt 2
                  }       
              #endif
 314   1              Hook_IRQ_INT18_PS2Interrupt2();
 315   1      }
 316          
 317          //----------------------------------------------------------------------------
 318          // PS/2 Interrupt 1
 319          //----------------------------------------------------------------------------
 320          void IRQ_INT19_PS2Interrupt1(void)
 321          {
 322   1      /*      if(IS_MASK_SET(PSSTS2, TDS))    // Transaction done interrupt
 323   1              {
 324   1                      CLEAR_MASK(IER2,Int_PS2_1); // Disable PS2 interrupt 1
 325   1                  ISR2 = Int_PS2_1;           // Write to clear pending interrupt
 326   1      
 327   1                  if(SendtoAUXFlag)
 328   1                  {
 329   1                  for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
 330   1                  {
 331   1                      if(IS_MASK_SET(PSSTS2, DLS))   // DATA Line Status is high
 332   1                      {
 333   1                          break;
 334   1                      }
 335   1                      else
 336   1                      {
 337   1                          WNCKR = 0x00;   // Delay 15.26 us
 338   1                      }
 339   1                  }
 340   1              }
 341   1              else
 342   1              {
 343   1                  WNCKR = 0x00;           // Delay 15.26 us
 344   1                  WNCKR = 0x00;           // Delay 15.26 us
 345   1                  WNCKR = 0x00;           // Delay 15.26 us
 346   1                  WNCKR = 0x00;           // Delay 15.26 us
 347   1                  WNCKR = 0x00;           // Delay 15.26 us
 348   1                  WNCKR = 0x00;           // Delay 15.26 us
 349   1                  WNCKR = 0x00;           // Delay 15.26 us
 350   1              }
 351   1      
 352   1                      PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
 353   1                      PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
 354   1                      PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 355   1      
 356   1                  PS2_IRQ_Channel = 1;        // Set PS2 1 service flag
 357   1                      F_Service_PS2 = 1;          // Set main service flag
 358   1              PS2StartBit=0;                  // clear start bit flag
 359   1              PS2_SSIRQ_Channel = 0xFF;   //
 360   1                  PS2PortxData[1]=PSDAT2;
 361   1              }
 362   1          else                                                // Start bit interrupt
 363   1          {
 364   1              PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 7   

 365   1              PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 366   1              IER2&= ~(Int_PS2_0+Int_PS2_1+Int_PS2_2);    // Disable all PS2 interrupt
 367   1              ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
 368   1              PS2StartBit = 1;                // Set start bit flag
 369   1              PS2_SSIRQ_Channel = 1;      //
 370   1              SET_MASK(IER2,Int_PS2_1);   // Enable PS2 interrupt 1
 371   1          }
 372   1      
 373   1          Hook_IRQ_INT19_PS2Interrupt1();*/
 374   1          
 375   1      #if TouchPad_only
 376   1              CLEAR_MASK(IER2,Int_PS2_1); // Disable PS2 interrupt 1  
 377   1              ISR2 = Int_PS2_1;           // Write to clear pending interrupt 
 378   1        
 379   1              if(SendtoAUXFlag)
 380   1              {
 381   2              for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
 382   2              {
 383   3                      //if(IS_MASK_SET(PSSTS2, DLS))   // DATA Line Status is high
 384   3                      if(IS_MASK_SET(GPDRF, BIT3))   // DATA Line Status is high
 385   3                      {
 386   4                      break;
 387   4                      }
 388   3                      else
 389   3                      {
 390   4                      WNCKR = 0x00;   // Delay 15.26 us
 391   4                      }
 392   3              }
 393   2              }
 394   1        
 395   1          PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
 396   1          PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
 397   1          PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 398   1      
 399   1              PS2_IRQ_Channel = 1;        // Set PS2 1 service flag
 400   1          F_Service_PS2 = 1;          // Set main service flag
 401   1              PS2StartBit=0;                 // clear start bit flag
 402   1              PS2_SSIRQ_Channel = 0xFF;   //
 403   1              PS2PortxData[1]=PSDAT2;
 404   1      #else
                  if(IS_MASK_SET(PSSTS2, TDS))    // Transaction done interrupt 
                  {
                      CLEAR_MASK(IER2,Int_PS2_1); // Disable PS2 interrupt 1  
                      ISR2 = Int_PS2_1;           // Write to clear pending interrupt 
                        
                      if(SendtoAUXFlag)
                      {
                              for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
                              {
                              if(IS_MASK_SET(PSSTS2, DLS))   // DATA Line Status is high
                              {
                                      break;
                              }
                              else
                              {
                                      WNCKR = 0x00;   // Delay 15.26 us
                              }
                              }
                      }
                      else
                      {
                          WNCKR = 0x00;           // Delay 15.26 us
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 8   

                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                      }
                    
                      PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
                      PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
                      PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
               
                      PS2_IRQ_Channel = 1;        // Set PS2 1 service flag
                      F_Service_PS2 = 1;          // Set main service flag
                      PS2StartBit=0;                 // clear start bit flag
                      PS2_SSIRQ_Channel = 0xFF;   //
                      PS2PortxData[1]=PSDAT2;
                      }
                      else                                          // Start bit interrupt 
                      {
                      PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
                      PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
                      IER2&= ~(Int_PS2_0+Int_PS2_1+Int_PS2_2);    // Disable all PS2 interrupt
                      ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
                      PS2StartBit = 1;               // Set start bit flag
                      PS2_SSIRQ_Channel = 1;      //
                      SET_MASK(IER2,Int_PS2_1);   // Enable PS2 interrupt 1
                      }       
              #endif
 456   1              Hook_IRQ_INT19_PS2Interrupt1();
 457   1      }
 458          
 459          //----------------------------------------------------------------------------
 460          // PS/2 Interrupt 0
 461          //----------------------------------------------------------------------------
 462          void IRQ_INT20_PS2Interrupt0(void)
 463          {
 464   1              /*if(IS_MASK_SET(PSSTS1, TDS))    // Transaction done interrupt
 465   1              {
 466   1              CLEAR_MASK(IER2,Int_PS2_0); // Disable PS2 interrupt 0
 467   1                  ISR2 = Int_PS2_0;           // Write to clear pending interrupt
 468   1      
 469   1              if(SendtoAUXFlag)
 470   1                  {
 471   1                  for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
 472   1                  {
 473   1                      if(IS_MASK_SET(PSSTS1, DLS))   // DATA Line Status is high
 474   1                      {
 475   1                          break;
 476   1                      }
 477   1                      else
 478   1                      {
 479   1                          WNCKR = 0x00;   // Delay 15.26 us
 480   1                      }
 481   1                  }
 482   1              }
 483   1              else
 484   1              {
 485   1                  WNCKR = 0x00;           // Delay 15.26 us
 486   1                  WNCKR = 0x00;           // Delay 15.26 us
 487   1                  WNCKR = 0x00;           // Delay 15.26 us
 488   1                  WNCKR = 0x00;           // Delay 15.26 us
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 9   

 489   1                  WNCKR = 0x00;           // Delay 15.26 us
 490   1                  WNCKR = 0x00;           // Delay 15.26 us
 491   1                  WNCKR = 0x00;           // Delay 15.26 us
 492   1              }
 493   1      
 494   1                      PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
 495   1                      PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
 496   1                      PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 497   1      
 498   1                  PS2_IRQ_Channel = 0;        // Set PS2 0 service flag
 499   1                      F_Service_PS2 = 1;          // Set main service flag
 500   1                  PS2StartBit=0;                          // clear start bit flag
 501   1                  PS2_SSIRQ_Channel = 0xFF;   //
 502   1                      PS2PortxData[0]=PSDAT1;
 503   1              }
 504   1          else                                                    // Start bit interrupt
 505   1          {
 506   1              PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
 507   1              PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 508   1              IER2&= ~(Int_PS2_0+Int_PS2_1+Int_PS2_2);    // Disable all PS2 interrupt
 509   1              ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
 510   1              PS2StartBit = 1;                    // Set start bit flag
 511   1              PS2_SSIRQ_Channel = 0;      //
 512   1              SET_MASK(IER2,Int_PS2_0);   // Enable PS2 interrupt 0
 513   1          }
 514   1      
 515   1          Hook_IRQ_INT20_PS2Interrupt0();*/
 516   1          
 517   1      #if TouchPad_only
 518   1              CLEAR_MASK(IER2,Int_PS2_0); // Disable PS2 interrupt 0
 519   1          ISR2 = Int_PS2_0;           // Write to clear pending interrupt
 520   1           
 521   1          if(SendtoAUXFlag)
 522   1          {
 523   2              for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
 524   2              {
 525   3                  //if(IS_MASK_SET(PSSTS1, DLS))   // DATA Line Status is high
 526   3                  if(IS_MASK_SET(GPDRF, BIT1))   // DATA Line Status is high
 527   3                  {
 528   4                      break;
 529   4                  }
 530   3                  else
 531   3                  {
 532   4                      WNCKR = 0x00;   // Delay 15.26 us
 533   4                  }
 534   3              }
 535   2              }
 536   1           
 537   1          PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
 538   1          PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
 539   1          PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 540   1           
 541   1          PS2_IRQ_Channel = 0;        // Set PS2 0 service flag
 542   1          F_Service_PS2 = 1;          // Set main service flag
 543   1          PS2StartBit=0;                     // clear start bit flag
 544   1          PS2_SSIRQ_Channel = 0xFF;   //
 545   1          PS2PortxData[0]=PSDAT1;
 546   1      #else
                  if(IS_MASK_SET(PSSTS1, TDS))    // Transaction done interrupt 
                  {
                      CLEAR_MASK(IER2,Int_PS2_0); // Disable PS2 interrupt 0
                      ISR2 = Int_PS2_0;           // Write to clear pending interrupt
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 10  

                   
                      if(SendtoAUXFlag)
                      {
                              for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
                          {
                              if(IS_MASK_SET(PSSTS1, DLS))   // DATA Line Status is high
                              {
                                      break;
                              }
                              else
                              {
                                  WNCKR = 0x00;   // Delay 15.26 us
                              }
                          }
                      }
                      else
                      {
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                      }
                          
                      PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
                      PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
                      PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
                   
                      PS2_IRQ_Channel = 0;        // Set PS2 0 service flag
                      F_Service_PS2 = 1;          // Set main service flag
                      PS2StartBit=0;                     // clear start bit flag
                      PS2_SSIRQ_Channel = 0xFF;   //
                      PS2PortxData[0]=PSDAT1;
                      }
                  else                                              // Start bit interrupt 
                  {
                      PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
                      PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
                      IER2&= ~(Int_PS2_0+Int_PS2_1+Int_PS2_2);    // Disable all PS2 interrupt
                      ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
                      PS2StartBit = 1;                   // Set start bit flag
                      PS2_SSIRQ_Channel = 0;      //
                      SET_MASK(IER2,Int_PS2_0);   // Enable PS2 interrupt 0
                      }       
              #endif
 598   1          Hook_IRQ_INT20_PS2Interrupt0();
 599   1      }
 600          
 601          //----------------------------------------------------------------------------
 602          // WKO[22]
 603          //----------------------------------------------------------------------------
 604          void IRQ_INT21_WKO22(void)
 605          {
 606   1          Hook_IRQ_INT21_WKO22();
 607   1      }
 608          
 609          //----------------------------------------------------------------------------
 610          // SMFI Semaphore Interrupt
 611          //----------------------------------------------------------------------------
 612          void IRQ_INT22_SMFISemaphore(void)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 11  

 613          {
 614   1          Hook_IRQ_INT22_SMFISemaphore();
 615   1      }
 616          
 617          //----------------------------------------------------------------------------
 618          //
 619          //----------------------------------------------------------------------------
 620          void IRQ_INT23_Null(void)
 621          {
 622   1          Hook_IRQ_INT23_Null();
 623   1      }
 624          
 625          //----------------------------------------------------------------------------
 626          // KBC Input Buffer Full Interrupt
 627          //----------------------------------------------------------------------------
 628          void IRQ_INT24_KBCIBF(void)
 629          {
 630   1              IrqLock_scan();
 631   1              CLEAR_MASK(IER3,Int_KBCIBF);
 632   1          ISR3 = Int_KBCIBF;
 633   1          F_Service_PCI = 1;
 634   1      
 635   1          Hook_IRQ_INT24_KBCIBF();
 636   1      }
 637          
 638          //----------------------------------------------------------------------------
 639          // PMC Input Buffer Full Interrupt PMC1 Input Buffer Full Interrupt
 640          //----------------------------------------------------------------------------
 641          void IRQ_INT25_PMCPMC1IBF(void)
 642          {
 643   1              if(IS_MASK_SET(PM2STS, P_IBF))  // 68/6C input buffer full
 644   1              {
 645   2                      F_Service_PCI3 = 1;
 646   2              }
 647   1              else                                            // 62/66 input buffer full
 648   1              {
 649   2                      F_Service_PCI2 = 1;
 650   2              }
 651   1              CLEAR_MASK(IER3,Int_PMCIBF);
 652   1          ISR3 = Int_PMCIBF;
 653   1      
 654   1          Hook_IRQ_INT25_PMCPMC1IBF();
 655   1      }
 656          
 657          //----------------------------------------------------------------------------
 658          // PMC2 Output Buffer Empty Intr.
 659          //----------------------------------------------------------------------------
 660          void IRQ_INT26_PMC2OBE(void)
 661          {
 662   1          Hook_IRQ_INT26_PMC2OBE();
 663   1      }
 664          
 665          //----------------------------------------------------------------------------
 666          // PMC2 Input Buffer Full Intr.
 667          //----------------------------------------------------------------------------
 668          void IRQ_INT27_PMC2IBF(void)
 669          {
 670   1          Hook_IRQ_INT27_PMC2IBF();
 671   1      }
 672          
 673          //----------------------------------------------------------------------------
 674          // GINT from function 1 of GPD5
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 12  

 675          //----------------------------------------------------------------------------
 676          void IRQ_INT28_GINTofGPD5(void)
 677          {
 678   1          Hook_IRQ_INT28_GINTofGPD5();
 679   1      }
 680          
 681          //----------------------------------------------------------------------------
 682          // EGPC Interrupt
 683          //----------------------------------------------------------------------------
 684          void IRQ_INT29_EGPC(void)
 685          {
 686   1          Hook_IRQ_INT29_EGPC();
 687   1      }
 688          
 689          //----------------------------------------------------------------------------
 690          // External Timer 1 Interrupt
 691          //----------------------------------------------------------------------------
 692          void IRQ_INT30_ET1(void)
 693          {
 694   1          Hook_IRQ_INT30_ET1();
 695   1      }
 696          
 697          //----------------------------------------------------------------------------
 698          // WKO[21]
 699          //----------------------------------------------------------------------------
 700          void IRQ_INT31_WKO21(void)
 701          {
 702   1          Hook_IRQ_INT31_WKO21();
 703   1      }
 704          
 705          //----------------------------------------------------------------------------
 706          // GPINT0
 707          //----------------------------------------------------------------------------
 708          void IRQ_INT32_GPINT0(void)
 709          {
 710   1          Hook_IRQ_INT32_GPINT0();
 711   1      }
 712          
 713          //----------------------------------------------------------------------------
 714          // GPINT1
 715          //----------------------------------------------------------------------------
 716          void IRQ_INT33_GPINT1(void)
 717          {
 718   1          Hook_IRQ_INT33_GPINT1();
 719   1      }
 720          
 721          //----------------------------------------------------------------------------
 722          // GPINT2
 723          //----------------------------------------------------------------------------
 724          void IRQ_INT34_GPINT2(void)
 725          {
 726   1          Hook_IRQ_INT34_GPINT2();
 727   1      }
 728          
 729          //----------------------------------------------------------------------------
 730          // GPINT3
 731          //----------------------------------------------------------------------------
 732          void IRQ_INT35_GPINT3(void)
 733          {
 734   1          Hook_IRQ_INT35_GPINT3();
 735   1      }
 736          
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 13  

 737          //----------------------------------------------------------------------------
 738          // CIR GPINT
 739          //----------------------------------------------------------------------------
 740          void IRQ_INT36_CIRGPINT(void)
 741          {
 742   1          Hook_IRQ_INT36_CIRGPINT();
 743   1      }
 744          
 745          //----------------------------------------------------------------------------
 746          // SSPI Interrupt
 747          //----------------------------------------------------------------------------
 748          void IRQ_INT37_SSPI(void)
 749          {
 750   1          Hook_IRQ_INT37_SSPI();
 751   1      }
 752          
 753          //----------------------------------------------------------------------------
 754          // UART1 Interrupt
 755          //----------------------------------------------------------------------------
 756          void IRQ_INT38_UART1(void)
 757          {
 758   1          Hook_IRQ_INT38_UART1();
 759   1      }
 760          
 761          //----------------------------------------------------------------------------
 762          // UART2 Interrupt
 763          //----------------------------------------------------------------------------
 764          void IRQ_INT39_UART2(void)
 765          {
 766   1          Hook_IRQ_INT39_UART2();
 767   1      }
 768          
 769          //----------------------------------------------------------------------------
 770          //
 771          //----------------------------------------------------------------------------
 772          void IRQ_INT40_Null(void)
 773          {
 774   1          Hook_IRQ_INT40_Null();
 775   1      }
 776          
 777          //----------------------------------------------------------------------------
 778          //
 779          //----------------------------------------------------------------------------
 780          void IRQ_INT41_Null(void)
 781          {
 782   1          Hook_IRQ_INT41_Null();
 783   1      }
 784          
 785          //----------------------------------------------------------------------------
 786          //
 787          //----------------------------------------------------------------------------
 788          void IRQ_INT42_Null(void)
 789          {
 790   1          Hook_IRQ_INT42_Null();
 791   1      }
 792          
 793          //----------------------------------------------------------------------------
 794          //
 795          //----------------------------------------------------------------------------
 796          void IRQ_INT43_Null(void)
 797          {
 798   1          Hook_IRQ_INT43_Null();
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 14  

 799   1      }
 800          
 801          //----------------------------------------------------------------------------
 802          //
 803          //----------------------------------------------------------------------------
 804          void IRQ_INT44_Null(void)
 805          {
 806   1          Hook_IRQ_INT44_Null();
 807   1      }
 808          
 809          //----------------------------------------------------------------------------
 810          //
 811          //----------------------------------------------------------------------------
 812          void IRQ_INT45_Null(void)
 813          {
 814   1          Hook_IRQ_INT45_Null();
 815   1      }
 816          
 817          //----------------------------------------------------------------------------
 818          //
 819          //----------------------------------------------------------------------------
 820          void IRQ_INT46_Null(void)
 821          {
 822   1          Hook_IRQ_INT46_Null();
 823   1      }
 824          
 825          //----------------------------------------------------------------------------
 826          //
 827          //----------------------------------------------------------------------------
 828          void IRQ_INT47_Null(void)
 829          {
 830   1          Hook_IRQ_INT47_Null();
 831   1      }
 832          
 833          //----------------------------------------------------------------------------
 834          // WKO[60]
 835          //----------------------------------------------------------------------------
 836          void IRQ_INT48_WKO60(void)
 837          {
 838   1          Hook_IRQ_INT48_WKO60();
 839   1      }
 840          
 841          //----------------------------------------------------------------------------
 842          // WKO[61]
 843          //----------------------------------------------------------------------------
 844          void IRQ_INT49_WKO61(void)
 845          {
 846   1          Hook_IRQ_INT49_WKO61();
 847   1      }
 848          
 849          //----------------------------------------------------------------------------
 850          //WKO[62]
 851          //----------------------------------------------------------------------------
 852          void IRQ_INT50_WKO62(void)
 853          {
 854   1          Hook_IRQ_INT50_WKO62();
 855   1      }
 856          
 857          //----------------------------------------------------------------------------
 858          // WKO[63]
 859          //----------------------------------------------------------------------------
 860          void IRQ_INT51_WKO63(void)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 15  

 861          {
 862   1          Hook_IRQ_INT51_WKO63();
 863   1      }
 864          
 865          //----------------------------------------------------------------------------
 866          // WKO[64]
 867          //----------------------------------------------------------------------------
 868          void IRQ_INT52_WKO64(void)
 869          {
 870   1          Hook_IRQ_INT52_WKO64();
 871   1      }
 872          
 873          //----------------------------------------------------------------------------
 874          // WKO[65]
 875          //----------------------------------------------------------------------------
 876          void IRQ_INT53_WKO65(void)
 877          {
 878   1          Hook_IRQ_INT53_WKO65();
 879   1      }
 880          
 881          //----------------------------------------------------------------------------
 882          // WKO[66]
 883          //----------------------------------------------------------------------------
 884          void IRQ_INT54_WKO66(void)
 885          {
 886   1          Hook_IRQ_INT54_WKO66();
 887   1      }
 888          
 889          //----------------------------------------------------------------------------
 890          // WKO[67]
 891          //----------------------------------------------------------------------------
 892          void IRQ_INT55_WKO67(void)
 893          {
 894   1          Hook_IRQ_INT55_WKO67();
 895   1      }
 896          
 897          //----------------------------------------------------------------------------
 898          //
 899          //----------------------------------------------------------------------------
 900          void IRQ_INT56_Null(void)
 901          {
 902   1          Hook_IRQ_INT56_Null();
 903   1      }
 904          
 905          //----------------------------------------------------------------------------
 906          //
 907          //----------------------------------------------------------------------------
 908          void IRQ_INT57_Null(void)
 909          {
 910   1          Hook_IRQ_INT57_Null();
 911   1      }
 912          
 913          //----------------------------------------------------------------------------
 914          // External Timer 2 Interrupt
 915          //----------------------------------------------------------------------------
 916          void IRQ_INT58_ET2(void)
 917          {
 918   1          Hook_IRQ_INT58_ET2();
 919   1      }
 920          
 921          //----------------------------------------------------------------------------
 922          // Deferred SPI Instruction Interrupt
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 16  

 923          //----------------------------------------------------------------------------
 924          void IRQ_INT59_DeferredSPIInstruction(void)
 925          {
 926   1          Hook_IRQ_INT59_DeferredSPIInstruction();
 927   1      }
 928          
 929          //----------------------------------------------------------------------------
 930          // TMRINTA0
 931          //----------------------------------------------------------------------------
 932          void IRQ_INT60_TMRINTA0(void)
 933          {
 934   1          Hook_IRQ_INT60_TMRINTA0();
 935   1      }
 936          
 937          //----------------------------------------------------------------------------
 938          // TMRINTA1
 939          //----------------------------------------------------------------------------
 940          void IRQ_INT61_TMRINTA1(void)
 941          {
 942   1          Hook_IRQ_INT61_TMRINTA1();
 943   1      }
 944          
 945          //----------------------------------------------------------------------------
 946          // TMRINTB0
 947          //----------------------------------------------------------------------------
 948          void IRQ_INT62_TMRINTB0(void)
 949          {
 950   1          Hook_IRQ_INT62_TMRINTB0();
 951   1      }
 952          
 953          //----------------------------------------------------------------------------
 954          // TMRINTB1
 955          //----------------------------------------------------------------------------
 956          void IRQ_INT63_TMRINTB1(void)
 957          {
 958   1          Hook_IRQ_INT63_TMRINTB1();
 959   1      }
 960          
 961          //----------------------------------------------------------------------------
 962          // PMC2EX Output Buffer Empty Intr.
 963          //----------------------------------------------------------------------------
 964          void IRQ_INT64_PMC2EXOBE(void)
 965          {
 966   1          Hook_IRQ_INT64_PMC2EXOBE();
 967   1      }
 968          
 969          //----------------------------------------------------------------------------
 970          // PMC2EX Input Buffer Full Intr.
 971          //----------------------------------------------------------------------------
 972          void IRQ_INT65_PMC2EXIBF(void)
 973          {
 974   1          Hook_IRQ_INT65_PMC2EXIBF();
 975   1      }
 976          
 977          //----------------------------------------------------------------------------
 978          // PMC3 Output Buffer Empty Intr.
 979          //----------------------------------------------------------------------------
 980          void IRQ_INT66_PMC3OBE(void)
 981          {
 982   1          Hook_IRQ_INT66_PMC3OBE();
 983   1      }
 984          
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 17  

 985          //----------------------------------------------------------------------------
 986          // PMC3 Input Buffer Full Intr.
 987          //----------------------------------------------------------------------------
 988          void IRQ_INT67_PMC3IBF(void)
 989          {
 990   1          Hook_IRQ_INT67_PMC3IBF();
 991   1      }
 992          
 993          //----------------------------------------------------------------------------
 994          // PMC4 Output Buffer Empty Intr.
 995          //----------------------------------------------------------------------------
 996          void IRQ_INT68_PMC4OBE(void)
 997          {
 998   1          Hook_IRQ_INT68_PMC4OBE();
 999   1      }
1000          
1001          //----------------------------------------------------------------------------
1002          // PMC4 Input Buffer Full Intr.
1003          //----------------------------------------------------------------------------
1004          void IRQ_INT69_PMC4IBF(void)
1005          {
1006   1          Hook_IRQ_INT69_PMC4IBF();
1007   1      }
1008          
1009          //----------------------------------------------------------------------------
1010          //
1011          //----------------------------------------------------------------------------
1012          void IRQ_INT70_Null(void)
1013          {
1014   1          Hook_IRQ_INT70_Null();
1015   1      }
1016          
1017          //----------------------------------------------------------------------------
1018          // I2BRAM Interrupt
1019          //----------------------------------------------------------------------------
1020          void IRQ_INT71_I2BRAM(void)
1021          {
1022   1          Hook_IRQ_INT71_I2BRAM();
1023   1      }
1024          
1025          //----------------------------------------------------------------------------
1026          // WKO[70]
1027          //----------------------------------------------------------------------------
1028          void IRQ_INT72_WKO70(void)
1029          {
1030   1          Hook_IRQ_INT72_WKO70();
1031   1      }
1032          
1033          //----------------------------------------------------------------------------
1034          // WKO[71]
1035          //----------------------------------------------------------------------------
1036          void IRQ_INT73_WKO71(void)
1037          {
1038   1          Hook_IRQ_INT73_WKO71();
1039   1      }
1040          
1041          //----------------------------------------------------------------------------
1042          // WKO[72]
1043          //----------------------------------------------------------------------------
1044          void IRQ_INT74_WKO72(void)
1045          {
1046   1          Hook_IRQ_INT74_WKO72();
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 18  

1047   1      }
1048          
1049          //----------------------------------------------------------------------------
1050          // WKO[73]
1051          //----------------------------------------------------------------------------
1052          void IRQ_INT75_WKO73(void)
1053          {
1054   1          Hook_IRQ_INT75_WKO73();
1055   1      }
1056          
1057          //----------------------------------------------------------------------------
1058          // WKO[74]
1059          //----------------------------------------------------------------------------
1060          void IRQ_INT76_WKO74(void)
1061          {
1062   1          Hook_IRQ_INT76_WKO74();
1063   1      }
1064          
1065          //----------------------------------------------------------------------------
1066          // WKO[75]
1067          //----------------------------------------------------------------------------
1068          void IRQ_INT77_WKO75(void)
1069          {
1070   1          Hook_IRQ_INT77_WKO75();
1071   1      }
1072          
1073          //----------------------------------------------------------------------------
1074          // WKO[76]
1075          //----------------------------------------------------------------------------
1076          void IRQ_INT78_WKO76(void)
1077          {
1078   1          Hook_IRQ_INT78_WKO76();
1079   1      }
1080          
1081          //----------------------------------------------------------------------------
1082          // WKO[77]
1083          //----------------------------------------------------------------------------
1084          void IRQ_INT79_WKO77(void)
1085          {
1086   1          Hook_IRQ_INT79_WKO77();
1087   1      }
1088          
1089          //----------------------------------------------------------------------------
1090          // 
1091          //----------------------------------------------------------------------------
1092          void IRQ_INT80_Null(void)
1093          {
1094   1          Hook_IRQ_INT80_Null();
1095   1      }
1096          
1097          //----------------------------------------------------------------------------
1098          // SMBus clock held interrupt
1099          //----------------------------------------------------------------------------
1100          void IRQ_INT81_SMBusClockHeld(void)
1101          {
1102   1          Hook_IRQ_INT81_SMBusClockHeld();
1103   1      }
1104          
1105          //----------------------------------------------------------------------------
1106          // CEC interrupt
1107          //----------------------------------------------------------------------------
1108          void IRQ_INT82_CEC(void)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 19  

1109          {
1110   1          Hook_IRQ_INT82_CEC();
1111   1      }
1112          
1113          //----------------------------------------------------------------------------
1114          // H2RAM LPC trigger
1115          //----------------------------------------------------------------------------
1116          void IRQ_INT83_H2RAMLPC(void)
1117          {
1118   1          Hook_IRQ_INT83_H2RAMLPC();
1119   1      }
1120          
1121          //----------------------------------------------------------------------------
1122          // 
1123          //----------------------------------------------------------------------------
1124          void IRQ_INT84_Null(void)
1125          {
1126   1          Hook_IRQ_INT84_Null();
1127   1      }
1128          
1129          //----------------------------------------------------------------------------
1130          // WKO[88]
1131          //----------------------------------------------------------------------------
1132          void IRQ_INT85_WKO88(void)
1133          {
1134   1          Hook_IRQ_INT85_WKO88();
1135   1      }
1136          
1137          //----------------------------------------------------------------------------
1138          // WKO[89]
1139          //----------------------------------------------------------------------------
1140          void IRQ_INT86_WKO89(void)
1141          {
1142   1          Hook_IRQ_INT86_WKO89();
1143   1      }
1144          
1145          //----------------------------------------------------------------------------
1146          // WKO[90]
1147          //----------------------------------------------------------------------------
1148          void IRQ_INT87_WKO90(void)
1149          {
1150   1          Hook_IRQ_INT87_WKO90();
1151   1      }
1152          
1153          //----------------------------------------------------------------------------
1154          // WKO[80]
1155          //----------------------------------------------------------------------------
1156          void IRQ_INT88_WKO80(void)
1157          {
1158   1          Hook_IRQ_INT88_WKO80();
1159   1      }
1160          
1161          //----------------------------------------------------------------------------
1162          // WKO[81]
1163          //----------------------------------------------------------------------------
1164          void IRQ_INT89_WKO81(void)
1165          {
1166   1          Hook_IRQ_INT89_WKO81();
1167   1      }
1168          
1169          //----------------------------------------------------------------------------
1170          // WKO[82]
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 20  

1171          //----------------------------------------------------------------------------
1172          void IRQ_INT90_WKO82(void)
1173          {
1174   1          Hook_IRQ_INT90_WKO82();
1175   1      }
1176          
1177          //----------------------------------------------------------------------------
1178          // WKO[83]
1179          //----------------------------------------------------------------------------
1180          void IRQ_INT91_WKO83(void)
1181          {
1182   1          Hook_IRQ_INT91_WKO83();
1183   1      }
1184          
1185          //----------------------------------------------------------------------------
1186          // WKO[84]
1187          //----------------------------------------------------------------------------
1188          void IRQ_INT92_WKO84(void)
1189          {
1190   1          Hook_IRQ_INT92_WKO84();
1191   1      }
1192          
1193          //----------------------------------------------------------------------------
1194          // WKO[85]
1195          //----------------------------------------------------------------------------
1196          void IRQ_INT93_WKO85(void)
1197          {
1198   1          Hook_IRQ_INT93_WKO85();
1199   1      }
1200          
1201          //----------------------------------------------------------------------------
1202          // WKO[86]
1203          //----------------------------------------------------------------------------
1204          void IRQ_INT94_WKO86(void)
1205          {
1206   1          Hook_IRQ_INT94_WKO86();
1207   1      }
1208          
1209          //----------------------------------------------------------------------------
1210          // WKO[87]
1211          //----------------------------------------------------------------------------
1212          void IRQ_INT95_WKO87(void)
1213          {
1214   1          Hook_IRQ_INT95_WKO87();
1215   1      }
1216          
1217          //----------------------------------------------------------------------------
1218          // WKO[91]
1219          //----------------------------------------------------------------------------
1220          void IRQ_INT96_WKO91(void)
1221          {
1222   1          Hook_IRQ_INT96_WKO91();
1223   1      }
1224          
1225          //----------------------------------------------------------------------------
1226          // WKO[92]
1227          //----------------------------------------------------------------------------
1228          void IRQ_INT97_WKO92(void)
1229          {
1230   1          Hook_IRQ_INT97_WKO92();
1231   1      }
1232          
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 21  

1233          //----------------------------------------------------------------------------
1234          // WKO[93]
1235          //----------------------------------------------------------------------------
1236          void IRQ_INT98_WKO93(void)
1237          {
1238   1          Hook_IRQ_INT98_WKO93();
1239   1      }
1240          
1241          //----------------------------------------------------------------------------
1242          // WKO[94]
1243          //----------------------------------------------------------------------------
1244          void IRQ_INT99_WKO94(void)
1245          {
1246   1          Hook_IRQ_INT99_WKO94();
1247   1      }
1248          
1249          //----------------------------------------------------------------------------
1250          // WKO[95]
1251          //----------------------------------------------------------------------------
1252          void IRQ_INT100_WKO95(void)
1253          {
1254   1          Hook_IRQ_INT100_WKO95();
1255   1      }
1256          
1257          //----------------------------------------------------------------------------
1258          // WKO[96]
1259          //----------------------------------------------------------------------------
1260          void IRQ_INT101_WKO96(void)
1261          {
1262   1          Hook_IRQ_INT101_WKO96();
1263   1      }
1264          
1265          //----------------------------------------------------------------------------
1266          // WKO[97]
1267          //----------------------------------------------------------------------------
1268          void IRQ_INT102_WKO97(void)
1269          {
1270   1          Hook_IRQ_INT102_WKO97();
1271   1      }
1272          
1273          //----------------------------------------------------------------------------
1274          // WKO[98]
1275          //----------------------------------------------------------------------------
1276          void IRQ_INT103_WKO98(void)
1277          {
1278   1          Hook_IRQ_INT103_WKO98();
1279   1      }
1280          
1281          //----------------------------------------------------------------------------
1282          // WKO[99]
1283          //----------------------------------------------------------------------------
1284          void IRQ_INT104_WKO99(void)
1285          {
1286   1          Hook_IRQ_INT104_WKO99();
1287   1      }
1288          
1289          //----------------------------------------------------------------------------
1290          // WKO[100]
1291          //----------------------------------------------------------------------------
1292          void IRQ_INT105_WKO100(void)
1293          {
1294   1          Hook_IRQ_INT105_WKO100();
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 22  

1295   1      }
1296          
1297          //----------------------------------------------------------------------------
1298          // WKO[101]
1299          //----------------------------------------------------------------------------
1300          void IRQ_INT106_WKO101(void)
1301          {
1302   1          Hook_IRQ_INT106_WKO101();
1303   1      }
1304          
1305          //----------------------------------------------------------------------------
1306          // WKO[102]
1307          //----------------------------------------------------------------------------
1308          void IRQ_INT107_WKO102(void)
1309          {
1310   1          Hook_IRQ_INT107_WKO102();
1311   1      }
1312          
1313          //----------------------------------------------------------------------------
1314          // WKO[103]
1315          //----------------------------------------------------------------------------
1316          void IRQ_INT108_WKO103(void)
1317          {
1318   1          Hook_IRQ_INT108_WKO103();
1319   1      }
1320          
1321          //----------------------------------------------------------------------------
1322          // WKO[104]
1323          //----------------------------------------------------------------------------
1324          void IRQ_INT109_WKO104(void)
1325          {
1326   1          Hook_IRQ_INT109_WKO104();
1327   1      }
1328          
1329          //----------------------------------------------------------------------------
1330          // WKO[105]
1331          //----------------------------------------------------------------------------
1332          void IRQ_INT110_WKO105(void)
1333          {
1334   1          Hook_IRQ_INT110_WKO105();
1335   1      }
1336          
1337          //----------------------------------------------------------------------------
1338          // WKO[106]
1339          //----------------------------------------------------------------------------
1340          void IRQ_INT111_WKO106(void)
1341          {
1342   1          Hook_IRQ_INT111_WKO106();
1343   1      }
1344          
1345          //----------------------------------------------------------------------------
1346          // WKO[107]
1347          //----------------------------------------------------------------------------
1348          void IRQ_INT112_WKO107(void)
1349          {
1350   1          Hook_IRQ_INT112_WKO107();
1351   1      }
1352          
1353          //----------------------------------------------------------------------------
1354          // WKO[108]
1355          //----------------------------------------------------------------------------
1356          void IRQ_INT113_WKO108(void)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 23  

1357          {
1358   1          Hook_IRQ_INT113_WKO108();
1359   1      }
1360          
1361          //----------------------------------------------------------------------------
1362          // WKO[109]
1363          //----------------------------------------------------------------------------
1364          void IRQ_INT114_WKO109(void)
1365          {
1366   1          Hook_IRQ_INT114_WKO109();
1367   1      }
1368          
1369          //----------------------------------------------------------------------------
1370          // WKO[110]
1371          //----------------------------------------------------------------------------
1372          void IRQ_INT115_WKO110(void)
1373          {
1374   1          Hook_IRQ_INT115_WKO110();
1375   1      }
1376          
1377          //----------------------------------------------------------------------------
1378          // WKO[111]
1379          //----------------------------------------------------------------------------
1380          void IRQ_INT116_WKO111(void)
1381          {
1382   1          Hook_IRQ_INT116_WKO111();
1383   1      }
1384          
1385          //----------------------------------------------------------------------------
1386          // WKO[112]
1387          //----------------------------------------------------------------------------
1388          void IRQ_INT117_WKO112(void)
1389          {
1390   1          Hook_IRQ_INT117_WKO112();
1391   1      }
1392          
1393          //----------------------------------------------------------------------------
1394          // WKO[113]
1395          //----------------------------------------------------------------------------
1396          void IRQ_INT118_WKO113(void)
1397          {
1398   1          Hook_IRQ_INT118_WKO113();
1399   1      }
1400          
1401          //----------------------------------------------------------------------------
1402          // WKO[114]
1403          //----------------------------------------------------------------------------
1404          void IRQ_INT119_WKO114(void)
1405          {
1406   1          Hook_IRQ_INT119_WKO114();
1407   1      }
1408          
1409          //----------------------------------------------------------------------------
1410          // WKO[115]
1411          //----------------------------------------------------------------------------
1412          void IRQ_INT120_WKO115(void)
1413          {
1414   1          Hook_IRQ_INT120_WKO115();
1415   1      }
1416          
1417          //----------------------------------------------------------------------------
1418          // WKO[116]
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 24  

1419          //----------------------------------------------------------------------------
1420          void IRQ_INT121_WKO116(void)
1421          {
1422   1          Hook_IRQ_INT121_WKO116();
1423   1      }
1424          
1425          //----------------------------------------------------------------------------
1426          // WKO[117]
1427          //----------------------------------------------------------------------------
1428          void IRQ_INT122_WKO117(void)
1429          {
1430   1          Hook_IRQ_INT122_WKO117();
1431   1      }
1432          
1433          //----------------------------------------------------------------------------
1434          // WKO[118]
1435          //----------------------------------------------------------------------------
1436          void IRQ_INT123_WKO118(void)
1437          {
1438   1          Hook_IRQ_INT123_WKO118();
1439   1      }
1440          
1441          //----------------------------------------------------------------------------
1442          // WKO[119]
1443          //----------------------------------------------------------------------------
1444          void IRQ_INT124_WKO119(void)
1445          {
1446   1          Hook_IRQ_INT124_WKO119();
1447   1      }
1448          
1449          //----------------------------------------------------------------------------
1450          // WKO[120]
1451          //----------------------------------------------------------------------------
1452          void IRQ_INT125_WKO120(void)
1453          {
1454   1          Hook_IRQ_INT125_WKO120();
1455   1      }
1456          
1457          //----------------------------------------------------------------------------
1458          // WKO[121]
1459          //----------------------------------------------------------------------------
1460          void IRQ_INT126_WKO121(void)
1461          {
1462   1          Hook_IRQ_INT126_WKO121();
1463   1      }
1464          
1465          //----------------------------------------------------------------------------
1466          // WKO[122]
1467          //----------------------------------------------------------------------------
1468          void IRQ_INT127_WKO122(void)
1469          {
1470   1          Hook_IRQ_INT127_WKO122();
1471   1      }
1472          
1473          //----------------------------------------------------------------------------
1474          // WKO[128]
1475          //----------------------------------------------------------------------------
1476          void IRQ_INT128_WKO128(void)
1477          {
1478   1          Hook_IRQ_INT128_WKO128();
1479   1      }
1480          
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 25  

1481          //----------------------------------------------------------------------------
1482          // WKO[129]
1483          //----------------------------------------------------------------------------
1484          void IRQ_INT129_WKO129(void)
1485          {
1486   1          Hook_IRQ_INT129_WKO129();
1487   1      }
1488          
1489          //----------------------------------------------------------------------------
1490          // WKO[130]
1491          //----------------------------------------------------------------------------
1492          void IRQ_INT130_WKO130(void)
1493          {
1494   1          Hook_IRQ_INT130_WKO130();
1495   1      }
1496          
1497          //----------------------------------------------------------------------------
1498          // WKO[131]
1499          //----------------------------------------------------------------------------
1500          void IRQ_INT131_WKO131(void)
1501          {
1502   1          Hook_IRQ_INT131_WKO131();
1503   1      }
1504          
1505          //----------------------------------------------------------------------------
1506          // WKO[132]
1507          //----------------------------------------------------------------------------
1508          void IRQ_INT132_WKO132(void)
1509          {
1510   1          Hook_IRQ_INT132_WKO132();
1511   1      }
1512          
1513          //----------------------------------------------------------------------------
1514          // WKO[133]
1515          //----------------------------------------------------------------------------
1516          void IRQ_INT133_WKO133(void)
1517          {
1518   1          Hook_IRQ_INT133_WKO133();
1519   1      }
1520          
1521          //----------------------------------------------------------------------------
1522          // WKO[134]
1523          //----------------------------------------------------------------------------
1524          void IRQ_INT134_WKO134(void)
1525          {
1526   1          Hook_IRQ_INT134_WKO134();
1527   1      }
1528          
1529          //----------------------------------------------------------------------------
1530          //
1531          //----------------------------------------------------------------------------
1532          void IRQ_INT135_Null(void)
1533          {
1534   1          Hook_IRQ_INT135_Null();
1535   1      }
1536          
1537          //----------------------------------------------------------------------------
1538          //
1539          //----------------------------------------------------------------------------
1540          void IRQ_INT136_Null(void)
1541          {
1542   1          Hook_IRQ_INT136_Null();
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 26  

1543   1      }
1544          
1545          //----------------------------------------------------------------------------
1546          //
1547          //----------------------------------------------------------------------------
1548          void IRQ_INT137_Null(void)
1549          {
1550   1          Hook_IRQ_INT137_Null();
1551   1      }
1552          
1553          //----------------------------------------------------------------------------
1554          //
1555          //----------------------------------------------------------------------------
1556          void IRQ_INT138_Null(void)
1557          {
1558   1          Hook_IRQ_INT138_Null();
1559   1      }
1560          
1561          //----------------------------------------------------------------------------
1562          //
1563          //----------------------------------------------------------------------------
1564          void IRQ_INT139_Null(void)
1565          {
1566   1          Hook_IRQ_INT139_Null();
1567   1      }
1568          
1569          //----------------------------------------------------------------------------
1570          //
1571          //----------------------------------------------------------------------------
1572          void IRQ_INT140_Null(void)
1573          {
1574   1          Hook_IRQ_INT140_Null();
1575   1      }
1576          
1577          //----------------------------------------------------------------------------
1578          //
1579          //----------------------------------------------------------------------------
1580          void IRQ_INT141_Null(void)
1581          {
1582   1          Hook_IRQ_INT141_Null();
1583   1      }
1584          
1585          //----------------------------------------------------------------------------
1586          //
1587          //----------------------------------------------------------------------------
1588          void IRQ_INT142_Null(void)
1589          {
1590   1          Hook_IRQ_INT142_Null();
1591   1      }
1592          
1593          //----------------------------------------------------------------------------
1594          //
1595          //----------------------------------------------------------------------------
1596          void IRQ_INT143_Null(void)
1597          {
1598   1          Hook_IRQ_INT143_Null();
1599   1      }
1600          
1601          //----------------------------------------------------------------------------
1602          //
1603          //----------------------------------------------------------------------------
1604          void IRQ_INT144_Null(void)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 27  

1605          {
1606   1          Hook_IRQ_INT144_Null();
1607   1      }
1608          
1609          //----------------------------------------------------------------------------
1610          //
1611          //----------------------------------------------------------------------------
1612          void IRQ_INT145_Null(void)
1613          {
1614   1          Hook_IRQ_INT145_Null();
1615   1      }
1616          
1617          //----------------------------------------------------------------------------
1618          //
1619          //----------------------------------------------------------------------------
1620          void IRQ_INT146_Null(void)
1621          {
1622   1          Hook_IRQ_INT146_Null();
1623   1      }
1624          
1625          //----------------------------------------------------------------------------
1626          //
1627          //----------------------------------------------------------------------------
1628          void IRQ_INT147_Null(void)
1629          {
1630   1          Hook_IRQ_INT147_Null();
1631   1      }
1632          
1633          //----------------------------------------------------------------------------
1634          //
1635          //----------------------------------------------------------------------------
1636          void IRQ_INT148_Null(void)
1637          {
1638   1          Hook_IRQ_INT148_Null();
1639   1      }
1640          
1641          //----------------------------------------------------------------------------
1642          // PMC5 output buffer empty interrupt.
1643          //----------------------------------------------------------------------------
1644          void IRQ_INT149_PMC5OBE(void)
1645          {
1646   1          Hook_IRQ_INT149_PMC5OBE();
1647   1      }
1648          
1649          //----------------------------------------------------------------------------
1650          // PMC5 input buffer full interrupt.
1651          //----------------------------------------------------------------------------
1652          void IRQ_INT150_PMC5IBF(void)
1653          {
1654   1          Hook_IRQ_INT150_PMC5IBF();
1655   1      }
1656          
1657          //----------------------------------------------------------------------------
1658          // Voltage comparator interrupt.
1659          //----------------------------------------------------------------------------
1660          void IRQ_INT151_VCI(void)
1661          {
1662   1          Hook_IRQ_INT151_VCI();
1663   1      }
1664          
1665          //----------------------------------------------------------------------------
1666          // FUNCTION:   Isr_Int0
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 28  

1667          // ISR for INT0 (Key Scan Interrupt).
1668          //----------------------------------------------------------------------------
1669          void Isr_Int0(void) interrupt 0 using 2
1670          {
1671   1      
1672   1      }
1673          
1674          //----------------------------------------------------------------------------
1675          // Isr_Tmr0
1676          // ISR for TF0 (Timer 0 Interrupt).  Timer 0 is the 1mS Timer (Timer A).
1677          //----------------------------------------------------------------------------
1678          /* ----------------------------------------------------------------------------
1679           * FUNCTION: Irq_Timer_A - Handle Timer A interrupts.
1680           *
1681           * Timer A has a time base of 1 mS.
1682           *
1683           * Input: On entry, "TIMER Timer_A" has the event(s) to handle. Valid Events:
1684           *     TMR_SCAN   -
1685           *     TMR_GENTMO - This timer is a timer that is used for timeout detection
1686           *                  of serial data transmissions to/from the auxiliary
1687           *                  keyboard/pointing devices.
1688           * ------------------------------------------------------------------------- */
1689          void Isr_Tmr0(void) interrupt 1 using 2
1690          {
1691   1      //  Load_Timer_A();
1692   1              TL0 = Timer_1ms;        // Reload timer
1693   1              TH0 = Timer_1ms>>8;         // 1ms
1694   1          TF0 = 0;                            // Clear overflow flag
1695   1          F_Service_MS_1 = 1;   // Request 1 mS timer service.
1696   1      }
1697          
1698          
1699          /* ----------------------------------------------------------------------------
1700           * FUNCTION:   Isr_Int1
1701           * ISR for INT1 (Interrupt Source A and B Interrupts).
1702           *
1703           * Interrupt Source A:
1704           * ------------------------------------------------------------------------- */
1705          const FUNCT_PTR_V_V code IRQ_Service[] =
1706          {
1707              IRQ_INT0_Null,                      //   INT0       Reserved
1708              IRQ_INT1_WKO20,                     //   INT1       WUC interrupt WUI0
1709              IRQ_INT2_KBCOBE,                    //   INT2       KBC output buffer empty interrupt
1710              IRQ_INT3_PMCPMC1OBE,                //   INT3       PMC output buffer empty interrupt
1711              IRQ_INT4_SMBusD,                    //   INT4       SMBus D Interrupt
1712              IRQ_INT5_WKINTAD,                   //   INT5       WUC interrupt (WU10 ~ WU15)(WU40 ~ WU47)
1713              IRQ_INT6_WKO23,                     //   INT6       WUC interrupt WUI3
1714              IRQ_INT7_PWM,                       //   INT7       PWM interrupt
1715          
1716              IRQ_INT8_ADC,                           //   INT8   ADC Interrupt
1717              IRQ_INT9_SMBusA,                            //   INT9       SMB0 Interrupt
1718              IRQ_INT10_SMBusB,                   //   INT10      SMB1 Interrupt
1719              IRQ_INT11_KBMatrixScan,                 //   INT11  Key matrix scan Int
1720              IRQ_INT12_WKO26,                    //   INT12      WUC interrupt SWUC wake up
1721              IRQ_INT13_WKINTC,                   //   INT13      WUC interrupt KSI wake-up (WU30 ~ WU37)
1722              IRQ_INT14_WKO25,                    //   INT14      WUC interrupt Power switch
1723              IRQ_INT15_CIR,                          //   INT15  CIR interrupt
1724          
1725              IRQ_INT16_SMBusC,                   //   INT16      SMB2 Interrupt
1726              IRQ_INT17_WKO24,                    //   INT17      WUC Interrupt WUI4
1727              IRQ_INT18_PS2Interrupt2,                //   INT18  PS2 P2 Interrupt
1728              IRQ_INT19_PS2Interrupt1,                //   INT19  PS2 P1 Interrupt
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 29  

1729              IRQ_INT20_PS2Interrupt0,            //   INT20      PS2 P0 Interrupt
1730              IRQ_INT21_WKO22,                    //   INT21      WUC Interrupt WUI2
1731              IRQ_INT22_SMFISemaphore,            //   INT22  SMFI Semaphore Interrupt
1732              IRQ_INT23_Null,                     //   INT23  --
1733          
1734              IRQ_INT24_KBCIBF,                   //   INT24      KBC input buffer empty interrupt
1735              IRQ_INT25_PMCPMC1IBF,                   //   INT25  PMC input buffer empty interrupt
1736              IRQ_INT26_PMC2OBE,                  //   INT26  PMC2 Output Buffer Empty Intr.
1737              IRQ_INT27_PMC2IBF,                  //   INT27  PMC2 Input Buffer Full Intr.
1738              IRQ_INT28_GINTofGPD5,               //   INT28  GINT from function 1 of GPD5
1739              IRQ_INT29_EGPC,                     //   INT29  EGPC Interrupt
1740              IRQ_INT30_ET1,                      //   INT30      External timer interrupt
1741              IRQ_INT31_WKO21,                    //   INT31      WUC     interrupt WUI1
1742          
1743              IRQ_INT32_GPINT0,                       //   INT32  GPINT0
1744              IRQ_INT33_GPINT1,                       //   INT33  GPINT1
1745              IRQ_INT34_GPINT2,                   //   INT34  GPINT2
1746              IRQ_INT35_GPINT3,                   //   INT35  GPINT3
1747              IRQ_INT36_CIRGPINT,                 //   INT36  CIR GPINT
1748              IRQ_INT37_SSPI,                     //   INT37  SSPI Interrupt
1749              IRQ_INT38_UART1,                    //   INT38  UART1 Interrupt
1750              IRQ_INT39_UART2,                    //   INT39  UART2 Interrupt
1751          
1752              IRQ_INT40_Null,                             //   INT40      --
1753              IRQ_INT41_Null,                             //   INT41      --
1754              IRQ_INT42_Null,                     //   INT42  --
1755              IRQ_INT43_Null,                     //   INT43  --
1756              IRQ_INT44_Null,                     //   INT44  --
1757              IRQ_INT45_Null,                     //   INT45  --
1758              IRQ_INT46_Null,                     //   INT46      --
1759              IRQ_INT47_Null,                     //   INT47      --
1760          
1761              IRQ_INT48_WKO60,                        //   INT48  WKO[60]
1762              IRQ_INT49_WKO61,                            //   INT49  WKO[61]
1763              IRQ_INT50_WKO62,                    //   INT50  WKO[62]
1764              IRQ_INT51_WKO63,                    //   INT51  WKO[63]
1765              IRQ_INT52_WKO64,                    //   INT52  WKO[64]
1766              IRQ_INT53_WKO65,                    //   INT53  WKO[65]
1767              IRQ_INT54_WKO66,                    //   INT54  WKO[66]
1768              IRQ_INT55_WKO67,                    //   INT55  WKO[67]
1769          
1770              IRQ_INT56_Null,                             //   INT56  --
1771              IRQ_INT57_Null,                     //   INT57  --
1772              IRQ_INT58_ET2,                      //   INT58  External Timer 2 Interrupt
1773              IRQ_INT59_DeferredSPIInstruction,   //   INT59  Deferred SPI Instruction Interrupt
1774              IRQ_INT60_TMRINTA0,                 //   INT60  TMRINTA0
1775              IRQ_INT61_TMRINTA1,                 //   INT61  TMRINTA1
1776              IRQ_INT62_TMRINTB0,                 //   INT62  TMRINTB0
1777                  IRQ_INT63_TMRINTB1,                 //   INT63  TMRINTB1
1778          
1779              IRQ_INT64_PMC2EXOBE,                    //   INT64  PMC2EX Output Buffer Empty Intr.
1780              IRQ_INT65_PMC2EXIBF,                    //   INT65  PMC2EX Input Buffer Full Intr.
1781              IRQ_INT66_PMC3OBE,                  //   INT66  PMC3 Output Buffer Empty Intr.
1782              IRQ_INT67_PMC3IBF,                  //   INT67  PMC3 Input Buffer Full Intr.
1783              IRQ_INT68_PMC4OBE,                  //   INT68  PMC4 Output Buffer Empty Intr.
1784              IRQ_INT69_PMC4IBF,                  //   INT69  PMC4 Input Buffer Full Intr.
1785              IRQ_INT70_Null,                     //   INT70  --
1786              IRQ_INT71_I2BRAM,                   //   INT71  I2BRAM Interrupt
1787          
1788              IRQ_INT72_WKO70,                        //   INT72  WKO[70]
1789              IRQ_INT73_WKO71,                            //   INT73  WKO[71]
1790              IRQ_INT74_WKO72,                    //   INT74  WKO[72]
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 30  

1791              IRQ_INT75_WKO73,                    //   INT75  WKO[73]
1792              IRQ_INT76_WKO74,                    //   INT76  WKO[74]
1793              IRQ_INT77_WKO75,                    //   INT77  WKO[75]
1794              IRQ_INT78_WKO76,                    //   INT78  WKO[76]
1795              IRQ_INT79_WKO77,                    //   INT79  WKO[77]
1796          
1797              IRQ_INT80_Null,                     //   INT80  --
1798              IRQ_INT81_SMBusClockHeld,           //   INT81  SMBus clock held interrupt.
1799              IRQ_INT82_CEC,                      //   INT82  CEC interrupt.
1800              IRQ_INT83_H2RAMLPC,                 //   INT83  H2RAM LPC Trigger.
1801              IRQ_INT84_Null,                     //   INT84  --
1802              IRQ_INT85_WKO88,                    //   INT85  WKO[88] 
1803              IRQ_INT86_WKO89,                    //   INT86  WKO[89] 
1804              IRQ_INT87_WKO90,                    //   INT87  WKO[90]
1805          
1806              IRQ_INT88_WKO80,                    //   INT88  WKO[80]
1807              IRQ_INT89_WKO81,                    //   INT89  WKO[81]
1808              IRQ_INT90_WKO82,                    //   INT90  WKO[82]
1809              IRQ_INT91_WKO83,                    //   INT91  WKO[83]
1810              IRQ_INT92_WKO84,                    //   INT92  WKO[84]
1811              IRQ_INT93_WKO85,                    //   INT93  WKO[85]
1812              IRQ_INT94_WKO86,                    //   INT94  WKO[86]
1813              IRQ_INT95_WKO87,                    //   INT95  WKO[87]
1814          
1815              IRQ_INT96_WKO91,                    //   INT96  WKO[91]
1816              IRQ_INT97_WKO92,                    //   INT97  WKO[92]
1817              IRQ_INT98_WKO93,                    //   INT98  WKO[93]
1818              IRQ_INT99_WKO94,                    //   INT99  WKO[94]
1819              IRQ_INT100_WKO95,                   //   INT100 WKO[95]
1820              IRQ_INT101_WKO96,                   //   INT101 WKO[96]
1821              IRQ_INT102_WKO97,                   //   INT102 WKO[97]
1822              IRQ_INT103_WKO98,                   //   INT103 WKO[98]
1823          
1824              IRQ_INT104_WKO99,                   //   INT104 WKO[99]
1825              IRQ_INT105_WKO100,                  //   INT105 WKO[100]
1826              IRQ_INT106_WKO101,                  //   INT106 WKO[101]
1827              IRQ_INT107_WKO102,                  //   INT107 WKO[102]
1828              IRQ_INT108_WKO103,                  //   INT108 WKO[103]
1829              IRQ_INT109_WKO104,                  //   INT109 WKO[104]
1830              IRQ_INT110_WKO105,                  //   INT110 WKO[105]
1831              IRQ_INT111_WKO106,                  //   INT111 WKO[106]
1832          
1833              IRQ_INT112_WKO107,                  //   INT112 WKO[107]
1834              IRQ_INT113_WKO108,                  //   INT113 WKO[108]
1835              IRQ_INT114_WKO109,                  //   INT114 WKO[109]
1836              IRQ_INT115_WKO110,                  //   INT115 WKO[110]
1837              IRQ_INT116_WKO111,                  //   INT116 WKO[111]
1838              IRQ_INT117_WKO112,                  //   INT117 WKO[112]
1839              IRQ_INT118_WKO113,                  //   INT118 WKO[113]
1840              IRQ_INT119_WKO114,                  //   INT119 WKO[114]
1841          
1842              IRQ_INT120_WKO115,                  //   INT120 WKO[115]
1843              IRQ_INT121_WKO116,                  //   INT121 WKO[116]
1844              IRQ_INT122_WKO117,                  //   INT122 WKO[117]
1845              IRQ_INT123_WKO118,                  //   INT123 WKO[118]
1846              IRQ_INT124_WKO119,                  //   INT124 WKO[119]
1847              IRQ_INT125_WKO120,                  //   INT125 WKO[120]
1848              IRQ_INT126_WKO121,                  //   INT126 WKO[121]
1849              IRQ_INT127_WKO122,                  //   INT127 WKO[122]
1850          
1851              IRQ_INT128_WKO128,                  //   INT128 WKO[128]
1852              IRQ_INT129_WKO129,                  //   INT129 WKO[129]
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 31  

1853              IRQ_INT130_WKO130,                  //   INT130 WKO[130]
1854              IRQ_INT131_WKO131,                  //   INT131 WKO[131]
1855              IRQ_INT132_WKO132,                  //   INT132 WKO[132]
1856              IRQ_INT133_WKO133,                  //   INT133 WKO[133]
1857              IRQ_INT134_WKO134,                  //   INT134 WKO[134]
1858              IRQ_INT135_Null,                    //   INT135 --
1859          
1860              IRQ_INT136_Null,                    //   INT136 --
1861              IRQ_INT137_Null,                    //   INT137 --
1862              IRQ_INT138_Null,                    //   INT138 --
1863              IRQ_INT139_Null,                    //   INT139 --
1864              IRQ_INT140_Null,                    //   INT140 --
1865              IRQ_INT141_Null,                    //   INT141 --
1866              IRQ_INT142_Null,                    //   INT142 --
1867              IRQ_INT143_Null,                    //   INT143 --
1868          
1869              IRQ_INT144_Null,                    //   INT144 --
1870              IRQ_INT145_Null,                    //   INT145 --
1871              IRQ_INT146_Null,                    //   INT146 --
1872              IRQ_INT147_Null,                    //   INT147 --
1873              IRQ_INT148_Null,                    //   INT148 --
1874              IRQ_INT149_PMC5OBE,                 //   INT149 PMC5 output buffer empty interrupt.
1875              IRQ_INT150_PMC5IBF,                 //   INT150 PMC5 input buffer full interrupt.
1876              IRQ_INT151_VCI,                     //   INT151 Voltage comparator interrupt.
1877          };
1878          
1879          void Isr_Int1 (void) interrupt 2 using 2
1880          {
1881   1          if(OEM_Isr_Int1_Request)
1882   1          {
1883   2              Hook_OEM_Isr_Int1();
1884   2          }
1885   1          else
1886   1          {
1887   2              if(IVECT==PS2Interrupt2)            // PS/2 Interrupt 2
1888   2              {
1889   3                  IRQ_INT18_PS2Interrupt2();
1890   3              }
1891   2              else if(IVECT==PS2Interrupt1)       // PS/2 Interrupt 1
1892   2              {
1893   3                  IRQ_INT19_PS2Interrupt1();
1894   3              }
1895   2              else if(IVECT==PS2Interrupt0)       // PS/2 Interrupt 0
1896   2              {
1897   3                  IRQ_INT20_PS2Interrupt0();
1898   3              }
1899   2              else
1900   2              {
1901   3                  (IRQ_Service[(IVECT-0x10)])();  // Dispatch to service handler.
1902   3              }
1903   2          }
1904   1      }
1905          
1906          /* ----------------------------------------------------------------------------
1907           * FUNCTION:   Isr_Tmr1
1908           * ISR for TF1 (Timer 1 Interrupt).  Timer 1 is the 2ms Timer (Timer B).
1909           * ------------------------------------------------------------------------- */
1910          void Isr_Tmr1(void) interrupt 3 using 2
1911          {
1912   1              //Stop_Timer_B();
1913   1          TR1 = 0;                            // Disable timer1       
1914   1              TF1 = 0;                                // Clear overflow flag  
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 32  

1915   1              F_Service_SEND = 0;             // Clear service sned flag
1916   1              if ( Timer_B.fbit.SEND_ENABLE )
1917   1              {
1918   2                      F_Service_SEND = 1;                     // Post service request.
1919   2              Timer_B.fbit.SEND_ENABLE = 0;
1920   2                      //Load_Timer_B();               
1921   2                      TL1 = Timer_2ms;        // Reload timer
1922   2                      TH1 = Timer_2ms>>8;     // 2ms
1923   2                      TF1 = 0;                                // Clear overflow flag          
1924   2                      TR1 = 1;                                // Enable timer1
1925   2              }
1926   1      }
1927          
1928          /* ----------------------------------------------------------------------------
1929           * FUNCTION:   Isr_UART
1930           * ISR for TI or RI (UART Interrupt).
1931           * ------------------------------------------------------------------------- */
1932          void Isr_UART(void) interrupt 4 using 2
1933          {
1934   1      
1935   1      }
1936          
1937          
1938          /* ----------------------------------------------------------------------------
1939           * FUNCTION:   Isr_Tmr2
1940           * ISR for TF2 or EXF2 (Timer 2 Interrupt).
1941           * ------------------------------------------------------------------------- */
1942          void Isr_Tmr2(void) interrupt 5 using 2
1943          {
1944   1      
1945   1      }
1946          
1947          //------------------------------------------------------------------------------
1948          // The function of disable all interrupts
1949          //------------------------------------------------------------------------------
1950          void DisableAllInterrupt(void)
1951          {
1952   1          while( EA )
1953   1          {
1954   2              EA = 0;
1955   2              _nop_();
1956   2              _nop_();
1957   2              _nop_();
1958   2              _nop_();
1959   2          }
1960   1          EA = 0;
1961   1      }
1962          
1963          //------------------------------------------------------------------------------
1964          // The function of enable all interrupts
1965          //------------------------------------------------------------------------------
1966          void EnableAllInterrupt(void)
1967          {
1968   1              EA = 1;
1969   1      }
1970          
1971          //------------------------------------------------------------------------------
1972          // The function of enabling KBC Input Buffer Full (60 64 port)Interrupt
1973          //------------------------------------------------------------------------------
1974          void EnableKBCIBFInt(void)
1975          {
1976   1          SET_MASK(IER3,Int_KBCIBF);
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 33  

1977   1      }
1978          
1979          //------------------------------------------------------------------------------
1980          // The function of enabling PMC Input Buffer Full (62 66 68 6C port)Interrupt
1981          //------------------------------------------------------------------------------
1982          void EnablePMCIBFInt(void)
1983          {
1984   1              SET_MASK(IER3,Int_PMCIBF);
1985   1      }
1986          
1987          //----------------------------------------------------------------------------
1988          // The function of enabling interrupts
1989          //----------------------------------------------------------------------------
1990          void InitEnableInterrupt(void)
1991          {
1992   1              ISR0 = 0xFF;
1993   1              ISR1 = 0xFF;
1994   1              ISR2 = 0xFF;
1995   1              ISR3 = 0xFF;
1996   1              ISR4 = 0xFF;
1997   1          ISR5 = 0xFF;
1998   1              ISR6 = 0xFF;
1999   1          ISR7 = 0xFF;
2000   1          ISR8 = 0xFF;
2001   1          ISR9 = 0xFF;
2002   1      
2003   1              EX1=1;                                  // enable external 1 interrupt
2004   1              EnableAllInterrupt();
2005   1      }
2006          
2007          //----------------------------------------------------------------------------
2008          // The function of enabling module interrupt
2009          //----------------------------------------------------------------------------
2010          void EnableModuleInterrupt(void)
2011          {
2012   1              EnableAllInterrupt();   // enable all interrupts
2013   1          EnableKBCIBFInt();      // Enable 60/64 port input buffer full interrup
2014   1              EnablePMCIBFInt();      // Enable PMC Input Buffer Full (62 66 68 6C port)Interrupt
2015   1      
2016   1              Hook_EnableInterrupt();
2017   1      }
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 34  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00C5 (BEGIN)
0000         L?0198:
0000         L?0199:
0000 900000      E     MOV     DPTR,#PSCTL1
0003 7411              MOV     A,#011H
0005 F0                MOVX    @DPTR,A
0006 900000      E     MOV     DPTR,#PSCTL2
0009 F0                MOVX    @DPTR,A
000A 900000      E     MOV     DPTR,#PSCTL3
000D F0                MOVX    @DPTR,A
000E 22                RET     
000F         L?0200:
000F         L?0201:
000F D200        E     SETB    F_Service_PS2
0011 C200        E     CLR     PS2StartBit
0013 7800        E     MOV     R0,#LOW PS2_SSIRQ_Channel
0015 76FF              MOV     @R0,#0FFH
0017 22                RET     
0018         L?0202:
0018         L?0203:
0018 900000      E     MOV     DPTR,#PS2DataPinStatusCounter
001B E0                MOVX    A,@DPTR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
001E E0                MOVX    A,@DPTR
001F 22                RET     
             ; FUNCTION Com00C5 (END)

             ; FUNCTION IrqLock_scan (BEGIN)
                                           ; SOURCE LINE # 21
                                           ; SOURCE LINE # 22
                                           ; SOURCE LINE # 23
0000 7800        E     MOV     R0,#LOW Int_Var
0002 E6                MOV     A,@R0
0003 4480              ORL     A,#080H
0005 F6                MOV     @R0,A
                                           ; SOURCE LINE # 25
0006 22                RET     
             ; FUNCTION IrqLock_scan (END)

             ; FUNCTION IRQ_INT0_Null (BEGIN)
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 33
0000 22                RET     
             ; FUNCTION IRQ_INT0_Null (END)

             ; FUNCTION IRQ_INT1_WKO20 (BEGIN)
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
0000 020000      E     LJMP    Hook_IRQ_INT1_WKO20
             ; FUNCTION IRQ_INT1_WKO20 (END)

             ; FUNCTION IRQ_INT2_KBCOBE (BEGIN)
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
0000 020000      E     LJMP    Hook_IRQ_INT2_KBCOBE
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 35  

             ; FUNCTION IRQ_INT2_KBCOBE (END)

             ; FUNCTION IRQ_INT3_PMCPMC1OBE (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0000 020000      E     LJMP    Hook_IRQ_INT3_PMCPMC1OBE
             ; FUNCTION IRQ_INT3_PMCPMC1OBE (END)

             ; FUNCTION IRQ_INT4_SMBusD (BEGIN)
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
0000 020000      E     LJMP    Hook_IRQ_INT4_SMBusD
             ; FUNCTION IRQ_INT4_SMBusD (END)

             ; FUNCTION IRQ_INT5_WKINTAD (BEGIN)
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
0000 020000      E     LJMP    Hook_IRQ_INT5_WKINTAD
             ; FUNCTION IRQ_INT5_WKINTAD (END)

             ; FUNCTION IRQ_INT6_WKO23 (BEGIN)
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
0000 020000      E     LJMP    Hook_IRQ_INT6_WKO23
             ; FUNCTION IRQ_INT6_WKO23 (END)

             ; FUNCTION IRQ_INT7_PWM (BEGIN)
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0000 020000      E     LJMP    Hook_IRQ_INT7_PWM
             ; FUNCTION IRQ_INT7_PWM (END)

             ; FUNCTION IRQ_INT8_ADC (BEGIN)
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
0000 020000      E     LJMP    Hook_IRQ_INT8_ADC
             ; FUNCTION IRQ_INT8_ADC (END)

             ; FUNCTION IRQ_INT9_SMBusA (BEGIN)
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
0000 020000      E     LJMP    Hook_IRQ_INT9_SMBusA
             ; FUNCTION IRQ_INT9_SMBusA (END)

             ; FUNCTION IRQ_INT10_SMBusB (BEGIN)
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
0000 020000      E     LJMP    Hook_IRQ_INT10_SMBusB
             ; FUNCTION IRQ_INT10_SMBusB (END)

             ; FUNCTION IRQ_INT11_KBMatrixScan (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 36  

0000 900000      E     MOV     DPTR,#IER1
0003 E0                MOVX    A,@DPTR
0004 54F7              ANL     A,#0F7H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
0007 900000      E     MOV     DPTR,#ISR1
000A 7408              MOV     A,#08H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
000D D200        E     SETB    F_Service_KEY
                                           ; SOURCE LINE # 124
000F 020000      E     LJMP    Hook_IRQ_INT11_KBMatrixScan
             ; FUNCTION IRQ_INT11_KBMatrixScan (END)

             ; FUNCTION IRQ_INT12_WKO26 (BEGIN)
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
0000 020000      E     LJMP    Hook_IRQ_INT12_WKO26
             ; FUNCTION IRQ_INT12_WKO26 (END)

             ; FUNCTION IRQ_INT13_WKINTC (BEGIN)
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
0000 020000      E     LJMP    Hook_IRQ_INT13_WKINTC
             ; FUNCTION IRQ_INT13_WKINTC (END)

             ; FUNCTION IRQ_INT14_WKO25 (BEGIN)
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0000 020000      E     LJMP    Hook_IRQ_INT14_WKO25
             ; FUNCTION IRQ_INT14_WKO25 (END)

             ; FUNCTION IRQ_INT15_CIR (BEGIN)
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0000 020000      E     LJMP    Hook_IRQ_INT15_CIR
             ; FUNCTION IRQ_INT15_CIR (END)

             ; FUNCTION IRQ_INT16_SMBusC (BEGIN)
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
0000 020000      E     LJMP    Hook_IRQ_INT16_SMBusC
             ; FUNCTION IRQ_INT16_SMBusC (END)

             ; FUNCTION IRQ_INT17_WKO24 (BEGIN)
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
0000 020000      E     LJMP    Hook_IRQ_INT17_WKO24
             ; FUNCTION IRQ_INT17_WKO24 (END)

             ; FUNCTION IRQ_INT18_PS2Interrupt2 (BEGIN)
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 234
0000 900000      E     MOV     DPTR,#IER2
0003 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 37  

0004 54FB              ANL     A,#0FBH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 235
0007 900000      E     MOV     DPTR,#ISR2
000A 7404              MOV     A,#04H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
000D 300017      E     JNB     SendtoAUXFlag,?C0020
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
0010 E4                CLR     A
0011 900000      E     MOV     DPTR,#PS2DataPinStatusCounter
0014 F0                MOVX    @DPTR,A
0015         ?C0021:
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 242
0015 900000      E     MOV     DPTR,#GPDRF
0018 E0                MOVX    A,@DPTR
0019 20E50B            JB      ACC.5,?C0020
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
001C         ?C0024:
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
001C E4                CLR     A
001D 900000      E     MOV     DPTR,#WNCKR
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
0021         ?C0023:
0021 120000      R     LCALL   L?0202
0024 B405EE            CJNE    A,#05H,?C0021
                                           ; SOURCE LINE # 251
0027         ?C0020:
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
0027 120000      R     LCALL   L?0198
                                           ; SOURCE LINE # 257
002A 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
002C 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
002E 120000      R     LCALL   L?0200
                                           ; SOURCE LINE # 261
0031 900000      E     MOV     DPTR,#PSDAT3
0034 E0                MOVX    A,@DPTR
0035 7800        E     MOV     R0,#LOW PS2PortxData+02H
0037 F6                MOV     @R0,A
                                           ; SOURCE LINE # 314
0038 020000      E     LJMP    Hook_IRQ_INT18_PS2Interrupt2
             ; FUNCTION IRQ_INT18_PS2Interrupt2 (END)

             ; FUNCTION IRQ_INT19_PS2Interrupt1 (BEGIN)
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 376
0000 900000      E     MOV     DPTR,#IER2
0003 E0                MOVX    A,@DPTR
0004 54F7              ANL     A,#0F7H
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 38  

0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
0007 900000      E     MOV     DPTR,#ISR2
000A 7408              MOV     A,#08H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
000D 300017      E     JNB     SendtoAUXFlag,?C0027
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
0010 E4                CLR     A
0011 900000      E     MOV     DPTR,#PS2DataPinStatusCounter
0014 F0                MOVX    @DPTR,A
0015         ?C0028:
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 384
0015 900000      E     MOV     DPTR,#GPDRF
0018 E0                MOVX    A,@DPTR
0019 20E30B            JB      ACC.3,?C0027
                                           ; SOURCE LINE # 385
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
001C         ?C0031:
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
001C E4                CLR     A
001D 900000      E     MOV     DPTR,#WNCKR
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
0021         ?C0030:
0021 120000      R     LCALL   L?0202
0024 B405EE            CJNE    A,#05H,?C0028
                                           ; SOURCE LINE # 393
0027         ?C0027:
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
0027 120000      R     LCALL   L?0198
                                           ; SOURCE LINE # 399
002A 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
002C 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 402
002E 120000      R     LCALL   L?0200
                                           ; SOURCE LINE # 403
0031 900000      E     MOV     DPTR,#PSDAT2
0034 E0                MOVX    A,@DPTR
0035 7800        E     MOV     R0,#LOW PS2PortxData+01H
0037 F6                MOV     @R0,A
                                           ; SOURCE LINE # 456
0038 020000      E     LJMP    Hook_IRQ_INT19_PS2Interrupt1
             ; FUNCTION IRQ_INT19_PS2Interrupt1 (END)

             ; FUNCTION IRQ_INT20_PS2Interrupt0 (BEGIN)
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 518
0000 900000      E     MOV     DPTR,#IER2
0003 E0                MOVX    A,@DPTR
0004 54EF              ANL     A,#0EFH
0006 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 39  

                                           ; SOURCE LINE # 519
0007 900000      E     MOV     DPTR,#ISR2
000A 7410              MOV     A,#010H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
000D 300017      E     JNB     SendtoAUXFlag,?C0034
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
0010 E4                CLR     A
0011 900000      E     MOV     DPTR,#PS2DataPinStatusCounter
0014 F0                MOVX    @DPTR,A
0015         ?C0035:
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 526
0015 900000      E     MOV     DPTR,#GPDRF
0018 E0                MOVX    A,@DPTR
0019 20E10B            JB      ACC.1,?C0034
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 529
001C         ?C0038:
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
001C E4                CLR     A
001D 900000      E     MOV     DPTR,#WNCKR
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
0021         ?C0037:
0021 120000      R     LCALL   L?0203
0024 B405EE            CJNE    A,#05H,?C0035
                                           ; SOURCE LINE # 535
0027         ?C0034:
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
0027 120000      R     LCALL   L?0199
                                           ; SOURCE LINE # 541
002A E4                CLR     A
002B 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
002D F6                MOV     @R0,A
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
002E 120000      R     LCALL   L?0201
                                           ; SOURCE LINE # 545
0031 900000      E     MOV     DPTR,#PSDAT1
0034 E0                MOVX    A,@DPTR
0035 7800        E     MOV     R0,#LOW PS2PortxData
0037 F6                MOV     @R0,A
                                           ; SOURCE LINE # 598
0038 020000      E     LJMP    Hook_IRQ_INT20_PS2Interrupt0
             ; FUNCTION IRQ_INT20_PS2Interrupt0 (END)

             ; FUNCTION IRQ_INT21_WKO22 (BEGIN)
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 606
0000 020000      E     LJMP    Hook_IRQ_INT21_WKO22
             ; FUNCTION IRQ_INT21_WKO22 (END)

             ; FUNCTION IRQ_INT22_SMFISemaphore (BEGIN)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 40  

                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 614
0000 020000      E     LJMP    Hook_IRQ_INT22_SMFISemaphore
             ; FUNCTION IRQ_INT22_SMFISemaphore (END)

             ; FUNCTION IRQ_INT23_Null (BEGIN)
                                           ; SOURCE LINE # 620
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
0000 020000      E     LJMP    Hook_IRQ_INT23_Null
             ; FUNCTION IRQ_INT23_Null (END)

             ; FUNCTION IRQ_INT24_KBCIBF (BEGIN)
                                           ; SOURCE LINE # 628
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
0000 120000      R     LCALL   IrqLock_scan
                                           ; SOURCE LINE # 631
0003 900000      E     MOV     DPTR,#IER3
0006 E0                MOVX    A,@DPTR
0007 54FE              ANL     A,#0FEH
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 632
000A 900000      E     MOV     DPTR,#ISR3
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 633
0010 D200        E     SETB    F_Service_PCI
                                           ; SOURCE LINE # 635
0012 020000      E     LJMP    Hook_IRQ_INT24_KBCIBF
             ; FUNCTION IRQ_INT24_KBCIBF (END)

             ; FUNCTION IRQ_INT25_PMCPMC1IBF (BEGIN)
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 643
0000 900000      E     MOV     DPTR,#PM2STS
0003 E0                MOVX    A,@DPTR
0004 30E104            JNB     ACC.1,?C0045
                                           ; SOURCE LINE # 644
                                           ; SOURCE LINE # 645
0007 D200        E     SETB    F_Service_PCI3
                                           ; SOURCE LINE # 646
0009 8002              SJMP    ?C0046
000B         ?C0045:
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
000B D200        E     SETB    F_Service_PCI2
                                           ; SOURCE LINE # 650
000D         ?C0046:
                                           ; SOURCE LINE # 651
000D 900000      E     MOV     DPTR,#IER3
0010 E0                MOVX    A,@DPTR
0011 54FD              ANL     A,#0FDH
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 652
0014 900000      E     MOV     DPTR,#ISR3
0017 7402              MOV     A,#02H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
001A 020000      E     LJMP    Hook_IRQ_INT25_PMCPMC1IBF
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 41  

             ; FUNCTION IRQ_INT25_PMCPMC1IBF (END)

             ; FUNCTION IRQ_INT26_PMC2OBE (BEGIN)
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 662
0000 020000      E     LJMP    Hook_IRQ_INT26_PMC2OBE
             ; FUNCTION IRQ_INT26_PMC2OBE (END)

             ; FUNCTION IRQ_INT27_PMC2IBF (BEGIN)
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
0000 020000      E     LJMP    Hook_IRQ_INT27_PMC2IBF
             ; FUNCTION IRQ_INT27_PMC2IBF (END)

             ; FUNCTION IRQ_INT28_GINTofGPD5 (BEGIN)
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 678
0000 020000      E     LJMP    Hook_IRQ_INT28_GINTofGPD5
             ; FUNCTION IRQ_INT28_GINTofGPD5 (END)

             ; FUNCTION IRQ_INT29_EGPC (BEGIN)
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
0000 020000      E     LJMP    Hook_IRQ_INT29_EGPC
             ; FUNCTION IRQ_INT29_EGPC (END)

             ; FUNCTION IRQ_INT30_ET1 (BEGIN)
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 694
0000 020000      E     LJMP    Hook_IRQ_INT30_ET1
             ; FUNCTION IRQ_INT30_ET1 (END)

             ; FUNCTION IRQ_INT31_WKO21 (BEGIN)
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
                                           ; SOURCE LINE # 702
0000 020000      E     LJMP    Hook_IRQ_INT31_WKO21
             ; FUNCTION IRQ_INT31_WKO21 (END)

             ; FUNCTION IRQ_INT32_GPINT0 (BEGIN)
                                           ; SOURCE LINE # 708
                                           ; SOURCE LINE # 709
                                           ; SOURCE LINE # 710
0000 020000      E     LJMP    Hook_IRQ_INT32_GPINT0
             ; FUNCTION IRQ_INT32_GPINT0 (END)

             ; FUNCTION IRQ_INT33_GPINT1 (BEGIN)
                                           ; SOURCE LINE # 716
                                           ; SOURCE LINE # 717
                                           ; SOURCE LINE # 718
0000 020000      E     LJMP    Hook_IRQ_INT33_GPINT1
             ; FUNCTION IRQ_INT33_GPINT1 (END)

             ; FUNCTION IRQ_INT34_GPINT2 (BEGIN)
                                           ; SOURCE LINE # 724
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 726
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 42  

0000 020000      E     LJMP    Hook_IRQ_INT34_GPINT2
             ; FUNCTION IRQ_INT34_GPINT2 (END)

             ; FUNCTION IRQ_INT35_GPINT3 (BEGIN)
                                           ; SOURCE LINE # 732
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 734
0000 020000      E     LJMP    Hook_IRQ_INT35_GPINT3
             ; FUNCTION IRQ_INT35_GPINT3 (END)

             ; FUNCTION IRQ_INT36_CIRGPINT (BEGIN)
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 742
0000 020000      E     LJMP    Hook_IRQ_INT36_CIRGPINT
             ; FUNCTION IRQ_INT36_CIRGPINT (END)

             ; FUNCTION IRQ_INT37_SSPI (BEGIN)
                                           ; SOURCE LINE # 748
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 750
0000 020000      E     LJMP    Hook_IRQ_INT37_SSPI
             ; FUNCTION IRQ_INT37_SSPI (END)

             ; FUNCTION IRQ_INT38_UART1 (BEGIN)
                                           ; SOURCE LINE # 756
                                           ; SOURCE LINE # 757
                                           ; SOURCE LINE # 758
0000 020000      E     LJMP    Hook_IRQ_INT38_UART1
             ; FUNCTION IRQ_INT38_UART1 (END)

             ; FUNCTION IRQ_INT39_UART2 (BEGIN)
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 766
0000 020000      E     LJMP    Hook_IRQ_INT39_UART2
             ; FUNCTION IRQ_INT39_UART2 (END)

             ; FUNCTION IRQ_INT40_Null (BEGIN)
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 774
0000 020000      E     LJMP    Hook_IRQ_INT40_Null
             ; FUNCTION IRQ_INT40_Null (END)

             ; FUNCTION IRQ_INT41_Null (BEGIN)
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
0000 020000      E     LJMP    Hook_IRQ_INT41_Null
             ; FUNCTION IRQ_INT41_Null (END)

             ; FUNCTION IRQ_INT42_Null (BEGIN)
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 789
                                           ; SOURCE LINE # 790
0000 020000      E     LJMP    Hook_IRQ_INT42_Null
             ; FUNCTION IRQ_INT42_Null (END)

             ; FUNCTION IRQ_INT43_Null (BEGIN)
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 43  

                                           ; SOURCE LINE # 798
0000 020000      E     LJMP    Hook_IRQ_INT43_Null
             ; FUNCTION IRQ_INT43_Null (END)

             ; FUNCTION IRQ_INT44_Null (BEGIN)
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
0000 020000      E     LJMP    Hook_IRQ_INT44_Null
             ; FUNCTION IRQ_INT44_Null (END)

             ; FUNCTION IRQ_INT45_Null (BEGIN)
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 813
                                           ; SOURCE LINE # 814
0000 020000      E     LJMP    Hook_IRQ_INT45_Null
             ; FUNCTION IRQ_INT45_Null (END)

             ; FUNCTION IRQ_INT46_Null (BEGIN)
                                           ; SOURCE LINE # 820
                                           ; SOURCE LINE # 821
                                           ; SOURCE LINE # 822
0000 020000      E     LJMP    Hook_IRQ_INT46_Null
             ; FUNCTION IRQ_INT46_Null (END)

             ; FUNCTION IRQ_INT47_Null (BEGIN)
                                           ; SOURCE LINE # 828
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 830
0000 020000      E     LJMP    Hook_IRQ_INT47_Null
             ; FUNCTION IRQ_INT47_Null (END)

             ; FUNCTION IRQ_INT48_WKO60 (BEGIN)
                                           ; SOURCE LINE # 836
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 838
0000 020000      E     LJMP    Hook_IRQ_INT48_WKO60
             ; FUNCTION IRQ_INT48_WKO60 (END)

             ; FUNCTION IRQ_INT49_WKO61 (BEGIN)
                                           ; SOURCE LINE # 844
                                           ; SOURCE LINE # 845
                                           ; SOURCE LINE # 846
0000 020000      E     LJMP    Hook_IRQ_INT49_WKO61
             ; FUNCTION IRQ_INT49_WKO61 (END)

             ; FUNCTION IRQ_INT50_WKO62 (BEGIN)
                                           ; SOURCE LINE # 852
                                           ; SOURCE LINE # 853
                                           ; SOURCE LINE # 854
0000 020000      E     LJMP    Hook_IRQ_INT50_WKO62
             ; FUNCTION IRQ_INT50_WKO62 (END)

             ; FUNCTION IRQ_INT51_WKO63 (BEGIN)
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 862
0000 020000      E     LJMP    Hook_IRQ_INT51_WKO63
             ; FUNCTION IRQ_INT51_WKO63 (END)

             ; FUNCTION IRQ_INT52_WKO64 (BEGIN)
                                           ; SOURCE LINE # 868
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 44  

                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 870
0000 020000      E     LJMP    Hook_IRQ_INT52_WKO64
             ; FUNCTION IRQ_INT52_WKO64 (END)

             ; FUNCTION IRQ_INT53_WKO65 (BEGIN)
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 877
                                           ; SOURCE LINE # 878
0000 020000      E     LJMP    Hook_IRQ_INT53_WKO65
             ; FUNCTION IRQ_INT53_WKO65 (END)

             ; FUNCTION IRQ_INT54_WKO66 (BEGIN)
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 885
                                           ; SOURCE LINE # 886
0000 020000      E     LJMP    Hook_IRQ_INT54_WKO66
             ; FUNCTION IRQ_INT54_WKO66 (END)

             ; FUNCTION IRQ_INT55_WKO67 (BEGIN)
                                           ; SOURCE LINE # 892
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
0000 020000      E     LJMP    Hook_IRQ_INT55_WKO67
             ; FUNCTION IRQ_INT55_WKO67 (END)

             ; FUNCTION IRQ_INT56_Null (BEGIN)
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 901
                                           ; SOURCE LINE # 902
0000 020000      E     LJMP    Hook_IRQ_INT56_Null
             ; FUNCTION IRQ_INT56_Null (END)

             ; FUNCTION IRQ_INT57_Null (BEGIN)
                                           ; SOURCE LINE # 908
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
0000 020000      E     LJMP    Hook_IRQ_INT57_Null
             ; FUNCTION IRQ_INT57_Null (END)

             ; FUNCTION IRQ_INT58_ET2 (BEGIN)
                                           ; SOURCE LINE # 916
                                           ; SOURCE LINE # 917
                                           ; SOURCE LINE # 918
0000 020000      E     LJMP    Hook_IRQ_INT58_ET2
             ; FUNCTION IRQ_INT58_ET2 (END)

             ; FUNCTION IRQ_INT59_DeferredSPIInstruction (BEGIN)
                                           ; SOURCE LINE # 924
                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 926
0000 020000      E     LJMP    Hook_IRQ_INT59_DeferredSPIInstruction
             ; FUNCTION IRQ_INT59_DeferredSPIInstruction (END)

             ; FUNCTION IRQ_INT60_TMRINTA0 (BEGIN)
                                           ; SOURCE LINE # 932
                                           ; SOURCE LINE # 933
                                           ; SOURCE LINE # 934
0000 020000      E     LJMP    Hook_IRQ_INT60_TMRINTA0
             ; FUNCTION IRQ_INT60_TMRINTA0 (END)

             ; FUNCTION IRQ_INT61_TMRINTA1 (BEGIN)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 45  

                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 941
                                           ; SOURCE LINE # 942
0000 020000      E     LJMP    Hook_IRQ_INT61_TMRINTA1
             ; FUNCTION IRQ_INT61_TMRINTA1 (END)

             ; FUNCTION IRQ_INT62_TMRINTB0 (BEGIN)
                                           ; SOURCE LINE # 948
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 950
0000 020000      E     LJMP    Hook_IRQ_INT62_TMRINTB0
             ; FUNCTION IRQ_INT62_TMRINTB0 (END)

             ; FUNCTION IRQ_INT63_TMRINTB1 (BEGIN)
                                           ; SOURCE LINE # 956
                                           ; SOURCE LINE # 957
                                           ; SOURCE LINE # 958
0000 020000      E     LJMP    Hook_IRQ_INT63_TMRINTB1
             ; FUNCTION IRQ_INT63_TMRINTB1 (END)

             ; FUNCTION IRQ_INT64_PMC2EXOBE (BEGIN)
                                           ; SOURCE LINE # 964
                                           ; SOURCE LINE # 965
                                           ; SOURCE LINE # 966
0000 020000      E     LJMP    Hook_IRQ_INT64_PMC2EXOBE
             ; FUNCTION IRQ_INT64_PMC2EXOBE (END)

             ; FUNCTION IRQ_INT65_PMC2EXIBF (BEGIN)
                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 973
                                           ; SOURCE LINE # 974
0000 020000      E     LJMP    Hook_IRQ_INT65_PMC2EXIBF
             ; FUNCTION IRQ_INT65_PMC2EXIBF (END)

             ; FUNCTION IRQ_INT66_PMC3OBE (BEGIN)
                                           ; SOURCE LINE # 980
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 982
0000 020000      E     LJMP    Hook_IRQ_INT66_PMC3OBE
             ; FUNCTION IRQ_INT66_PMC3OBE (END)

             ; FUNCTION IRQ_INT67_PMC3IBF (BEGIN)
                                           ; SOURCE LINE # 988
                                           ; SOURCE LINE # 989
                                           ; SOURCE LINE # 990
0000 020000      E     LJMP    Hook_IRQ_INT67_PMC3IBF
             ; FUNCTION IRQ_INT67_PMC3IBF (END)

             ; FUNCTION IRQ_INT68_PMC4OBE (BEGIN)
                                           ; SOURCE LINE # 996
                                           ; SOURCE LINE # 997
                                           ; SOURCE LINE # 998
0000 020000      E     LJMP    Hook_IRQ_INT68_PMC4OBE
             ; FUNCTION IRQ_INT68_PMC4OBE (END)

             ; FUNCTION IRQ_INT69_PMC4IBF (BEGIN)
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
                                           ; SOURCE LINE # 1006
0000 020000      E     LJMP    Hook_IRQ_INT69_PMC4IBF
             ; FUNCTION IRQ_INT69_PMC4IBF (END)

C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 46  

             ; FUNCTION IRQ_INT70_Null (BEGIN)
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1014
0000 020000      E     LJMP    Hook_IRQ_INT70_Null
             ; FUNCTION IRQ_INT70_Null (END)

             ; FUNCTION IRQ_INT71_I2BRAM (BEGIN)
                                           ; SOURCE LINE # 1020
                                           ; SOURCE LINE # 1021
                                           ; SOURCE LINE # 1022
0000 020000      E     LJMP    Hook_IRQ_INT71_I2BRAM
             ; FUNCTION IRQ_INT71_I2BRAM (END)

             ; FUNCTION IRQ_INT72_WKO70 (BEGIN)
                                           ; SOURCE LINE # 1028
                                           ; SOURCE LINE # 1029
                                           ; SOURCE LINE # 1030
0000 020000      E     LJMP    Hook_IRQ_INT72_WKO70
             ; FUNCTION IRQ_INT72_WKO70 (END)

             ; FUNCTION IRQ_INT73_WKO71 (BEGIN)
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1038
0000 020000      E     LJMP    Hook_IRQ_INT73_WKO71
             ; FUNCTION IRQ_INT73_WKO71 (END)

             ; FUNCTION IRQ_INT74_WKO72 (BEGIN)
                                           ; SOURCE LINE # 1044
                                           ; SOURCE LINE # 1045
                                           ; SOURCE LINE # 1046
0000 020000      E     LJMP    Hook_IRQ_INT74_WKO72
             ; FUNCTION IRQ_INT74_WKO72 (END)

             ; FUNCTION IRQ_INT75_WKO73 (BEGIN)
                                           ; SOURCE LINE # 1052
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1054
0000 020000      E     LJMP    Hook_IRQ_INT75_WKO73
             ; FUNCTION IRQ_INT75_WKO73 (END)

             ; FUNCTION IRQ_INT76_WKO74 (BEGIN)
                                           ; SOURCE LINE # 1060
                                           ; SOURCE LINE # 1061
                                           ; SOURCE LINE # 1062
0000 020000      E     LJMP    Hook_IRQ_INT76_WKO74
             ; FUNCTION IRQ_INT76_WKO74 (END)

             ; FUNCTION IRQ_INT77_WKO75 (BEGIN)
                                           ; SOURCE LINE # 1068
                                           ; SOURCE LINE # 1069
                                           ; SOURCE LINE # 1070
0000 020000      E     LJMP    Hook_IRQ_INT77_WKO75
             ; FUNCTION IRQ_INT77_WKO75 (END)

             ; FUNCTION IRQ_INT78_WKO76 (BEGIN)
                                           ; SOURCE LINE # 1076
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1078
0000 020000      E     LJMP    Hook_IRQ_INT78_WKO76
             ; FUNCTION IRQ_INT78_WKO76 (END)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 47  


             ; FUNCTION IRQ_INT79_WKO77 (BEGIN)
                                           ; SOURCE LINE # 1084
                                           ; SOURCE LINE # 1085
                                           ; SOURCE LINE # 1086
0000 020000      E     LJMP    Hook_IRQ_INT79_WKO77
             ; FUNCTION IRQ_INT79_WKO77 (END)

             ; FUNCTION IRQ_INT80_Null (BEGIN)
                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1093
                                           ; SOURCE LINE # 1094
0000 020000      E     LJMP    Hook_IRQ_INT80_Null
             ; FUNCTION IRQ_INT80_Null (END)

             ; FUNCTION IRQ_INT81_SMBusClockHeld (BEGIN)
                                           ; SOURCE LINE # 1100
                                           ; SOURCE LINE # 1101
                                           ; SOURCE LINE # 1102
0000 020000      E     LJMP    Hook_IRQ_INT81_SMBusClockHeld
             ; FUNCTION IRQ_INT81_SMBusClockHeld (END)

             ; FUNCTION IRQ_INT82_CEC (BEGIN)
                                           ; SOURCE LINE # 1108
                                           ; SOURCE LINE # 1109
                                           ; SOURCE LINE # 1110
0000 020000      E     LJMP    Hook_IRQ_INT82_CEC
             ; FUNCTION IRQ_INT82_CEC (END)

             ; FUNCTION IRQ_INT83_H2RAMLPC (BEGIN)
                                           ; SOURCE LINE # 1116
                                           ; SOURCE LINE # 1117
                                           ; SOURCE LINE # 1118
0000 020000      E     LJMP    Hook_IRQ_INT83_H2RAMLPC
             ; FUNCTION IRQ_INT83_H2RAMLPC (END)

             ; FUNCTION IRQ_INT84_Null (BEGIN)
                                           ; SOURCE LINE # 1124
                                           ; SOURCE LINE # 1125
                                           ; SOURCE LINE # 1126
0000 020000      E     LJMP    Hook_IRQ_INT84_Null
             ; FUNCTION IRQ_INT84_Null (END)

             ; FUNCTION IRQ_INT85_WKO88 (BEGIN)
                                           ; SOURCE LINE # 1132
                                           ; SOURCE LINE # 1133
                                           ; SOURCE LINE # 1134
0000 020000      E     LJMP    Hook_IRQ_INT85_WKO88
             ; FUNCTION IRQ_INT85_WKO88 (END)

             ; FUNCTION IRQ_INT86_WKO89 (BEGIN)
                                           ; SOURCE LINE # 1140
                                           ; SOURCE LINE # 1141
                                           ; SOURCE LINE # 1142
0000 020000      E     LJMP    Hook_IRQ_INT86_WKO89
             ; FUNCTION IRQ_INT86_WKO89 (END)

             ; FUNCTION IRQ_INT87_WKO90 (BEGIN)
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
                                           ; SOURCE LINE # 1150
0000 020000      E     LJMP    Hook_IRQ_INT87_WKO90
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 48  

             ; FUNCTION IRQ_INT87_WKO90 (END)

             ; FUNCTION IRQ_INT88_WKO80 (BEGIN)
                                           ; SOURCE LINE # 1156
                                           ; SOURCE LINE # 1157
                                           ; SOURCE LINE # 1158
0000 020000      E     LJMP    Hook_IRQ_INT88_WKO80
             ; FUNCTION IRQ_INT88_WKO80 (END)

             ; FUNCTION IRQ_INT89_WKO81 (BEGIN)
                                           ; SOURCE LINE # 1164
                                           ; SOURCE LINE # 1165
                                           ; SOURCE LINE # 1166
0000 020000      E     LJMP    Hook_IRQ_INT89_WKO81
             ; FUNCTION IRQ_INT89_WKO81 (END)

             ; FUNCTION IRQ_INT90_WKO82 (BEGIN)
                                           ; SOURCE LINE # 1172
                                           ; SOURCE LINE # 1173
                                           ; SOURCE LINE # 1174
0000 020000      E     LJMP    Hook_IRQ_INT90_WKO82
             ; FUNCTION IRQ_INT90_WKO82 (END)

             ; FUNCTION IRQ_INT91_WKO83 (BEGIN)
                                           ; SOURCE LINE # 1180
                                           ; SOURCE LINE # 1181
                                           ; SOURCE LINE # 1182
0000 020000      E     LJMP    Hook_IRQ_INT91_WKO83
             ; FUNCTION IRQ_INT91_WKO83 (END)

             ; FUNCTION IRQ_INT92_WKO84 (BEGIN)
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1189
                                           ; SOURCE LINE # 1190
0000 020000      E     LJMP    Hook_IRQ_INT92_WKO84
             ; FUNCTION IRQ_INT92_WKO84 (END)

             ; FUNCTION IRQ_INT93_WKO85 (BEGIN)
                                           ; SOURCE LINE # 1196
                                           ; SOURCE LINE # 1197
                                           ; SOURCE LINE # 1198
0000 020000      E     LJMP    Hook_IRQ_INT93_WKO85
             ; FUNCTION IRQ_INT93_WKO85 (END)

             ; FUNCTION IRQ_INT94_WKO86 (BEGIN)
                                           ; SOURCE LINE # 1204
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1206
0000 020000      E     LJMP    Hook_IRQ_INT94_WKO86
             ; FUNCTION IRQ_INT94_WKO86 (END)

             ; FUNCTION IRQ_INT95_WKO87 (BEGIN)
                                           ; SOURCE LINE # 1212
                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1214
0000 020000      E     LJMP    Hook_IRQ_INT95_WKO87
             ; FUNCTION IRQ_INT95_WKO87 (END)

             ; FUNCTION IRQ_INT96_WKO91 (BEGIN)
                                           ; SOURCE LINE # 1220
                                           ; SOURCE LINE # 1221
                                           ; SOURCE LINE # 1222
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 49  

0000 020000      E     LJMP    Hook_IRQ_INT96_WKO91
             ; FUNCTION IRQ_INT96_WKO91 (END)

             ; FUNCTION IRQ_INT97_WKO92 (BEGIN)
                                           ; SOURCE LINE # 1228
                                           ; SOURCE LINE # 1229
                                           ; SOURCE LINE # 1230
0000 020000      E     LJMP    Hook_IRQ_INT97_WKO92
             ; FUNCTION IRQ_INT97_WKO92 (END)

             ; FUNCTION IRQ_INT98_WKO93 (BEGIN)
                                           ; SOURCE LINE # 1236
                                           ; SOURCE LINE # 1237
                                           ; SOURCE LINE # 1238
0000 020000      E     LJMP    Hook_IRQ_INT98_WKO93
             ; FUNCTION IRQ_INT98_WKO93 (END)

             ; FUNCTION IRQ_INT99_WKO94 (BEGIN)
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1245
                                           ; SOURCE LINE # 1246
0000 020000      E     LJMP    Hook_IRQ_INT99_WKO94
             ; FUNCTION IRQ_INT99_WKO94 (END)

             ; FUNCTION IRQ_INT100_WKO95 (BEGIN)
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1254
0000 020000      E     LJMP    Hook_IRQ_INT100_WKO95
             ; FUNCTION IRQ_INT100_WKO95 (END)

             ; FUNCTION IRQ_INT101_WKO96 (BEGIN)
                                           ; SOURCE LINE # 1260
                                           ; SOURCE LINE # 1261
                                           ; SOURCE LINE # 1262
0000 020000      E     LJMP    Hook_IRQ_INT101_WKO96
             ; FUNCTION IRQ_INT101_WKO96 (END)

             ; FUNCTION IRQ_INT102_WKO97 (BEGIN)
                                           ; SOURCE LINE # 1268
                                           ; SOURCE LINE # 1269
                                           ; SOURCE LINE # 1270
0000 020000      E     LJMP    Hook_IRQ_INT102_WKO97
             ; FUNCTION IRQ_INT102_WKO97 (END)

             ; FUNCTION IRQ_INT103_WKO98 (BEGIN)
                                           ; SOURCE LINE # 1276
                                           ; SOURCE LINE # 1277
                                           ; SOURCE LINE # 1278
0000 020000      E     LJMP    Hook_IRQ_INT103_WKO98
             ; FUNCTION IRQ_INT103_WKO98 (END)

             ; FUNCTION IRQ_INT104_WKO99 (BEGIN)
                                           ; SOURCE LINE # 1284
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1286
0000 020000      E     LJMP    Hook_IRQ_INT104_WKO99
             ; FUNCTION IRQ_INT104_WKO99 (END)

             ; FUNCTION IRQ_INT105_WKO100 (BEGIN)
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1293
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 50  

                                           ; SOURCE LINE # 1294
0000 020000      E     LJMP    Hook_IRQ_INT105_WKO100
             ; FUNCTION IRQ_INT105_WKO100 (END)

             ; FUNCTION IRQ_INT106_WKO101 (BEGIN)
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1301
                                           ; SOURCE LINE # 1302
0000 020000      E     LJMP    Hook_IRQ_INT106_WKO101
             ; FUNCTION IRQ_INT106_WKO101 (END)

             ; FUNCTION IRQ_INT107_WKO102 (BEGIN)
                                           ; SOURCE LINE # 1308
                                           ; SOURCE LINE # 1309
                                           ; SOURCE LINE # 1310
0000 020000      E     LJMP    Hook_IRQ_INT107_WKO102
             ; FUNCTION IRQ_INT107_WKO102 (END)

             ; FUNCTION IRQ_INT108_WKO103 (BEGIN)
                                           ; SOURCE LINE # 1316
                                           ; SOURCE LINE # 1317
                                           ; SOURCE LINE # 1318
0000 020000      E     LJMP    Hook_IRQ_INT108_WKO103
             ; FUNCTION IRQ_INT108_WKO103 (END)

             ; FUNCTION IRQ_INT109_WKO104 (BEGIN)
                                           ; SOURCE LINE # 1324
                                           ; SOURCE LINE # 1325
                                           ; SOURCE LINE # 1326
0000 020000      E     LJMP    Hook_IRQ_INT109_WKO104
             ; FUNCTION IRQ_INT109_WKO104 (END)

             ; FUNCTION IRQ_INT110_WKO105 (BEGIN)
                                           ; SOURCE LINE # 1332
                                           ; SOURCE LINE # 1333
                                           ; SOURCE LINE # 1334
0000 020000      E     LJMP    Hook_IRQ_INT110_WKO105
             ; FUNCTION IRQ_INT110_WKO105 (END)

             ; FUNCTION IRQ_INT111_WKO106 (BEGIN)
                                           ; SOURCE LINE # 1340
                                           ; SOURCE LINE # 1341
                                           ; SOURCE LINE # 1342
0000 020000      E     LJMP    Hook_IRQ_INT111_WKO106
             ; FUNCTION IRQ_INT111_WKO106 (END)

             ; FUNCTION IRQ_INT112_WKO107 (BEGIN)
                                           ; SOURCE LINE # 1348
                                           ; SOURCE LINE # 1349
                                           ; SOURCE LINE # 1350
0000 020000      E     LJMP    Hook_IRQ_INT112_WKO107
             ; FUNCTION IRQ_INT112_WKO107 (END)

             ; FUNCTION IRQ_INT113_WKO108 (BEGIN)
                                           ; SOURCE LINE # 1356
                                           ; SOURCE LINE # 1357
                                           ; SOURCE LINE # 1358
0000 020000      E     LJMP    Hook_IRQ_INT113_WKO108
             ; FUNCTION IRQ_INT113_WKO108 (END)

             ; FUNCTION IRQ_INT114_WKO109 (BEGIN)
                                           ; SOURCE LINE # 1364
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 51  

                                           ; SOURCE LINE # 1365
                                           ; SOURCE LINE # 1366
0000 020000      E     LJMP    Hook_IRQ_INT114_WKO109
             ; FUNCTION IRQ_INT114_WKO109 (END)

             ; FUNCTION IRQ_INT115_WKO110 (BEGIN)
                                           ; SOURCE LINE # 1372
                                           ; SOURCE LINE # 1373
                                           ; SOURCE LINE # 1374
0000 020000      E     LJMP    Hook_IRQ_INT115_WKO110
             ; FUNCTION IRQ_INT115_WKO110 (END)

             ; FUNCTION IRQ_INT116_WKO111 (BEGIN)
                                           ; SOURCE LINE # 1380
                                           ; SOURCE LINE # 1381
                                           ; SOURCE LINE # 1382
0000 020000      E     LJMP    Hook_IRQ_INT116_WKO111
             ; FUNCTION IRQ_INT116_WKO111 (END)

             ; FUNCTION IRQ_INT117_WKO112 (BEGIN)
                                           ; SOURCE LINE # 1388
                                           ; SOURCE LINE # 1389
                                           ; SOURCE LINE # 1390
0000 020000      E     LJMP    Hook_IRQ_INT117_WKO112
             ; FUNCTION IRQ_INT117_WKO112 (END)

             ; FUNCTION IRQ_INT118_WKO113 (BEGIN)
                                           ; SOURCE LINE # 1396
                                           ; SOURCE LINE # 1397
                                           ; SOURCE LINE # 1398
0000 020000      E     LJMP    Hook_IRQ_INT118_WKO113
             ; FUNCTION IRQ_INT118_WKO113 (END)

             ; FUNCTION IRQ_INT119_WKO114 (BEGIN)
                                           ; SOURCE LINE # 1404
                                           ; SOURCE LINE # 1405
                                           ; SOURCE LINE # 1406
0000 020000      E     LJMP    Hook_IRQ_INT119_WKO114
             ; FUNCTION IRQ_INT119_WKO114 (END)

             ; FUNCTION IRQ_INT120_WKO115 (BEGIN)
                                           ; SOURCE LINE # 1412
                                           ; SOURCE LINE # 1413
                                           ; SOURCE LINE # 1414
0000 020000      E     LJMP    Hook_IRQ_INT120_WKO115
             ; FUNCTION IRQ_INT120_WKO115 (END)

             ; FUNCTION IRQ_INT121_WKO116 (BEGIN)
                                           ; SOURCE LINE # 1420
                                           ; SOURCE LINE # 1421
                                           ; SOURCE LINE # 1422
0000 020000      E     LJMP    Hook_IRQ_INT121_WKO116
             ; FUNCTION IRQ_INT121_WKO116 (END)

             ; FUNCTION IRQ_INT122_WKO117 (BEGIN)
                                           ; SOURCE LINE # 1428
                                           ; SOURCE LINE # 1429
                                           ; SOURCE LINE # 1430
0000 020000      E     LJMP    Hook_IRQ_INT122_WKO117
             ; FUNCTION IRQ_INT122_WKO117 (END)

             ; FUNCTION IRQ_INT123_WKO118 (BEGIN)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 52  

                                           ; SOURCE LINE # 1436
                                           ; SOURCE LINE # 1437
                                           ; SOURCE LINE # 1438
0000 020000      E     LJMP    Hook_IRQ_INT123_WKO118
             ; FUNCTION IRQ_INT123_WKO118 (END)

             ; FUNCTION IRQ_INT124_WKO119 (BEGIN)
                                           ; SOURCE LINE # 1444
                                           ; SOURCE LINE # 1445
                                           ; SOURCE LINE # 1446
0000 020000      E     LJMP    Hook_IRQ_INT124_WKO119
             ; FUNCTION IRQ_INT124_WKO119 (END)

             ; FUNCTION IRQ_INT125_WKO120 (BEGIN)
                                           ; SOURCE LINE # 1452
                                           ; SOURCE LINE # 1453
                                           ; SOURCE LINE # 1454
0000 020000      E     LJMP    Hook_IRQ_INT125_WKO120
             ; FUNCTION IRQ_INT125_WKO120 (END)

             ; FUNCTION IRQ_INT126_WKO121 (BEGIN)
                                           ; SOURCE LINE # 1460
                                           ; SOURCE LINE # 1461
                                           ; SOURCE LINE # 1462
0000 020000      E     LJMP    Hook_IRQ_INT126_WKO121
             ; FUNCTION IRQ_INT126_WKO121 (END)

             ; FUNCTION IRQ_INT127_WKO122 (BEGIN)
                                           ; SOURCE LINE # 1468
                                           ; SOURCE LINE # 1469
                                           ; SOURCE LINE # 1470
0000 020000      E     LJMP    Hook_IRQ_INT127_WKO122
             ; FUNCTION IRQ_INT127_WKO122 (END)

             ; FUNCTION IRQ_INT128_WKO128 (BEGIN)
                                           ; SOURCE LINE # 1476
                                           ; SOURCE LINE # 1477
                                           ; SOURCE LINE # 1478
0000 020000      E     LJMP    Hook_IRQ_INT128_WKO128
             ; FUNCTION IRQ_INT128_WKO128 (END)

             ; FUNCTION IRQ_INT129_WKO129 (BEGIN)
                                           ; SOURCE LINE # 1484
                                           ; SOURCE LINE # 1485
                                           ; SOURCE LINE # 1486
0000 020000      E     LJMP    Hook_IRQ_INT129_WKO129
             ; FUNCTION IRQ_INT129_WKO129 (END)

             ; FUNCTION IRQ_INT130_WKO130 (BEGIN)
                                           ; SOURCE LINE # 1492
                                           ; SOURCE LINE # 1493
                                           ; SOURCE LINE # 1494
0000 020000      E     LJMP    Hook_IRQ_INT130_WKO130
             ; FUNCTION IRQ_INT130_WKO130 (END)

             ; FUNCTION IRQ_INT131_WKO131 (BEGIN)
                                           ; SOURCE LINE # 1500
                                           ; SOURCE LINE # 1501
                                           ; SOURCE LINE # 1502
0000 020000      E     LJMP    Hook_IRQ_INT131_WKO131
             ; FUNCTION IRQ_INT131_WKO131 (END)

C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 53  

             ; FUNCTION IRQ_INT132_WKO132 (BEGIN)
                                           ; SOURCE LINE # 1508
                                           ; SOURCE LINE # 1509
                                           ; SOURCE LINE # 1510
0000 020000      E     LJMP    Hook_IRQ_INT132_WKO132
             ; FUNCTION IRQ_INT132_WKO132 (END)

             ; FUNCTION IRQ_INT133_WKO133 (BEGIN)
                                           ; SOURCE LINE # 1516
                                           ; SOURCE LINE # 1517
                                           ; SOURCE LINE # 1518
0000 020000      E     LJMP    Hook_IRQ_INT133_WKO133
             ; FUNCTION IRQ_INT133_WKO133 (END)

             ; FUNCTION IRQ_INT134_WKO134 (BEGIN)
                                           ; SOURCE LINE # 1524
                                           ; SOURCE LINE # 1525
                                           ; SOURCE LINE # 1526
0000 020000      E     LJMP    Hook_IRQ_INT134_WKO134
             ; FUNCTION IRQ_INT134_WKO134 (END)

             ; FUNCTION IRQ_INT135_Null (BEGIN)
                                           ; SOURCE LINE # 1532
                                           ; SOURCE LINE # 1533
                                           ; SOURCE LINE # 1534
0000 020000      E     LJMP    Hook_IRQ_INT135_Null
             ; FUNCTION IRQ_INT135_Null (END)

             ; FUNCTION IRQ_INT136_Null (BEGIN)
                                           ; SOURCE LINE # 1540
                                           ; SOURCE LINE # 1541
                                           ; SOURCE LINE # 1542
0000 020000      E     LJMP    Hook_IRQ_INT136_Null
             ; FUNCTION IRQ_INT136_Null (END)

             ; FUNCTION IRQ_INT137_Null (BEGIN)
                                           ; SOURCE LINE # 1548
                                           ; SOURCE LINE # 1549
                                           ; SOURCE LINE # 1550
0000 020000      E     LJMP    Hook_IRQ_INT137_Null
             ; FUNCTION IRQ_INT137_Null (END)

             ; FUNCTION IRQ_INT138_Null (BEGIN)
                                           ; SOURCE LINE # 1556
                                           ; SOURCE LINE # 1557
                                           ; SOURCE LINE # 1558
0000 020000      E     LJMP    Hook_IRQ_INT138_Null
             ; FUNCTION IRQ_INT138_Null (END)

             ; FUNCTION IRQ_INT139_Null (BEGIN)
                                           ; SOURCE LINE # 1564
                                           ; SOURCE LINE # 1565
                                           ; SOURCE LINE # 1566
0000 020000      E     LJMP    Hook_IRQ_INT139_Null
             ; FUNCTION IRQ_INT139_Null (END)

             ; FUNCTION IRQ_INT140_Null (BEGIN)
                                           ; SOURCE LINE # 1572
                                           ; SOURCE LINE # 1573
                                           ; SOURCE LINE # 1574
0000 020000      E     LJMP    Hook_IRQ_INT140_Null
             ; FUNCTION IRQ_INT140_Null (END)
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 54  


             ; FUNCTION IRQ_INT141_Null (BEGIN)
                                           ; SOURCE LINE # 1580
                                           ; SOURCE LINE # 1581
                                           ; SOURCE LINE # 1582
0000 020000      E     LJMP    Hook_IRQ_INT141_Null
             ; FUNCTION IRQ_INT141_Null (END)

             ; FUNCTION IRQ_INT142_Null (BEGIN)
                                           ; SOURCE LINE # 1588
                                           ; SOURCE LINE # 1589
                                           ; SOURCE LINE # 1590
0000 020000      E     LJMP    Hook_IRQ_INT142_Null
             ; FUNCTION IRQ_INT142_Null (END)

             ; FUNCTION IRQ_INT143_Null (BEGIN)
                                           ; SOURCE LINE # 1596
                                           ; SOURCE LINE # 1597
                                           ; SOURCE LINE # 1598
0000 020000      E     LJMP    Hook_IRQ_INT143_Null
             ; FUNCTION IRQ_INT143_Null (END)

             ; FUNCTION IRQ_INT144_Null (BEGIN)
                                           ; SOURCE LINE # 1604
                                           ; SOURCE LINE # 1605
                                           ; SOURCE LINE # 1606
0000 020000      E     LJMP    Hook_IRQ_INT144_Null
             ; FUNCTION IRQ_INT144_Null (END)

             ; FUNCTION IRQ_INT145_Null (BEGIN)
                                           ; SOURCE LINE # 1612
                                           ; SOURCE LINE # 1613
                                           ; SOURCE LINE # 1614
0000 020000      E     LJMP    Hook_IRQ_INT145_Null
             ; FUNCTION IRQ_INT145_Null (END)

             ; FUNCTION IRQ_INT146_Null (BEGIN)
                                           ; SOURCE LINE # 1620
                                           ; SOURCE LINE # 1621
                                           ; SOURCE LINE # 1622
0000 020000      E     LJMP    Hook_IRQ_INT146_Null
             ; FUNCTION IRQ_INT146_Null (END)

             ; FUNCTION IRQ_INT147_Null (BEGIN)
                                           ; SOURCE LINE # 1628
                                           ; SOURCE LINE # 1629
                                           ; SOURCE LINE # 1630
0000 020000      E     LJMP    Hook_IRQ_INT147_Null
             ; FUNCTION IRQ_INT147_Null (END)

             ; FUNCTION IRQ_INT148_Null (BEGIN)
                                           ; SOURCE LINE # 1636
                                           ; SOURCE LINE # 1637
                                           ; SOURCE LINE # 1638
0000 020000      E     LJMP    Hook_IRQ_INT148_Null
             ; FUNCTION IRQ_INT148_Null (END)

             ; FUNCTION IRQ_INT149_PMC5OBE (BEGIN)
                                           ; SOURCE LINE # 1644
                                           ; SOURCE LINE # 1645
                                           ; SOURCE LINE # 1646
0000 020000      E     LJMP    Hook_IRQ_INT149_PMC5OBE
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 55  

             ; FUNCTION IRQ_INT149_PMC5OBE (END)

             ; FUNCTION IRQ_INT150_PMC5IBF (BEGIN)
                                           ; SOURCE LINE # 1652
                                           ; SOURCE LINE # 1653
                                           ; SOURCE LINE # 1654
0000 020000      E     LJMP    Hook_IRQ_INT150_PMC5IBF
             ; FUNCTION IRQ_INT150_PMC5IBF (END)

             ; FUNCTION IRQ_INT151_VCI (BEGIN)
                                           ; SOURCE LINE # 1660
                                           ; SOURCE LINE # 1661
                                           ; SOURCE LINE # 1662
0000 020000      E     LJMP    Hook_IRQ_INT151_VCI
             ; FUNCTION IRQ_INT151_VCI (END)

             ; FUNCTION Isr_Int0 (BEGIN)
                                           ; SOURCE LINE # 1669
                                           ; SOURCE LINE # 1672
0000 32                RETI    
             ; FUNCTION Isr_Int0 (END)

             ; FUNCTION Isr_Tmr0 (BEGIN)
                                           ; SOURCE LINE # 1689
                                           ; SOURCE LINE # 1692
0000 758A00            MOV     TL0,#00H
                                           ; SOURCE LINE # 1693
0003 758CFD            MOV     TH0,#0FDH
                                           ; SOURCE LINE # 1694
0006 C28D              CLR     TF0
                                           ; SOURCE LINE # 1695
0008 D200        E     SETB    F_Service_MS_1
                                           ; SOURCE LINE # 1696
000A 32                RETI    
             ; FUNCTION Isr_Tmr0 (END)

             ; FUNCTION Isr_Int1 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D010            MOV     PSW,#010H
                                           ; SOURCE LINE # 1879
                                           ; SOURCE LINE # 1881
000D 300005      E     JNB     OEM_Isr_Int1_Request,?C0176
                                           ; SOURCE LINE # 1882
                                           ; SOURCE LINE # 1883
0010 120000      E     LCALL   Hook_OEM_Isr_Int1
                                           ; SOURCE LINE # 1884
0013 803E              SJMP    ?C0184
0015         ?C0176:
                                           ; SOURCE LINE # 1886
                                           ; SOURCE LINE # 1887
0015 900000      E     MOV     DPTR,#IVECT
0018 E0                MOVX    A,@DPTR
0019 B42205            CJNE    A,#022H,?C0178
                                           ; SOURCE LINE # 1888
                                           ; SOURCE LINE # 1889
001C 120000      R     LCALL   IRQ_INT18_PS2Interrupt2
                                           ; SOURCE LINE # 1890
001F 8032              SJMP    ?C0184
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 56  

0021         ?C0178:
                                           ; SOURCE LINE # 1891
0021 900000      E     MOV     DPTR,#IVECT
0024 E0                MOVX    A,@DPTR
0025 B42305            CJNE    A,#023H,?C0180
                                           ; SOURCE LINE # 1892
                                           ; SOURCE LINE # 1893
0028 120000      R     LCALL   IRQ_INT19_PS2Interrupt1
                                           ; SOURCE LINE # 1894
002B 8026              SJMP    ?C0184
002D         ?C0180:
                                           ; SOURCE LINE # 1895
002D 900000      E     MOV     DPTR,#IVECT
0030 E0                MOVX    A,@DPTR
0031 B42405            CJNE    A,#024H,?C0182
                                           ; SOURCE LINE # 1896
                                           ; SOURCE LINE # 1897
0034 120000      R     LCALL   IRQ_INT20_PS2Interrupt0
                                           ; SOURCE LINE # 1898
0037 801A              SJMP    ?C0184
0039         ?C0182:
                                           ; SOURCE LINE # 1900
                                           ; SOURCE LINE # 1901
0039 900000      E     MOV     DPTR,#IVECT
003C E0                MOVX    A,@DPTR
003D 75F002            MOV     B,#02H
0040 900000      R     MOV     DPTR,#IRQ_Service-020H
0043 120000      E     LCALL   ?C?OFFXADD
0046 E4                CLR     A
0047 93                MOVC    A,@A+DPTR
0048 FE                MOV     R6,A
0049 7401              MOV     A,#01H
004B 93                MOVC    A,@A+DPTR
004C CA                XCH     A,R2
004D EE                MOV     A,R6
004E CA                XCH     A,R2
004F F9                MOV     R1,A
0050 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 1902
                                           ; SOURCE LINE # 1903
                                           ; SOURCE LINE # 1904
0053         ?C0184:
0053 D0D0              POP     PSW
0055 D082              POP     DPL
0057 D083              POP     DPH
0059 D0F0              POP     B
005B D0E0              POP     ACC
005D 32                RETI    
             ; FUNCTION Isr_Int1 (END)

             ; FUNCTION Isr_Tmr1 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0D0              PUSH    PSW
0004 75D010            MOV     PSW,#010H
                                           ; SOURCE LINE # 1910
                                           ; SOURCE LINE # 1913
0007 C28E              CLR     TR1
                                           ; SOURCE LINE # 1914
0009 C28F              CLR     TF1
                                           ; SOURCE LINE # 1915
000B C200        E     CLR     F_Service_SEND
                                           ; SOURCE LINE # 1916
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 57  

000D AF00        E     MOV     R7,Timer_B
000F EF                MOV     A,R7
0010 C4                SWAP    A
0011 540F              ANL     A,#0FH
0013 30E013            JNB     ACC.0,?C0186
                                           ; SOURCE LINE # 1917
                                           ; SOURCE LINE # 1918
0016 D200        E     SETB    F_Service_SEND
                                           ; SOURCE LINE # 1919
0018 AF00        E     MOV     R7,Timer_B
001A EF                MOV     A,R7
001B 54EF              ANL     A,#0EFH
001D F500        E     MOV     Timer_B,A
                                           ; SOURCE LINE # 1921
001F 758B01            MOV     TL1,#01H
                                           ; SOURCE LINE # 1922
0022 758DFA            MOV     TH1,#0FAH
                                           ; SOURCE LINE # 1923
0025 C28F              CLR     TF1
                                           ; SOURCE LINE # 1924
0027 D28E              SETB    TR1
                                           ; SOURCE LINE # 1925
                                           ; SOURCE LINE # 1926
0029         ?C0186:
0029 D0D0              POP     PSW
002B D0E0              POP     ACC
002D 32                RETI    
             ; FUNCTION Isr_Tmr1 (END)

             ; FUNCTION Isr_UART (BEGIN)
                                           ; SOURCE LINE # 1932
                                           ; SOURCE LINE # 1935
0000 32                RETI    
             ; FUNCTION Isr_UART (END)

             ; FUNCTION Isr_Tmr2 (BEGIN)
                                           ; SOURCE LINE # 1942
                                           ; SOURCE LINE # 1945
0000 32                RETI    
             ; FUNCTION Isr_Tmr2 (END)

             ; FUNCTION DisableAllInterrupt (BEGIN)
                                           ; SOURCE LINE # 1950
                                           ; SOURCE LINE # 1951
0000         ?C0189:
                                           ; SOURCE LINE # 1952
0000 30AF08            JNB     EA,?C0190
                                           ; SOURCE LINE # 1953
                                           ; SOURCE LINE # 1954
0003 C2AF              CLR     EA
                                           ; SOURCE LINE # 1955
0005 00                NOP     
                                           ; SOURCE LINE # 1956
0006 00                NOP     
                                           ; SOURCE LINE # 1957
0007 00                NOP     
                                           ; SOURCE LINE # 1958
0008 00                NOP     
                                           ; SOURCE LINE # 1959
0009 80F5              SJMP    ?C0189
000B         ?C0190:
                                           ; SOURCE LINE # 1960
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 58  

000B C2AF              CLR     EA
                                           ; SOURCE LINE # 1961
000D 22                RET     
             ; FUNCTION DisableAllInterrupt (END)

             ; FUNCTION EnableAllInterrupt (BEGIN)
                                           ; SOURCE LINE # 1966
                                           ; SOURCE LINE # 1967
                                           ; SOURCE LINE # 1968
0000 D2AF              SETB    EA
                                           ; SOURCE LINE # 1969
0002 22                RET     
             ; FUNCTION EnableAllInterrupt (END)

             ; FUNCTION EnableKBCIBFInt (BEGIN)
                                           ; SOURCE LINE # 1974
                                           ; SOURCE LINE # 1975
                                           ; SOURCE LINE # 1976
0000 900000      E     MOV     DPTR,#IER3
0003 E0                MOVX    A,@DPTR
0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1977
0007 22                RET     
             ; FUNCTION EnableKBCIBFInt (END)

             ; FUNCTION EnablePMCIBFInt (BEGIN)
                                           ; SOURCE LINE # 1982
                                           ; SOURCE LINE # 1983
                                           ; SOURCE LINE # 1984
0000 900000      E     MOV     DPTR,#IER3
0003 E0                MOVX    A,@DPTR
0004 4402              ORL     A,#02H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1985
0007 22                RET     
             ; FUNCTION EnablePMCIBFInt (END)

             ; FUNCTION InitEnableInterrupt (BEGIN)
                                           ; SOURCE LINE # 1990
                                           ; SOURCE LINE # 1991
                                           ; SOURCE LINE # 1992
0000 900000      E     MOV     DPTR,#ISR0
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1993
0006 900000      E     MOV     DPTR,#ISR1
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1994
000A 900000      E     MOV     DPTR,#ISR2
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1995
000E 900000      E     MOV     DPTR,#ISR3
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1996
0012 900000      E     MOV     DPTR,#ISR4
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1997
0016 900000      E     MOV     DPTR,#ISR5
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1998
001A 900000      E     MOV     DPTR,#ISR6
C51 COMPILER V8.12   CORE_IRQ                                                              07/28/2018 12:03:31 PAGE 59  

001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1999
001E 900000      E     MOV     DPTR,#ISR7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2000
0022 900000      E     MOV     DPTR,#ISR8
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2001
0026 900000      E     MOV     DPTR,#ISR9
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2003
002A D2AA              SETB    EX1
                                           ; SOURCE LINE # 2004
002C 020000      R     LJMP    EnableAllInterrupt
             ; FUNCTION InitEnableInterrupt (END)

             ; FUNCTION EnableModuleInterrupt (BEGIN)
                                           ; SOURCE LINE # 2010
                                           ; SOURCE LINE # 2011
                                           ; SOURCE LINE # 2012
0000 120000      R     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 2013
0003 120000      R     LCALL   EnableKBCIBFInt
                                           ; SOURCE LINE # 2014
0006 120000      R     LCALL   EnablePMCIBFInt
                                           ; SOURCE LINE # 2016
0009 020000      E     LJMP    Hook_EnableInterrupt
             ; FUNCTION EnableModuleInterrupt (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    966    ----
   CONSTANT SIZE    =    304    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
