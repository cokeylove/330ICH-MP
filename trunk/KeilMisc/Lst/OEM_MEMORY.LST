C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE OEM_MEMORY
OBJECT MODULE PLACED IN Code\Oem\OEM_MEMORY.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\Oem\OEM_MEMORY.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\
                    -INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1           /*-----------------------------------------------------------------------------
   2           * Filename:OEM_MEMORY.C     For Chipset: ITE.IT85XX
   3           *
   4           * Function: Memory Definition for extern all code base reference
   5           *
   6           * [Memory Map Description]
   7           *
   8           * Chip Internal Ram : 0x00-0xFF For Kernel and Chip Level use
   9           *
  10           ***************************************************
  11           * Chip 8500       : External ram 0x000-0x7FF
  12           * Chip Other 85XX : External ram 0x000-0xFFF
  13           ***************************************************
  14           *
  15           * [OEM Memory Rang]
  16           * [External Ram]
  17           * 0x100-0x1FF   OEM RAM
  18           * 0x200-0x2FF   OEM RAM SPI buffer array
  19           * 0x300-0x3FF   OEM RAM EC Space
  20           * 0x400-0x4FF   OEM RAM
  21           * 0x500-0x5FF   OEM RAM
  22           * 0x600-0x6FF   OEM RAM
  23          
  24           * 0x800-0x8FF   OEM RAM keyboard matrix
  25           * 0x900-0x9FF   OEM RAM
  26           * 0xA00-0xAFF   OEM RAM
  27           * 0xB00-0xBFF   OEM RAM
  28           * 0xC00-0xCFF   OEM RAM
  29           * 0xD00-0xDFF   OEM RAM
  30           * 0xE00-0xEFF   OEM RAM
  31           * 0xF00-0xFFF   OEM RAM For HSPI ram code function
  32           *
  33           * Copyright (c) 2006-2009, ITE Tech. Inc. All Rights Reserved.
  34           *---------------------------------------------------------------------------*/
  35          
  36          #include <CORE_INCLUDE.H>
  37          #include <OEM_INCLUDE.H>
  38          
  39          //*******************************************************************************
  40          //-------------------------------------------------------------------------------
  41          //      0x100-0x1FF   OEM RAM 1
  42          //-------------------------------------------------------------------------------
  43          //*******************************************************************************
  44          XBYTE   SysPowState                                                     _at_(OEMRAM1+0x00); //(byte)
  45          XBYTE   PWSeqStep                                                       _at_(OEMRAM1+0x01); //(byte)
  46          XBYTE   DeepSleepCunt                                           _at_(OEMRAM1+0x02); //(byte)
  47          XWORD   DelayDoPowerSeq                                         _at_(OEMRAM1+0x03); //(word)
  48          XWORD   PowSeqDelay                                                     _at_(OEMRAM1+0x05); //(word)
  49          
  50          XBYTE   SBSWReleaseCunt                     _at_(OEMRAM1+0x07); //(byte)  
  51          
  52          XBYTE   Test109                                                         _at_(OEMRAM1+0x09); //(byte)
  53          XBYTE   UART_DB_RAM                             _at_(OEMRAM1+0x0B);  
  54          XBYTE   KB_OBF_count                                            _at_(OEMRAM1+0x0C);
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 2   

  55          XBYTE   UpdateLEDBL_delay                                       _at_(OEMRAM1+0x0D);
  56          XBYTE   uVGATurboFun                                            _at_(OEMRAM1+0x0E);     //
  57          
  58          XBYTE   CmdData2                                                        _at_(ECRAM1+0x0F);
  59          XBYTE   BatSMbusFailCount                                       _at_(ECRAM1+0x10);
  60          XBYTE   Batpollstep1                                            _at_(ECRAM1+0x11);
  61          XBYTE   EC_oCCBQl                                                       _at_(ECRAM1+0x12);
  62          XBYTE   EC_oCCBQh                                                       _at_(ECRAM1+0x13);
  63          XBYTE   EC_oCBTl                                                        _at_(ECRAM1+0x14);
  64          XBYTE   EC_oCBTh                                                        _at_(ECRAM1+0x15);
  65          XBYTE   BAT1PERCL                                                       _at_(ECRAM1+0x16);
  66          XBYTE   BAT1PERCH                                                       _at_(ECRAM1+0x17);
  67          
  68          XBYTE   uVPCeventSource                                         _at_(ECRAM1+0x18);
  69          XBYTE   uVPCeventSource2                                        _at_(ECRAM1+0x19);
  70          XBYTE   uNovoVPCCount                                           _at_(ECRAM1+0x1A);
  71          XBYTE   DebugCombineKey                                         _at_(ECRAM1+0x1B);
  72          XBYTE   PowerLed_Count                                          _at_(ECRAM1+0x1C);
  73          XBYTE   LED_KB_PWM_Step                                         _at_(ECRAM1+0x1D);
  74          XBITS_8 uReserve07                                                      _at_(ECRAM1+0x1E);
  75          XBYTE   CombineKeyStatus                                        _at_(ECRAM1+0x1F);
  76          
  77          XBYTE   CHGIC_SMbusFailCnt                                      _at_(ECRAM1+0x20);
  78          XBYTE   CHGIC_ptr                                                       _at_(ECRAM1+0x21);
  79          XBYTE   CHGIC_InputCurrentL                                     _at_(ECRAM1+0x22);
  80          XBYTE   CHGIC_InputCurrentH                                     _at_(ECRAM1+0x23);
  81          XBYTE   CHGIC_ReadCmd0x14L                                      _at_(ECRAM1+0x24);
  82          XBYTE   CHGIC_ReadCmd0x14H                                      _at_(ECRAM1+0x25);
  83          XBYTE   CHGIC_ReadCmd0x15L                                      _at_(ECRAM1+0x26);
  84          XBYTE   CHGIC_ReadCmd0x15H                                      _at_(ECRAM1+0x27);
  85          XBYTE   CHGIC_ReadCmd0x3FL                                      _at_(ECRAM1+0x28);
  86          XBYTE   CHGIC_ReadCmd0x3FH                                      _at_(ECRAM1+0x29);
  87          XWORD   BATTEMP                                                         _at_(ECRAM1+0x2A);
  88          XBYTE   EC_C_modeL                                                      _at_(ECRAM1+0x2C);
  89          XBYTE   EC_C_modeH                                                      _at_(ECRAM1+0x2D);
  90          //XBYTE ManualFanPRM                                            _at_(ECRAM1+0x2E);//JERRYCH00:Modify the fan control from linear to the ladder.
  91          XBYTE   AdapterID                                                       _at_(ECRAM1+0x2F);
  92          
  93          XBYTE   eFlashVarifyOK                                          _at_(ECRAM1+0x30);
  94          XBYTE   eFlash_r_data                                           _at_(ECRAM1+0x31);
  95          XBYTE   eFlashA1                                                        _at_(ECRAM1+0x32);
  96          XBYTE   eFlashA0                                                        _at_(ECRAM1+0x33);
  97          XBYTE   eEEPROMBank                                                     _at_(ECRAM1+0x34);
  98          XBYTE   eEEPROMAddrsss                                          _at_(ECRAM1+0x35);
  99          XBYTE   eEEPROMData                                                     _at_(ECRAM1+0x36);
 100          XBYTE   eEEPROMMarkData                                         _at_(ECRAM1+0x37);
 101          XBYTE   e256ByteCnt                                                     _at_(ECRAM1+0x38);
 102          XBYTE   eUpdateEEPROMCnt                                        _at_(ECRAM1+0x39);
 103          XBYTE   eUpdatepDevStusCnt                                      _at_(ECRAM1+0x3A);
 104          XBYTE   BatLowCnt                                                       _at_(ECRAM1+0x3B);
 105          XBYTE   WSMbusTemp01                                            _at_(ECRAM1+0x3C);
 106          XBYTE   WSMbusTemp02                                            _at_(ECRAM1+0x3D);
 107          XBYTE   SMbusFailCnt2                                           _at_(ECRAM1+0x3E);
 108          XBYTE   SMbusFailCnt3                                           _at_(ECRAM1+0x3F);
 109          
 110          XBYTE   CombineKeyRN                                            _at_(ECRAM1+0x40);
 111          XBYTE   EscScanCodeDelay                                        _at_(ECRAM1+0x41);
 112          XWORD   Psys                                                            _at_(ECRAM1+0x42); //ANGELAG019: add
 113          //XWORD         API_ID                                                          _at_(ECRAM1+0x43); 
 114          
 115          XBYTE   SMbusFailCnt4                           _at_(ECRAM1+0x44);//Start Shipmode disable 5s loop once 
 116          
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 3   

 117          XBYTE   Chk_Trickle_Current_status                      _at_(ECRAM1+0x45);
 118          XBYTE   Chk_Trickle_Current_count                       _at_(ECRAM1+0x46);
 119          XWORD   Chk_Trickle_Current_Now_Current         _at_(ECRAM1+0x47); //0x47~0x48
 120          XWORD   Chk_Trickle_Current_Chg_Current         _at_(ECRAM1+0x49); //0x49~0x4A
 121          XBYTE   Get_Batt_debounce_count                         _at_(ECRAM1+0x4B);
 122          XBYTE   Get_Batt_debounce_hash1                         _at_(ECRAM1+0x4C);
 123          XBYTE   Get_Batt_debounce_hash2                         _at_(ECRAM1+0x4D);
 124          XBYTE   CombineKeyIO                                            _at_(ECRAM1+0x4E);
 125          XBYTE   GPIO_STATUS                                                     _at_(ECRAM1+0x4F);
 126          
 127          XBYTE   Bat0x0BTempL                                            _at_(ECRAM1+0x50);
 128          XBYTE   Bat0x0BTempH                                            _at_(ECRAM1+0x51);
 129          XBYTE   Bat0x0BFakeCnt                                          _at_(ECRAM1+0x52);
 130          XBYTE   Bat0x08OTPCnt                                           _at_(ECRAM1+0x53);
 131          XBYTE   S3ResumeRSOC                                            _at_(ECRAM1+0x54);
 132          XBYTE   BatteryAlarm                                            _at_(ECRAM1+0x55);
 133          XBYTE   CHGIC_ReadCmd0x12L                                      _at_(ECRAM1+0x56);
 134          XBYTE   CHGIC_ReadCmd0x12H                                      _at_(ECRAM1+0x57);
 135          XBYTE   Bat0x3ETempL                                            _at_(ECRAM1+0x58);
 136          XBYTE   Bat0x3ETempH                                            _at_(ECRAM1+0x59);
 137          XBYTE   EC_BatteryStatusL                                       _at_(ECRAM1+0x5A);
 138          XBYTE   EC_BatteryStatusH                                       _at_(ECRAM1+0x5B);
 139          XBYTE   BattTemp                                                        _at_(ECRAM1+0x5C);
 140          XBYTE   BatteryOTPRelease                                       _at_(ECRAM1+0x5D);
 141          XBYTE   BatteryOTP                                                      _at_(ECRAM1+0x5E);
 142          XBYTE   BatteryOTPShutdown                                      _at_(ECRAM1+0x5F);
 143          
 144          XBYTE   FAN_Tab_OFF                                                     _at_(ECRAM1+0x60);
 145          XBYTE   FAN_Tab_LOW                                                     _at_(ECRAM1+0x61);
 146          XBYTE   FAN_Tab_Step1                                           _at_(ECRAM1+0x62);
 147          XBYTE   FAN_Tab_Step2                                           _at_(ECRAM1+0x63);
 148          XBYTE   FAN_Tab_HI                                                      _at_(ECRAM1+0x64);
 149          XBYTE   THR_PRO_OFF                                                     _at_(ECRAM1+0x65);
 150          XBYTE   THR_PRO_ON                                                      _at_(ECRAM1+0x66);
 151          XBYTE   THR_Turo_Rem                                            _at_(ECRAM1+0x67);
 152          XBYTE   THR_Turo_OFF                                            _at_(ECRAM1+0x68);
 153          XBYTE   THR_Tab_Shut                                            _at_(ECRAM1+0x69);
 154          XBYTE   KB_S3Dly                                                        _at_(ECRAM1+0x6A);
 155          XBYTE   SLI_FAN_Tab_OFF                                         _at_(ECRAM1+0x6B);
 156          XBYTE   SLI_FAN_Tab_LOW                                         _at_(ECRAM1+0x6C);
 157          XBYTE   SLI_FAN_Tab_Step1                                       _at_(ECRAM1+0x6D);
 158          XBYTE   SLI_FAN_Tab_Step2                                       _at_(ECRAM1+0x6E);
 159          XBYTE   SLI_FAN_Tab_HI                                          _at_(ECRAM1+0x6F);
 160          
 161          XBYTE   VFAN_Tab_OFF                                            _at_(ECRAM1+0x70);
 162          XBYTE   VFAN_Tab_LOW                                            _at_(ECRAM1+0x71);
 163          XBYTE   VFAN_Tab_Step1                                          _at_(ECRAM1+0x72);
 164          XBYTE   VFAN_Tab_Step2                                          _at_(ECRAM1+0x73);
 165          XBYTE   VFAN_Tab_HI                                                     _at_(ECRAM1+0x74);
 166          XBYTE   VTHR_PRO_OFF                                            _at_(ECRAM1+0x75);
 167          XBYTE   VTHR_PRO_ON                                                     _at_(ECRAM1+0x76);
 168          XBYTE   VTHR_Turo_Rem                                           _at_(ECRAM1+0x77);
 169          XBYTE   VTHR_Turo_OFF                                           _at_(ECRAM1+0x78);
 170          XBYTE   VTHR_Tab_Shut                                           _at_(ECRAM1+0x79);
 171          
 172          
 173          XBYTE   SLI_THR_PRO_OFF                                         _at_(ECRAM1+0x7B);
 174          XBYTE   SLI_THR_PRO_ON                                          _at_(ECRAM1+0x7C);
 175          XBYTE   SLI_THR_Turo_Rem                                        _at_(ECRAM1+0x7D);
 176          XBYTE   SLI_THR_Turo_OFF                                        _at_(ECRAM1+0x7E);
 177          XBYTE   SLI_THR_Tab_Shut                                        _at_(ECRAM1+0x7F);
 178          
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 4   

 179          XBYTE   inhibit2sec                                             _at_(ECRAM1+0x80);
 180          XBYTE   Battdata_ready                                          _at_(ECRAM1+0x81);
 181          XWORD   TrickleChgTimeOutCnt                            _at_(ECRAM1+0x82);//0x82,0x83
 182          XWORD   FastChgTimeOutCnt                                       _at_(ECRAM1+0x84);//0x84,0x85
 183          XBYTE   RSMshutdownCnt                                          _at_(ECRAM1+0x86);
 184          XBYTE   ChkBattery_abnormal_status                      _at_(ECRAM1+0x87);
 185          XBYTE   ChkBattery_abnormal_count                       _at_(ECRAM1+0x88);
 186          XBYTE   LOWBATT_3TIMES                                          _at_(ECRAM1+0x89);
 187          XBYTE   Bat0x00TempL                                            _at_(ECRAM1+0x8C);
 188          XBYTE   Bat0x00TempH                                            _at_(ECRAM1+0x8D);
 189          XBYTE   Bat0x0FTempL                                            _at_(ECRAM1+0x8E);
 190          XBYTE   Bat0x0FTempH                                            _at_(ECRAM1+0x8F);
 191          
 192          //Mos: Keep ACIN_Count to judge does that ACIN status change
 193          XBYTE   Chk_Wrong_ADP_Status                            _at_(ECRAM1+0x90);
 194          XBYTE   ACIN_FallINT_Count                                      _at_(ECRAM1+0x91);
 195          XWORD   Chk_Wrong_10ms_Count                            _at_(ECRAM1+0x92);
 196          XBYTE   Chk_ACOP_Status                                         _at_(ECRAM1+0x94);
 197          XWORD   Chk_ACOP_Bat_Chg_Current                        _at_(ECRAM1+0x95);
 198          XWORD   Chk_ACOP_10ms_Count                                     _at_(ECRAM1+0x97);
 199          
 200          XBYTE   Chk_Hybrid_STPP_Status                                          _at_(ECRAM1+0x99);
 201          XBYTE   Chk_Hybrid_STPP_min_BattGasgauge                        _at_(ECRAM1+0x9A);
 202          XWORD   Chk_Hybrid_STPP_Batt_Output_Power                       _at_(ECRAM1+0x9B);
 203          XWORD   Chk_Hybrid_STPP_Batt_Output_Power_Limit         _at_(ECRAM1+0x9D);
 204          XBYTE   BackLight_En_Delay                                                      _at_(ECRAM1+0x9F);
 205          
 206          XBYTE   UCS1002ID                                                                       _at_(ECRAM1+0xA0);
 207          
 208          XWORD   Chk_Hybrid_STPP_Turboboost_Battery_Current_limit        _at_(ECRAM1+0xA2);
 209          //ANGELAS016:s+ Change charge IC option setting.
 210          XBYTE   CHGIC_ReadCmd0x37L                                              _at_(ECRAM1+0xA4);
 211          XBYTE   CHGIC_ReadCmd0x37H                                              _at_(ECRAM1+0xA5);
 212          //ANGELAS016:+e Change charge IC option setting.
 213          XWORD   ADPI_Data[4]                                                    _at_(ECRAM1+0xA8);//0xA8~0xAF
 214          //ANGELAS016:s+ Change charge IC option setting.
 215          XBYTE   chargerInitIndex                                                _at_(ECRAM1+0xB0);
 216          XBYTE   CHGIC_ReadCmd0x3BL                                              _at_(ECRAM1+0xB1);
 217          XBYTE   CHGIC_ReadCmd0x3BH                                              _at_(ECRAM1+0xB2);      
 218          XBYTE   CHGIC_ReadCmd0x3CL                                              _at_(ECRAM1+0xB3);
 219          XBYTE   CHGIC_ReadCmd0x3CH                                              _at_(ECRAM1+0xB4);
 220          XBYTE   CHGIC_ReadCmd0x3DL                                              _at_(ECRAM1+0xB5);
 221          XBYTE   CHGIC_ReadCmd0x3DH                                              _at_(ECRAM1+0xB6);
 222          XBYTE   CHGIC_ReadCmd0x39L                                              _at_(ECRAM1+0xB7);
 223          XBYTE   CHGIC_ReadCmd0x39H                                              _at_(ECRAM1+0xB8);
 224          XBYTE   CHGIC_WriteCmd0x38L                                             _at_(ECRAM1+0xB9);
 225          XBYTE   CHGIC_WriteCmd0x38H                                             _at_(ECRAM1+0xBA);
 226          XBYTE   CHGIC_WriteCmd0x37L                                             _at_(ECRAM1+0xBB);
 227          XBYTE   CHGIC_WriteCmd0x37H                                             _at_(ECRAM1+0xBC);
 228          XBYTE   CHGIC_WriteCmd0x12L                                             _at_(ECRAM1+0xBD);
 229          XBYTE   CHGIC_WriteCmd0x12H                                             _at_(ECRAM1+0xBE);
 230          XBYTE   CHGIC_ReadCmd0x3DH_Temp                 _at_(ECRAM1+0xBF); //COKEYXU049:add
 231          //ANGELAS016:+e Change charge IC option setting.
 232          XWORD   XWTemp1                                                         _at_(ECRAM1+0xC0);
 233          XWORD   OCPCapacityRelease                                      _at_(ECRAM1+0xC2);
 234          XWORD   OCPCapacity                                                     _at_(ECRAM1+0xC4);
 235          XBYTE   ECBIOSVersionH                                          _at_(ECRAM1+0xC6);
 236          XBYTE   ECBIOSVersionL                                          _at_(ECRAM1+0xC7);
 237          XBYTE   ECBIOSUbSVersion                                        _at_(ECRAM1+0xC8);
 238          
 239          XBYTE   ADPIDON10MS_NUM                                         _at_(ECRAM1+0xC9); 
 240          XBYTE   TEST_FLAG                                               _at_(ECRAM1+0xCA);
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 5   

 241          XBYTE   AdapterIDOn_Flag                    _at_(ECRAM1+0xCB);  //MEILING001:add.
 242          XBYTE   ResetTestFlag                           _at_(ECRAM1+0xCC);       //MEILING009:add.
 243          XBYTE   CPUProchotONCnt                         _at_(ECRAM1+0xCD);  //MEILING033:add. //MEILING055:modify ProchotO
             -NCnt name.
 244          XBYTE   GPUProchotDelay                         _at_(ECRAM1+0xCE);  //MEILING042:add.
 245          
 246          
 247          XBYTE   ADPI2Sec                                                        _at_(ECRAM1+0xCF);
 248          
 249          XWORD   TurboBoostCP                                            _at_(ECRAM1+0xD0);
 250          XWORD   TurboBoostEn                                            _at_(ECRAM1+0xD2);
 251          XWORD   TurboBoostthrottlEn                                     _at_(ECRAM1+0xD4);
 252          XWORD   TurboBoostthrottlDis                            _at_(ECRAM1+0xD6);
 253          XWORD   TurboBoostDis                                           _at_(ECRAM1+0xD8);
 254          XWORD   ACModeSTPPEn                                            _at_(ECRAM1+0xDA);
 255          XWORD   ACModeSTPPDis                                           _at_(ECRAM1+0xDC);
 256          XWORD   ADPI_AvgData                                            _at_(ECRAM1+0xDE);
 257          
 258          XBYTE   POWER_FLAG1                                             _at_(OEMRAM1+0xE0);     // EC power flag 1
 259          XBYTE   BT1_STATUS1                                     _at_(OEMRAM1+0xE1); // Battery 1 status1 flag
 260          XBYTE   EVT_STATUS1                                     _at_(OEMRAM1+0xE2); // Event status flag 1
 261          
 262          XWORD   PSW_COUNTER                                     _at_(OEMRAM1+0xE3); // (word)
 263          
 264          //XBYTE DSxPowState                                                     _at_(OEMRAM1+0xE5); // (byte)
 265          XBYTE   DS3PowSeqStep                                   _at_(OEMRAM1+0xE6);
 266          XWORD   DS3PowSeqDelay                                          _at_(OEMRAM1+0xE7); // (word)
 267          XBYTE   DRAMRST_CNTRL_CNT                                       _at_(ECRAM1+0xE9);
 268          //XWORD SUSACK_LOW_CNT                          _at_(ECRAM1+0xEA);
 269          //XBYTE   SUSACK_HI_CNT                                 _at_(ECRAM1+0xEC);
 270          XBYTE   DRAMRST_CNTRL_LOW_CNT                           _at_(ECRAM1+0xED);
 271          //XBYTE   S3S4DelayCnt                                          _at_(ECRAM1+0xEE); //ANGELAS012:Remove S3 delay.
 272          XBYTE   S3S4DelayCnt                                            _at_(ECRAM1+0xEE); //ANGELAS063:add
 273          XBYTE   CPUThrottlingDelayTime              _at_(ECRAM1+0xEF); //MEILING052:add.
 274          
 275          //===============================================================================
 276          // OEMRAM1 Offset 0xF0 ~ 0xFF   Event debounce counter
 277          XBYTE   DEBOUNCE_CONT1                                          _at_(DebounceRAM+0x00); //(byte)
 278          XBYTE   DEBOUNCE_CONT2                                          _at_(DebounceRAM+0x01); //(byte)
 279          XBYTE   DEBOUNCE_CONT3                                          _at_(DebounceRAM+0x02); //(byte)
 280          XBYTE   DEBOUNCE_CONT4                                          _at_(DebounceRAM+0x03); //(byte)
 281          XBYTE   DEBOUNCE_CONT5                                          _at_(DebounceRAM+0x04); //(byte)
 282          XBYTE   DEBOUNCE_CONT6                                          _at_(DebounceRAM+0x05); //(byte)
 283          XBYTE   DEBOUNCE_CONT7                                          _at_(DebounceRAM+0x06); //(byte)
 284          XBYTE   DEBOUNCE_CONT8                                          _at_(DebounceRAM+0x07); //(byte)
 285          XBYTE   DEBOUNCE_CONT9                                          _at_(DebounceRAM+0x08); //(byte)
 286          XBYTE   DEBOUNCE_CONT10                                         _at_(DebounceRAM+0x09); //(byte)
 287          XBYTE   DEBOUNCE_CONT11                                         _at_(DebounceRAM+0x0A); //(byte)
 288          XBYTE   DEBOUNCE_CONT12                                         _at_(DebounceRAM+0x0B); //(byte)
 289          XBYTE   DEBOUNCE_CONT13                                         _at_(DebounceRAM+0x0C); //(byte)
 290          XBYTE   DEBOUNCE_CONT14                                         _at_(DebounceRAM+0x0D); //(byte)
 291          XBYTE   DEBOUNCE_CONT15                                         _at_(DebounceRAM+0x0E); //(byte)
 292          XBYTE   DEBOUNCE_CONT16                                         _at_(DebounceRAM+0x0F); //(byte)
 293          
 294          //*******************************************************************************
 295          //-------------------------------------------------------------------------------
 296          //      0x200-0x2FF   OEM RAM 2
 297          //-------------------------------------------------------------------------------
 298          //*******************************************************************************
 299          
 300          XBYTE   pProject0                                               _at_(OEMRAM2+0x02);
 301          XBYTE   pDevStus                                                _at_(OEMRAM2+0x03);
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 6   

 302          //ANGELAS107:S-Add code for GBSI function.
 303          //ANGELAS033:Add start
 304          //XBYTE batteryFirstUsedDateL                   _at_(OEMRAM2+0x04);
 305          //XBYTE batteryFirstUsedDateH           _at_(OEMRAM2+0x05);
 306          //ANGELAS033:Add end
 307          //ANGELAS107:E-Add code for GBSI function.
 308          XBYTE  batteryChemistry[4]              _at_(OEMRAM2+0x06);//ANGELAS107:Add code for GBSI function.
 309          XBYTE   pOneKeyAPPStatus                                _at_(OEMRAM2+0x0B);     // Lenovo_VGATurbo
 310          XBYTE   pPROCHOT                                                _at_(OEMRAM2+0x0C);
 311          XBYTE   pProject4                                          _at_(OEMRAM2+0x0D);//Y7JERRY085:Add CMD for press power button 4s don't shutdown wh
             -en flash bios.
 312          
 313          XBYTE   SMartNoise                                              _at_(OEMRAM2+0x11);
 314           XBYTE  uPGID                           _at_(OEMRAM2+0x14);
 315          
 316          XBYTE   uMBID                                                   _at_(OEMRAM2+0x15);
 317          XBYTE   MBID_READY                                              _at_(OEMRAM2+0x16); 
 318          XBYTE   uMBGPU                                                  _at_(OEMRAM2+0x17);
 319          XBYTE   uMBpw                                                   _at_(OEMRAM2+0x18);
 320          XBYTE   uPJID                           _at_(OEMRAM2+0x19);
 321          
 322          XBYTE   BAT1_MD_1                                   _at_(OEMRAM2+0x20);
 323          XBYTE   BAT1_MD_2                                   _at_(OEMRAM2+0x21);
 324          XBYTE   BAT1_MD_3                                   _at_(OEMRAM2+0x22);
 325          XBYTE   BAT1_MD_4                                   _at_(OEMRAM2+0x23);
 326          XBYTE   BAT1_MD_5                                   _at_(OEMRAM2+0x24);
 327          XBYTE   BAT1_MD_6                                   _at_(OEMRAM2+0x25);
 328          XBYTE   BAT1_MD_7                                   _at_(OEMRAM2+0x26);
 329          XBYTE   BAT1_MD_8                                   _at_(OEMRAM2+0x27);
 330          XBYTE   BAT1_MD_9                                   _at_(OEMRAM2+0x28);
 331          XBYTE   BAT1_MD_A                                   _at_(OEMRAM2+0x29);
 332          XBYTE   BAT1_MD_B                                   _at_(OEMRAM2+0x2A);
 333          XBYTE   BAT1_MD_C                                   _at_(OEMRAM2+0x2B);
 334          XBYTE   BAT1_MD_D                                   _at_(OEMRAM2+0x2C);
 335          XBYTE   BAT1_MD_E                                   _at_(OEMRAM2+0x2D);
 336          
 337          XBYTE   BAT1_Bar_Code[32]               _at_(OEMRAM2+0x2E); //2E~4D//MEILING031:add.
 338          
 339          
 340          XBYTE   StartFanClean                                   _at_(OEMRAM2+0x61);
 341          XBYTE   FanCleanFull                                    _at_(OEMRAM2+0x62);
 342          XBYTE   FanCleanHalt                                    _at_(OEMRAM2+0x63);
 343          
 344          XBYTE   pModuleID                                               _at_(OEMRAM2+0x66);
 345          XBYTE   pLastSID                                                _at_(OEMRAM2+0x67);
 346          XBYTE   pLastSID2                                               _at_(OEMRAM2+0x68);
 347          XBYTE   pLastSID3                                               _at_(OEMRAM2+0x69);
 348          XBYTE   pLastSID4                                               _at_(OEMRAM2+0x6A);
 349          
 350          XBYTE   cPacketPowerLimit1                              _at_(OEMRAM2+0x82);
 351          XWORD   KeepBattRemineCap                               _at_(OEMRAM2+0x83);
 352          XBYTE   ChkBattery_FCCchg_count                 _at_(OEMRAM2+0x85);
 353          XBYTE   ChkBattery_FCCchg_lastFCCL              _at_(OEMRAM2+0x86);
 354          XBYTE   ChkBattery_FCCchg_lastFCCH              _at_(OEMRAM2+0x87);
 355          XBYTE   CountSecAfterPswPressed                 _at_(OEMRAM2+0x88);
 356          XBYTE   CountSecAfterNOVOPressed                _at_(OEMRAM2+0x89);
 357          
 358          XBYTE   pVCompareFlag                                   _at_(OEMRAM2+0x8A);
 359          XWORD   NTC_V2                                                  _at_(OEMRAM2+0x8B);
 360          
 361          
 362          XBYTE   P80CMOS[7]                      _at_(OEMRAM2+0x90);//from 0x90-0x9E
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 7   

 363          XBYTE   P80Index                        _at_(OEMRAM2+0x97);
 364          XBYTE   P80CMOSSts                      _at_(OEMRAM2+0xA0);
 365          
 366          //XWORD Read_VR_CPU_PWROK               _at_(OEMRAM2+0xb0);
 367          XWORD   API_ID                          _at_(OEMRAM2+0xb0);
 368          
 369          XBYTE   CombineKeyShip                  _at_(OEMRAM2+0xb3); //ANGELAS032: add
 370          XBYTE   CombineKeyShip1                 _at_(OEMRAM2+0xb4); //ANGELAS056: add
 371          LWORD   CalcBatRCC                      _at_(OEMRAM2+0xb5); //ANGELAS101:Modify battery discharge when batte
             -ry RSOC is 59% in storage mode.
 372          
 373           //MEILING002: add start
 374          XBYTE   PMIC_counter                            _at_(OEMRAM2+0xC5);
 375          XBYTE   OTP_TEMP                                        _at_(OEMRAM2+0xC6);
 376          XBYTE   PowerInitOK                                     _at_(OEMRAM2+0xC7);
 377          XBYTE   PowerInitErrorCMD                       _at_(OEMRAM2+0xC8);
 378          XBYTE   PowerInitErrorDATA                      _at_(OEMRAM2+0xC9);
 379          XBYTE   PowerInitError                          _at_(OEMRAM2+0xCA);
 380          XBYTE   PowerInitIndex                          _at_(OEMRAM2+0xCB);
 381          XBYTE   PowerReturnData                                 _at_(OEMRAM2+0xCC);
 382          
 383          XBYTE   PowerVENDODID                                   _at_(OEMRAM2+0xCD);
 384          XBYTE   PowerREVID                                              _at_(OEMRAM2+0xCE);
 385          XBYTE   PowerSDWN                                               _at_(OEMRAM2+0xCF);
 386          XBYTE   PowerEN_RW                                              _at_(OEMRAM2+0xD0);
 387          XBYTE   PowerEN_MASK                                    _at_(OEMRAM2+0xD1);
 388          XBYTE   PowerEN_DEGL_SEL1                               _at_(OEMRAM2+0xD2);
 389          XBYTE   PowerEN_DEGL_SEL2                               _at_(OEMRAM2+0xD3);
 390          XBYTE   PowerPG_STATE                                   _at_(OEMRAM2+0xD4);
 391          XBYTE   PowerOVP_REG                                    _at_(OEMRAM2+0xD5);
 392          XBYTE   PowerUVP_REG                                    _at_(OEMRAM2+0xD6);
 393          XBYTE   PowerOCP_REG                                    _at_(OEMRAM2+0xD7);
 394          XBYTE   PowerOTP_REG                                    _at_(OEMRAM2+0xD8);
 395          XBYTE   PowerBUCK1CTRL                                  _at_(OEMRAM2+0xD9);
 396          XBYTE   PowerBUCK2CTRL                                  _at_(OEMRAM2+0xDA);
 397          XBYTE   PowerBUCK3CTRL                                  _at_(OEMRAM2+0xDB);
 398          XBYTE   PowerLDO1CTRL                                   _at_(OEMRAM2+0xDC);
 399          XBYTE   PowerLDO2CTRL                                   _at_(OEMRAM2+0xDD);
 400          XBYTE   PowerDISCHCTRL1                                 _at_(OEMRAM2+0xDE);
 401          XBYTE   PowerDISCHCTRL2                                 _at_(OEMRAM2+0xDF);
 402          XBYTE   PowerOC_CTRL                                    _at_(OEMRAM2+0xE0);
 403          XBYTE   PowerBUCK_FSW                                   _at_(OEMRAM2+0xE1);
 404          //MEILING002: add end
 405          
 406          XBYTE   CellCount                                               _at_(OEMRAM2+0xE5); //MEILING017: add
 407          
 408          XBYTE   BAT_LED_Cnt_ON                          _at_(OEMRAM2+0xE6);  //MEILING030:add.
 409          XBYTE   BAT_LED_Cnt_OFF                         _at_(OEMRAM2+0xE7);  //MEILING030:add.
 410          XBYTE   BAT_LOW_LED_Cnt                         _at_(OEMRAM2+0xE8);  //MEILING030:add.
 411          //ANGELAG056: add start
 412          XWORD   Psys_SUM_500ms                                  _at_(ECRAM2+0xE9); //E9-EA
 413          XBYTE   Psys_SUM_500ms_Cnt                      _at_(OEMRAM2+0xEB);  
 414          XBYTE   System_Status                                   _at_(OEMRAM2+0xEC);
 415          //ANGELAG056: add end
 416          
 417          XBYTE   LENOVOBATT2                             _at_(OEMRAM2+0xF0);  //ANGELAG017: add
 418          //ANGELAG046: add start
 419          XWORD   Psys_Data[4]                                    _at_(ECRAM2+0xF1); //0xf1~0xf8
 420          XWORD   Psys_AvgData                                    _at_(ECRAM2+0xFB); //fb-fc
 421          XBYTE   Psys_Counter                            _at_(OEMRAM2+0xFD);  
 422          //ANGELAG046: add end
 423          XBYTE   Fan_full_status                         _at_(OEMRAM2+0xFE);  //ANGELAG054: add
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 8   

 424          
 425          
 426          //*******************************************************************************
 427          //-------------------------------------------------------------------------------
 428          //      0x300-0x3FF   OEM RAM 3
 429          //-------------------------------------------------------------------------------
 430          //*******************************************************************************
 431          XBYTE   SYS_MISC1                                                       _at_(OEMRAM3+0x00);
 432          XBYTE   PWM_LEDBeep_CNT                                         _at_(OEMRAM3+0x01);
 433          XBYTE   AutoTimer                                                       _at_(OEMRAM3+0x02);
 434          
 435          XBYTE   QEVENT_DEBUG                                        _at_(OEMRAM3+0x05); 
 436          
 437          XBYTE   SCI_Event_In_Index                                      _at_(OEMRAM3+0x06);
 438          XBYTE   SCI_Event_Out_Index                                     _at_(OEMRAM3+0x07);
 439          XBYTE   SCI_Event_Buffer[EVENT_BUFFER_SIZE]     _at_(OEMRAM3+0x08);
 440          XWORD   ADP_I                                                           _at_(OEMRAM3+0x10);
 441          XWORD   NTC_V1                                                          _at_(OEMRAM3+0x12);
 442          XWORD   NOVO_COUNTER                                            _at_ OEMRAM3+0x14;// Hang check//JERRYCH003:Enable SMI for hang debug.
 443          //XWORD         CPU_I                                                   _at_(OEMRAM3+0x14);
 444          //XWORD         SLI_I                                                   _at_(OEMRAM3+0x16);
 445          //XWORD         SD_PWR_EN                                               _at_(OEMRAM3+0x16);  //MEILING001:remove.
 446          XBYTE   LV_Authen_Step_CNT                                      _at_(OEMRAM3+0x18);
 447          /*-----------------------------------------------------------------
 448          ; {LV_Authen_Step_CNT}
 449          ; B7 - Authentication Success
 450          ; B6 - Authentication Fail
 451          ; B5~B4 - Authentication Step from 01 to 03, 00=>stop
 452          ; B3~B0 - counter for 10 times
 453          -----------------------------------------------------------------*/
 454          XBYTE Bat1_FPChgFlag                                            _at_(OEMRAM3+0x19);
 455          /*-----------------------------------------------------------
 456          ; {Bat1_FPChgFlag} Battery 1 Fast & Pre Charging Flag
 457          ; B7 - Reserved
 458          ; B6 - Reserved
 459          ; B5 - Fast-Charge Time-Out
 460          ; B4 - Reserved
 461          ; B3 - Reserved
 462          ; B2 - Reserved
 463          ; B1 - Pre-Charge Time-Out
 464          ; B0 - Charge SMBus Failed
 465          ------------------------------------------------------------*/
 466          XWORD Auto_mode_AVG                                                     _at_(OEMRAM3+0x1D);
 467          XBYTE Auto_mode_EnPtr                                           _at_(OEMRAM3+0x1F);
 468          /*-----------------------------------------------------------------
 469          ; {Auto_mode_EnPtr}
 470          ; B07 - reserved
 471          ; B06 - Over 7A
 472          ; B05 - ADC error
 473          ; B04~B00 - Counter
 474          -----------------------------------------------------------------*/
 475          XWORD Auto_mode[20]                                                     _at_(OEMRAM3+0x20);
 476          
 477          XBYTE PM1PendingTXCount                                         _at_(OEMRAM3+0x50);
 478          XBYTE PM1PendingRXCount                                         _at_(OEMRAM3+0x51);
 479          XBYTE PM1DataPending[6]                                         _at_(OEMRAM3+0x52);
 480          XBYTE PM2PendingTXCount                                         _at_(OEMRAM3+0x58);
 481          XBYTE PM2PendingRXCount                                         _at_(OEMRAM3+0x59);
 482          XBYTE PM2DataPending[6]                                         _at_(OEMRAM3+0x5A);
 483          
 484          XBYTE   uCritBattWakeThre                                       _at_(OEMRAM3+0x63);
 485          XBYTE   uIffsCnt                                                        _at_(OEMRAM3+0x64);
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 9   

 486          
 487          XBYTE   uISCT                                                           _at_(OEMRAM3+0x70);
 488          XBYTE   uISCT_2                                                         _at_(OEMRAM3+0x71);
 489          
 490          XBYTE   Reset_Delay                         _at_(OEMRAM3+0x72); 
 491          XBYTE   Reset_Delay_Count                       _at_(OEMRAM3+0x73); 
 492          
 493          XWORD   ShipModeACK                             _at_(OEMRAM3+0x75);//Start Shipmode disable 5s loop once 20130
             -608 20:28 
 494          XBYTE   ShipModeCnt                         _at_(OEMRAM3+0x77);//Start Shipmode disable 5s loop once 20130
             -608 20:28 
 495          
 496          XBYTE   ShipModeEn                          _at_(OEMRAM3+0x79);  
 497          XBYTE ChkBattery_FCCchg_count2                          _at_(OEMRAM3+0x8b); 
 498          XBYTE   PCH_ColdBoot_TimeOut                _at_(OEMRAM3+0x8C); //ANGELAG012:add.
 499          XBYTE   disable_turbo_counter                     _at_(OEMRAM3+0x8D); //ANGELAG050: add
 500          //*******************************************************************************
 501          //-------------------------------------------------------------------------------
 502          //      0x400-0x4FF   OEM RAM 4
 503          //-------------------------------------------------------------------------------
 504          //*******************************************************************************
 505          XBYTE   nVPC_CMD                                                        _at_(NameSpace+0x00);           // Customer EC name space
 506          XBYTE   nVPC_DATA                                                       _at_(NameSpace+0x01);           // Customer EC name space
 507          XBYTE   VPC_iStatus                                             _at_(NameSpace+0x02);           // Customer EC name space
 508          XBYTE   CRESERVED03                                                     _at_(NameSpace+0x03);           // Customer EC name space
 509          XBYTE   CRESERVED04                                             _at_(NameSpace+0x04);           // Customer EC name space
 510          XBYTE   CRESERVED05                                                     _at_(NameSpace+0x05);           // Customer EC name space
 511          XBYTE   nAtmFanSpeed                                            _at_(NameSpace+0x06);           // Fan speed. For Lenovo ATM
 512          XBYTE   LENOVOBATT                                                      _at_(NameSpace+0x07);           //
 513          XBYTE   nACBriTableLimit                                        _at_(NameSpace+0x08);           // AC Brightness table limit
 514          XBYTE   nDCBriTableLimit                                        _at_(NameSpace+0x09);           // DC brightness table limit
 515          XBYTE   LENOVOPMFW                                                      _at_(NameSpace+0x0A);           //
 516          XBYTE   SWITCHABLE                                                      _at_(NameSpace+0x0B);           //
 517          XBYTE   LENOVODEVICE                                            _at_(NameSpace+0x0C);           //
 518          XBYTE   nRamTemp                                                        _at_(NameSpace+0x0D);           // Ram temperature
 519          XBYTE   nVramTemp                                                       _at_(NameSpace+0x0E);           // V Ram temperature
 520          XBYTE   ATM_CMD                                                         _at_(NameSpace+0x0F);           // ATM Fan control command
 521          
 522          XBYTE   EM7FUNCTION                                                     _at_(NameSpace+0x10);   // 0x10
 523          XBYTE   BATTUPDATEFW                                            _at_(NameSpace+0x11);   // 0x11
 524          //      #define  PriBattInhib   (1<<0)  // bit0 1-Disable reading information from primary battery for update batt
             -ery firmware
 525          //      #define  SecBattInhib   (1<<1)  // bit1 1-Disable reading information from second battery for update batte
             -ry firmware.
 526          
 527          XBYTE    FirmwareUpdateStatusL                          _at_(NameSpace+0x12);   // 0x12
 528          XBYTE    FirmwareUpdateStatusH                          _at_(NameSpace+0x13);   // 0x13
 529          XBYTE    BatterymakerIDL                                        _at_(NameSpace+0x14);   // 0x14
 530          XBYTE    BatterymakerIDH                                        _at_(NameSpace+0x15);   // 0x15
 531          XBYTE    HardwareIDL                                            _at_(NameSpace+0x16);   // 0x16
 532          XBYTE    HardwareIDH                                            _at_(NameSpace+0x17);   // 0x17
 533          XBYTE    FirmwareversionL                                       _at_(NameSpace+0x18);   // 0x18
 534          XBYTE    FirmwareversionH                                       _at_(NameSpace+0x19);   // 0x19
 535          XBYTE    DataVersionL                                           _at_(NameSpace+0x1A);   // 0x1A
 536          XBYTE    DataVersionH                                           _at_(NameSpace+0x1B);   // 0x1B
 537          /*
 538          0x37 (Get Battery Information )         Read Block
 539          byte 0,1: The battery maker ID
 540          byte 2,3: Hardware ID
 541          byte 4,5: Firmware version (0 if the firmware is corrupted
 542          byte 6,7: Data version (0 if this is not supported or the firmware is corrupted.
 543          */
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 10  

 544          XBYTE    FBClamp                                                        _at_(NameSpace+0x1C);   // 0x1C
 545          XBYTE    CRESERVED1D                                            _at_(NameSpace+0x1D);   // 0x1D
 546          XBYTE    CRESERVED1E                                            _at_(NameSpace+0x1E);   // 0x1E
 547          XBYTE    CRESERVED1F                                            _at_(NameSpace+0x1F);   // 0x1F
 548          XBYTE    CRESERVED20                                            _at_(NameSpace+0x20);   // 0x20
 549          XBYTE    CRESERVED21                                            _at_(NameSpace+0x21);   // 0x21
 550          XBYTE    CRESERVED22                                            _at_(NameSpace+0x22);   // 0x22
 551          XBYTE    CRESERVED23                                            _at_(NameSpace+0x23);   // 0x23
 552          XBYTE    CRESERVED24                                            _at_(NameSpace+0x24);   // 0x24
 553          XBYTE    CRESERVED25                                            _at_(NameSpace+0x25);   // 0x25
 554          XBYTE    CRESERVED26                                            _at_(NameSpace+0x26);   // 0x26
 555          XBYTE    CRESERVED27                                            _at_(NameSpace+0x27);   // 0x27
 556          XBYTE    CRESERVED28                                            _at_(NameSpace+0x28);   // 0x28
 557          XBYTE    CRESERVED29                                            _at_(NameSpace+0x29);   // 0x29
 558          XBYTE    CRESERVED2A                                            _at_(NameSpace+0x2A);   // 0x2A
 559          XBYTE    CRESERVED2B                                            _at_(NameSpace+0x2B);   // 0x2B
 560          XBYTE    CRESERVED2C                                            _at_(NameSpace+0x2C);   // 0x2C
 561          
 562          XBYTE    PANEL_INFO[16]                                 _at_(NameSpace+0x30);   //ANGELAG008: modify 22 to 16 // 0x30~0x46
 563          XBYTE    pDevStatus1                                _at_(NameSpace+0x43);  // 0x43 //ANGELAG008: add
 564          XBYTE EMStatusBit2                          _at_(NameSpace+0x4A);       // 0x4A //ANGELAS032: add
 565          //ANGELAS107:S+Add code for GBSI function.
 566          XBYTE   batteryFirstUsedDateL                       _at_(NameSpace+0x4C);
 567          XBYTE   batteryFirstUsedDateH                       _at_(NameSpace+0x4D);
 568          //ANGELAS107:E+Add code for GBSI function.
 569          XBYTE    ISCT_Timer                                                     _at_(NameSpace+0x5A);   // 0x5A
 570          
 571          // External name space 0x5D ~ 0x5F
 572          XBYTE    EXT_NAMESPACE_INDEX                            _at_(NameSpace+0x5D);   // 0x5D
 573          XBYTE    EXT_NAMESPACE_BANK                                     _at_(NameSpace+0x5E);   // 0x5E
 574          XBYTE    EXT_NAMESPACE_DATA                                     _at_(NameSpace+0x5F); // 0x5F
 575          
 576          // SMBus EC interface ACPI RAM definition 0x60 ~ 0x87
 577          // #define SMBUS_Base_Address    0x60                       //Set SMBUS base address from Protocol
 578          XBYTE   SMB_PRTC                                                        _at_ (NameSpace+0x60);  // 0x60,
 579          XBYTE   SMB_STS                                                         _at_ (NameSpace+0x61);  // 0x61,
 580          XBYTE   SMB_ADDR                                                        _at_ (NameSpace+0x62);  // 0x62,
 581          XBYTE   SMB_CMD                                                         _at_ (NameSpace+0x63);  // 0x63,
 582          XBYTE   SMB_DATA                                                        _at_ (NameSpace+0x64);  // 0x64,
 583          //XBYTE SMB_DATA1[31]                                           _at_ (NameSpace+0x65);
 584          XBYTE   SMB_BCNT                                                        _at_ (NameSpace+0x84);  // 0x84,
 585          // SBS Only Alarm registers
 586          XBYTE   SMB_ALRA                                                        _at_ (NameSpace+0x85);  // 0x85,
 587          XBYTE   SMB_ALRD0                                                       _at_ (NameSpace+0x86);  // 0x86,
 588          XBYTE   SMB_ALRD1                                                       _at_ (NameSpace+0x87);  // 0x87,
 589          
 590          // Battery Information reading 0x90 ~ 0x9F
 591          //XBYTE  EXT_NAMESPACE_DATA[BATTMANUFACTURE]     _at_(ECRAM1+0x60); // 0x60
 592          
 593          //#define BATTMANUFACTURE                       0x30                            // (9 BYTES) Battery ManufactureName, reserve 9 byte
 594          //    #define nManufact(x)              SMB_ACPI[x-BATTMANUFACTURE]     // Only support main battery so far, 0x90~0x98
 595          //#define BATTDEVICENAME                        0x27                            // (7 BYTES) Battery DeviceName, reserve 7 byte
 596          //    #define nDeviceName(x)    SMB_ACPI[x-BATTDEVICENAME]      // Only support main battery so far, 0x99~0x9F
 597          
 598          XBYTE   nBattery0x16L                                           _at_(NameSpace+0x88);
 599          XBYTE   nBattery0x16H                                           _at_(NameSpace+0x89);
 600          XBYTE   EMStatusBit                                                     _at_(NameSpace+0x8A);
 601          XBYTE   TP_Type                                 _at_(NameSpace+0x8B);
 602          
 603          XBYTE   OEMControl                          _at_(NameSpace+0x8C);  //ANGELAG005:add.
 604          
 605          XBYTE   BATTMANUFACTURE[9]                                      _at_(NameSpace+0x8F);           // (9 BYTES) Battery ManufactureName, reserve 9 byte
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 11  

 606          XBYTE   BATTDEVICENAME[8]                                       _at_(NameSpace+0x98);           // Only support main battery so far, 0x98~0x9F
 607          
 608          
 609          XBYTE   AOAC_STATUS                                                     _at_(NameSpace+0xA0);           //
 610          XBYTE   ACPI_HOTKEY                                                     _at_(NameSpace+0xA1);           //
 611          XBYTE   nOSShutdownTemp2                                        _at_(NameSpace+0xA2);           // OS Shutdown Temp. For system read setting. (DTS)
 612          XBYTE   SYS_STATUS                                                      _at_(NameSpace+0xA3);           //
 613          XBYTE   WAKEUP_ENABLE                                           _at_(NameSpace+0xA4);           //
 614          XBYTE   ACOFF_SOURCE                                            _at_(NameSpace+0xA5);           //
 615          XBYTE   CURRENT_STATUS                                          _at_(NameSpace+0xA6);           // A6
 616          XBYTE   nOSThrottlingTemp                                       _at_(NameSpace+0xA7);           // OS Throttling Temp. For system read setting.
 617          XBYTE   nOSShutdownTemp                                         _at_(NameSpace+0xA8);           // Throttling Temp put a temp in for system throttling.
 618          XBYTE   nThrottlingAPSet                                        _at_(NameSpace+0xA9);
 619          XBYTE   TcontrolTemp                                            _at_(NameSpace+0xAA);           // For Tcontrol temp, sysbios will put Tcontrol temp
 620          XBYTE   THERMAL_STATUS                                          _at_(NameSpace+0xAB);           // HW throttling define
 621          XBYTE   nShutDownTemp                                           _at_(NameSpace+0xAC);           // Shutsown Temperature
 622          XBYTE   nFanStatus1                                                     _at_(NameSpace+0xAD);           // Just for utility (low nibble: Fan's speed step number ; 
             -high nibble: Fan's number )
 623          XBYTE   REAL_THROTTLING_INDEX                           _at_(NameSpace+0xAE);
 624          XBYTE   THROTTLING_HW                                           _at_(NameSpace+0xAF);           // HW throttling define
 625          XBYTE   nCpuTemp                                                        _at_(NameSpace+0xB0);           // CPU current temperature
 626          XBYTE   nCpuTempLocal                                           _at_(NameSpace+0xB1);           // CPU local temperature
 627          XBYTE   nSKINTemp90                                                     _at_(NameSpace+0xB2);           // SKIN temperature address 90
 628          //XBYTE nOSShutdownTemp3                                _at_(NameSpace+0xB3);           // OS Shutdown Temp. For system read setting.(VGA) //AN
             -GELAS070:remove
 629          XBYTE   ThermistorCPU_TEMP                                  _at_(NameSpace+0xB3);               //For system read setting.(VGA)//ANGELAS070:add
 630          XBYTE   VGA_TEMP                                                        _at_(NameSpace+0xB4);           // VGA temperature
 631          XBYTE   EXTVGA_TEMP                                                     _at_(NameSpace+0xB5);
 632          XBYTE   nNBTemp                                                         _at_(NameSpace+0xB6);           // NorthBridge temperature
 633          XBYTE   ACPI_STAT                                                       _at_(NameSpace+0xB7);
 634          XBYTE   SWI_EVENT                                                       _at_(NameSpace+0xB8);           // SWI Event indicators
 635          XBYTE   nBrightValue                                            _at_(NameSpace+0xB9);           // LCD Brightness value(0-0x09)
 636          
 637          XBYTE   GPU_REAL_THROTTLING_INDEX                   _at_(NameSpace+0xBA);  //MEILING033:add.
 638          
 639          XBYTE   DEVICEMODULE                                            _at_(NameSpace+0xBB);
 640          XBYTE   nKbProjectID                                            _at_(NameSpace+0xBC);
 641          XBYTE   CPU_TYPE                                                        _at_(NameSpace+0xBD);
 642          XBYTE   SEL_STATE0                                                      _at_(NameSpace+0xBE);
 643          XBYTE   SEL_STATE1                                                      _at_(NameSpace+0xBF);
 644          XBYTE   nBatteryStatL                                           _at_(NameSpace+0xC0);
 645          XBYTE   nBatteryStatH                                           _at_(NameSpace+0xC1);
 646          XBYTE   nRemainingCapL                                          _at_(NameSpace+0xC2);           // (WORD) Remaining Capacity
 647          XBYTE   nRemainingCapH                                          _at_(NameSpace+0xC3);
 648          XBYTE   nSerialNumL                                             _at_(NameSpace+0xC4);           // (WORD) Serial number
 649          XBYTE   nSerialNumH                                             _at_(NameSpace+0xC5);
 650          XBYTE   nPresentVoltL                                           _at_(NameSpace+0xC6);           // (WORD) Present voltage
 651          XBYTE   nPresentVoltH                                           _at_(NameSpace+0xC7);
 652          XBYTE   nDesignVoltL                                            _at_(NameSpace+0xC8);           // (WORD) Design voltage
 653          XBYTE   nDesignVoltH                                            _at_(NameSpace+0xC9);
 654          XBYTE   nDesignCapL                                             _at_(NameSpace+0xCA);           // (WORD) Design Capacity
 655          XBYTE   nDesignCapH                                             _at_(NameSpace+0xCB);
 656          XBYTE   nFullChgCapL                                            _at_(NameSpace+0xCC);           // (WORD) Full charge Capacity
 657          XBYTE   nFullChgCapH                                            _at_(NameSpace+0xCD);
 658          XBYTE   nBattGasgauge                                           _at_(NameSpace+0xCE);           // (BYTE) Battery percentage
 659          XBYTE   nCycleCounter                                           _at_(NameSpace+0xCF);           // (BYTE) Battery cycle counter
 660          XBYTE   nNowCurrentL                                            _at_(NameSpace+0xD0);           // (WORD) Battery current
 661          XBYTE   nNowCurrentH                                            _at_(NameSpace+0xD1);
 662          XBYTE   nAvgCurrentL                                            _at_(NameSpace+0xD2);           // (WORD) Battery average current
 663          XBYTE   nAvgCurrentH                                            _at_(NameSpace+0xD3);
 664          XBYTE   nBattComsup                                             _at_(NameSpace+0xD4);           // (BYTE) System power comsumption,Watt will not over 255. 
             -So just only need 1 byte.
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 12  

 665          XBYTE   nBattVolt                                                       _at_(NameSpace+0xD5);           // (BYTE) Battery Volt
 666          XBYTE   nBattTsTemp                                             _at_(NameSpace+0xD6);           // (BYTE) Battery Temp.
 667          XBYTE   nBattAverTemp                                           _at_(NameSpace+0xD7);           // (BYTE) Battery Average Temp.
 668          XBYTE   nBattCharCurrentL                                       _at_(NameSpace+0xD8);           // (WORD) Battery charge currrent.
 669          XBYTE   nBattCharCurrentH                                       _at_(NameSpace+0xD9);
 670          XBYTE   nBattTempCnt                                            _at_(NameSpace+0xDA);           // (BYTE) Battery current Temp sample counter
 671          XBYTE   nBattCmdIdx                                             _at_(NameSpace+0xDB);           // (BYTE) Battery Command index for read battery through SM
             -Bus
 672          XBYTE   nBattGetBattCnt                                         _at_(NameSpace+0xDC);           // (BYTE) Count up to communicate battery
 673          XBYTE   nBattOvrTempCnt                                         _at_(NameSpace+0xDD);           // (BYTE) Count up if battery is arrived overtemp.
 674          XBYTE   nBattStatusSMBL                                         _at_(NameSpace+0xDE);           // (WORD) Battrery SMBus status
 675          XBYTE   nBattStatusSMBH                                         _at_(NameSpace+0xDF);           //
 676          XBYTE   nBattOvrVoltCnt                                         _at_(NameSpace+0xE0);           // (BYTE) Battery over voltage counter
 677          XBYTE   nBattErrorCnt                                           _at_(NameSpace+0xE1);           // (BYTE) Communicatiion fail counter
 678          XBYTE   nBattTsVolt                                             _at_(NameSpace+0xE2);           // (BYTE) Battery voltage of ADC
 679          XBYTE   nCell1VoltL                                                     _at_(NameSpace+0xE3);
 680          XBYTE   nCell1VoltH                                                     _at_(NameSpace+0xE4);
 681          XBYTE   nCell2VoltL                                                     _at_(NameSpace+0xE5);
 682          XBYTE   nCell2VoltH                                                     _at_(NameSpace+0xE6);
 683          XBYTE   nCell3VoltL                                                     _at_(NameSpace+0xE7);
 684          XBYTE   nCell3VoltH                                                     _at_(NameSpace+0xE8);
 685          XBYTE   nCell4VoltL                                                     _at_(NameSpace+0xE9);
 686          XBYTE   nCell4VoltH                                                     _at_(NameSpace+0xEA);
 687          XBYTE   nManufactureAccessL                                     _at_(NameSpace+0xEB);
 688          XBYTE   nManufactureAccessH                                     _at_(NameSpace+0xEC);
 689          XBYTE   SHIPMODE_L                                                      _at_(NameSpace+0xED);
 690          XBYTE   SHIPMODE_H                                                      _at_(NameSpace+0xEE);
 691          XBYTE   RESERVEDEF                                                      _at_(NameSpace+0xEF);
 692          XBYTE   nBatteryStatus1                                 _at_(NameSpace+0xF0);
 693          XBYTE   nBatteryStatus2                                         _at_(NameSpace+0xF1);
 694          XBYTE   nStopChgStat3L                                          _at_(NameSpace+0xF2);
 695          XBYTE   nStopChgStat3H                                          _at_(NameSpace+0xF3);
 696          XBYTE   nManufactureDateL                                       _at_(NameSpace+0xF4);
 697          XBYTE   nManufactureDateH                                       _at_(NameSpace+0xF5);
 698          BYTE    nChargingVoltL                                          _at_(NameSpace+0xF6);
 699          XBYTE   nChargingVoltH                                          _at_(NameSpace+0xF7);
 700          XBYTE   BATTCELL                                                        _at_(NameSpace+0xF8);
 701          
 702          //XBYTE   PECIBIOSTEST                                          _at_(NameSpace+0xFC);//when enter S3/S4/CB,BIOS sent B4 CMD to EC from 66port 
             -for peci fail.//: Remove  and  PECI workaround.
 703          XBYTE   MBID_FB                                                         _at_(NameSpace+0xFB);  //T054+
 704          XBYTE   F2_Pressed                                                              _at_(NameSpace+0xFC);  //ANGELAG001: add
 705           XBYTE  nAtmFan1Speed                                   _at_(NameSpace+0xFE);//JERRYCH00:Modify the fan control from linear to the ladde
             -r.
 706          XBYTE   EM8_TEST                                                        _at_(NameSpace+0xFF);
 707          
 708          
 709          //*******************************************************************************
 710          //-------------------------------------------------------------------------------
 711          //      0x500-0x5FF   OEM RAM 5
 712          //-------------------------------------------------------------------------------
 713          //*******************************************************************************
 714          //---------------------PECI-------------------------
 715          XBYTE   PECI_TIMEOUT                            _at_(OEMRAM5+0x0B);
 716          XBYTE   PECI_ERROR                                      _at_(OEMRAM5+0x0C);
 717          XBYTE   PECIDelayCnt                            _at_(OEMRAM5+0x0D);
 718          XWORD   PECIBuffer0                                     _at_(OEMRAM5+0x0E);
 719          XWORD   PECIBuffer1                                     _at_(OEMRAM5+0x10);
 720          XWORD   PECIBuffer2                                     _at_(OEMRAM5+0x12);
 721          XWORD   PECIBuffer3                                     _at_(OEMRAM5+0x14);
 722          XWORD   PECIBuffer4                                     _at_(OEMRAM5+0x16);
 723          XWORD   PECIBuffer5                                     _at_(OEMRAM5+0x18);
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 13  

 724          XWORD   PECIBuffer6                                     _at_(OEMRAM5+0x1A);
 725          XWORD   PECIBuffer7                                     _at_(OEMRAM5+0x1C);
 726          // reserved 0xC1F
 727          XBYTE   TJMAX                                           _at_(OEMRAM5+0x20);
 728          XBYTE   PECI_Err_CNT                            _at_(OEMRAM5+0x21);
 729          
 730          XBYTE   PECI_GET_TEMPL                          _at_(OEMRAM5+0x24);
 731          XBYTE   PECI_GET_TEMPH                          _at_(OEMRAM5+0x25);
 732          
 733          XBYTE   ERR_THMSTS                                      _at_(OEMRAM5+0x39);
 734          XBYTE   TMErrCnt                                        _at_(OEMRAM5+0x3A);
 735          XBYTE   VGAErrCnt                                       _at_(OEMRAM5+0x3B);
 736          XBYTE   EXTVGAErrCnt                            _at_(OEMRAM5+0x3C);
 737          XBYTE   TmlICStep                                       _at_(OEMRAM5+0x3D);
 738          XBYTE   vgaok                                           _at_(OEMRAM5+0x3E);
 739          
 740          XWORD   cWriteCurrentPL1                        _at_(OEMRAM5+0x40);
 741          XWORD   cWriteCurrentPL2                        _at_(OEMRAM5+0x42);
 742          
 743          XBYTE   USB_Delay                                       _at_(OEMRAM5+0x44);  //ANGELAG008: modify BYTE to XBYTE
 744          
 745          //COKEYXU013:S+ ladder fan relative regs.
 746          XBYTE     Fan1RPM                              _at_ (OEMRAM5+0x46);
 747          XBYTE     Fan2RPM                              _at_ (OEMRAM5+0x47);
 748          
 749          
 750          
 751          XBYTE      Fan1On_Step1                    _at_ (OEMRAM5+0x50);
 752          XBYTE      Fan1On_Step2                    _at_ (OEMRAM5+0x51);
 753          XBYTE      Fan1On_Step3                    _at_ (OEMRAM5+0x52);
 754          XBYTE      Fan1On_Step4                    _at_ (OEMRAM5+0x53);
 755          XBYTE      Fan1On_Step5                _at_ (OEMRAM5+0x54);
 756          XBYTE      Fan1On_Step6                    _at_ (OEMRAM5+0x55);
 757          XBYTE      Fan1On_Step7                    _at_ (OEMRAM5+0x56);
 758          XBYTE      Fan1On_Step8                    _at_ (OEMRAM5+0x57);
 759          XBYTE      Fan2On_Step1                    _at_ (OEMRAM5+0x58);
 760          XBYTE      Fan2On_Step2                    _at_ (OEMRAM5+0x59);
 761          XBYTE      Fan2On_Step3                    _at_ (OEMRAM5+0x5A);
 762          XBYTE      Fan2On_Step4                    _at_ (OEMRAM5+0x5B);
 763          XBYTE      Fan2On_Step5                    _at_ (OEMRAM5+0x5C);
 764          XBYTE      Fan2On_Step6                    _at_ (OEMRAM5+0x5D);
 765          XBYTE      Fan2On_Step7                    _at_ (OEMRAM5+0x5E);
 766          XBYTE      Fan2On_Step8                    _at_ (OEMRAM5+0x5F);
 767          //COKEYXU013:E+ ladder fan relative regs.
 768          
 769          
 770          XBYTE  pDevStatus3                              _at_ (OEMRAM5 + 0x60); //ANGELAG008: add 
 771          XWORD   DisCPUTurboFor90s                   _at_(OEMRAM5+0x6A);   //COKEYXU029:add
 772          
 773          XBYTE   MaxCPU_MCHTemp                          _at_(OEMRAM5+0x6C);
 774          // Reserve 0x056D~057F
 775          
 776          XBYTE DisCPUTurboForLTP            _at_ (OEMRAM5+0x6D);  //COKEYXU046:add
 777          
 778          XBYTE   CMOS_TEST                                       _at_(OEMRAM5+0x6F); // RTC_RST
 779          
 780          XBYTE   EC_DeepSleep_Temp0              _at_(OEMRAM5+0x70);
 781          XBYTE   EC_DeepSleep_Temp1              _at_(OEMRAM5+0x71);
 782          XBYTE   EC_DeepSleep_Temp2              _at_(OEMRAM5+0x72);
 783          XBYTE   EC_DeepSleep_Temp3              _at_(OEMRAM5+0x73);
 784          XBYTE   EC_DeepSleep_Temp4              _at_(OEMRAM5+0x74);
 785          XBYTE   EC_DeepSleep_Temp5              _at_(OEMRAM5+0x75);
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 14  

 786          XBYTE   EC_DeepSleep_Temp6              _at_(OEMRAM5+0x76);
 787          
 788          //MARTINH154:Add start
 789          XBYTE cmosdelay                                         _at_(OEMRAM5+0x77);
 790          XBYTE cmosdelay1                                        _at_(OEMRAM5+0x78);
 791          XBYTE cmosshutdelay                             _at_(OEMRAM5+0x79);
 792          //MARTINH154:Add end
 793          
 794          XBYTE   EC_DeepSleep_TempPortA          _at_(OEMRAM5+0x80);
 795          XBYTE   EC_DeepSleep_TempPortB          _at_(OEMRAM5+0x81);
 796          XBYTE   EC_DeepSleep_TempPortC          _at_(OEMRAM5+0x82);
 797          XBYTE   EC_DeepSleep_TempPortD          _at_(OEMRAM5+0x83);
 798          XBYTE   EC_DeepSleep_TempPortE          _at_(OEMRAM5+0x84);
 799          XBYTE   EC_DeepSleep_TempPortF          _at_(OEMRAM5+0x85);
 800          XBYTE   EC_DeepSleep_TempPortG          _at_(OEMRAM5+0x86);
 801          XBYTE   EC_DeepSleep_TempPortH          _at_(OEMRAM5+0x87);
 802          XBYTE   EC_DeepSleep_TempPortI          _at_(OEMRAM5+0x88);
 803          XBYTE   EC_DeepSleep_TempPortJ          _at_(OEMRAM5+0x89);
 804          
 805          
 806          //COKEYXU013:S+ ladder fan relative regs.
 807          XBYTE     Fan1Off_Step1                    _at_ (OEMRAM5+0x90);
 808          XBYTE     Fan1Off_Step2                    _at_ (OEMRAM5+0x91);
 809          XBYTE     Fan1Off_Step3                    _at_ (OEMRAM5+0x92);
 810          XBYTE     Fan1Off_Step4                    _at_ (OEMRAM5+0x93);
 811          XBYTE     Fan1Off_Step5                    _at_ (OEMRAM5+0x94);
 812          XBYTE     Fan1Off_Step6                    _at_ (OEMRAM5+0x95);
 813          XBYTE     Fan1Off_Step7                    _at_ (OEMRAM5+0x96);
 814          XBYTE     Fan1Off_Step8                    _at_ (OEMRAM5+0x97);
 815          XBYTE     Fan2Off_Step1                    _at_ (OEMRAM5+0x98);
 816          XBYTE     Fan2Off_Step2                    _at_ (OEMRAM5+0x99);
 817          XBYTE     Fan2Off_Step3                    _at_ (OEMRAM5+0x9A);
 818          XBYTE     Fan2Off_Step4                    _at_ (OEMRAM5+0x9B);
 819          XBYTE     Fan2Off_Step5                    _at_ (OEMRAM5+0x9C);
 820          XBYTE     Fan2Off_Step6                    _at_ (OEMRAM5+0x9D);
 821          XBYTE     Fan2Off_Step7                    _at_ (OEMRAM5+0x9E);
 822          XBYTE     Fan2Off_Step8                    _at_ (OEMRAM5+0x9F);
 823          //COKEYXU013:E+ ladder fan relative regs.
 824          
 825          
 826          XBYTE    cCmd                       _at_(OEMRAM5+0xA0);
 827          XBYTE    cKBStatus                  _at_(OEMRAM5+0xA1);
 828          XBITS_8  cBattFlag0                 _at_(OEMRAM5+0xA2);
 829          XBITS_8  cDev                       _at_(OEMRAM5+0xA3);
 830          XBITS_8  cSPIEEPROM                 _at_(OEMRAM5+0xA4);
 831          XBITS_8  cThrottlingSet                         _at_(OEMRAM5+0xA5);     // 00: Nothing, 01: Thr 12.5%, 02: Thr 25%,..,08: Thr 100%
 832          XBYTE    cTargetGauge               _at_(OEMRAM5+0xA6);
 833          //XBYTE    uCpuLoadCnt                          _at_(OEMRAM5+0xA7);
 834          XBYTE    battery_critical           _at_(OEMRAM5+0xA7);  //ANGELAS093
 835          XBYTE    cCPUKind                   _at_(OEMRAM5+0xA8);
 836          XBYTE    cPanelId                   _at_(OEMRAM5+0xA9);
 837          XBYTE    cBrightUpDelayCnt          _at_(OEMRAM5+0xAA);
 838          XBYTE    cBrightDnDelayCnt          _at_(OEMRAM5+0xAB);
 839          XBYTE    cRecoveryBrightValue       _at_(OEMRAM5+0xAC);
 840          XBYTE    cSysActionFlag             _at_(OEMRAM5+0xAD);
 841          XBYTE    cADPThrottling             _at_(OEMRAM5+0xAE);
 842          XBYTE    cTHERMThrottling           _at_(OEMRAM5+0xAF);
 843          XBYTE    cBATTThrottling            _at_(OEMRAM5+0xB0);
 844          XBITS_16 cSysStus                   _at_(OEMRAM5+0xB1);
 845          XBITS_16 cBattInform                _at_(OEMRAM5+0xB3);
 846          XBITS_16 cOsLedCtrl                 _at_(OEMRAM5+0xB5);
 847          XBITS_16 cOsLed1Ctrl                _at_(OEMRAM5+0xB7);
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 15  

 848          XBYTE    initMark                   _at_(OEMRAM5+0xB9);         // CMW 20121203
 849          XBYTE    TEMP_Error                 _at_(OEMRAM5+0xBA);         // CMW 20121203
 850          
 851          XBYTE    EM9_NEWFUN                 _at_(OEMRAM5+0xBB);    
 852          XBYTE    testtoolflag                           _at_(OEMRAM5+0xBC); 
 853          XBYTE    Bioswatchdog                           _at_(OEMRAM5+0xBD); //ANGELAS094:Add workaround for hang bios.
 854          XBYTE    Bioswatchdogtime           _at_(OEMRAM5+0xBE); //ANGELAS094:Add workaround for hang bios.
 855          
 856          //MEILING033:add start.
 857          XBYTE   ManualFanPRM                                            _at_(ECRAM5+0xBF);//JERRYCH00:Modify the fan control from linear to the ladder.
 858          XBYTE    cGPUThermalThrottling          _at_ (OEMRAM5+0xC0);
 859          XBYTE    cGPUBattThrottling                     _at_ (OEMRAM5+0xC1);
 860          XBYTE    cGPUBattOTPThrottling          _at_ (OEMRAM5+0xC2);
 861          XBYTE    cGPUBattLowThrottling          _at_ (OEMRAM5+0xC3);
 862          //MEILING033:add end.
 863          
 864          //MEILING055:S+.
 865          XBYTE    cGPUACtoBattThrottling     _at_ (OEMRAM5+0xC4);
 866          XBYTE    cGPUACtoBattTime               _at_ (OEMRAM5+0xC5);
 867          XBYTE    GPUProchotONCnt                _at_ (OEMRAM5+0xC6);
 868          XBYTE    cBATTLowThrottling             _at_ (OEMRAM5+0xC7);
 869          //MEILING055:E+.
 870          XBYTE    cGPUBattLTPThrottling          _at_ (OEMRAM5+0xC8); //COKEYXU046:add
 871          XBYTE    BatteryOCPDelay        _at_ (OEMRAM5+0xC9); //ANGELAG017: add
 872          XBYTE    cGPUBattPsysThrottling         _at_ (OEMRAM5+0xCA); //ANGELAG019: add
 873          
 874          XBYTE    GPU_Prochot            _at_ (OEMRAM5+0xCB); //ANGELAG020: add 
 875          XBITS_8  cGPUThrottlingSet              _at_ (OEMRAM5+0xCC); //JERRYCH00:Modify the fan control from linear to the l
             -adder.
 876          XBYTE    Adapter90WWA            _at_ (OEMRAM5+0xCD); //COKEYXU030:add
 877          
 878          //COKEYXU013:S+ ladder fan relative regs.
 879          XBYTE     Fan1RPM_Step1                    _at_ (OEMRAM5+0xE0);
 880          XBYTE     Fan1RPM_Step2                    _at_ (OEMRAM5+0xE1);
 881          XBYTE     Fan1RPM_Step3                    _at_ (OEMRAM5+0xE2);
 882          XBYTE     Fan1RPM_Step4                    _at_ (OEMRAM5+0xE3);
 883          XBYTE     Fan1RPM_Step5                    _at_ (OEMRAM5+0xE4);
 884          XBYTE     Fan1RPM_Step6                    _at_ (OEMRAM5+0xE5);
 885          XBYTE     Fan1RPM_Step7                    _at_ (OEMRAM5+0xE6);
 886          XBYTE     Fan1RPM_Step8                    _at_ (OEMRAM5+0xE7);
 887          XBYTE     Fan2RPM_Step1                    _at_ (OEMRAM5+0xE8);
 888          XBYTE     Fan2RPM_Step2                    _at_ (OEMRAM5+0xE9);
 889          XBYTE     Fan2RPM_Step3                    _at_ (OEMRAM5+0xEA);
 890          XBYTE     Fan2RPM_Step4                    _at_ (OEMRAM5+0xEB);
 891          XBYTE     Fan2RPM_Step5                    _at_ (OEMRAM5+0xEC);
 892          XBYTE     Fan2RPM_Step6                    _at_ (OEMRAM5+0xED);
 893          XBYTE     Fan2RPM_Step7                    _at_ (OEMRAM5+0xEE);
 894          XBYTE     Fan2RPM_Step8                _at_ (OEMRAM5+0xEF);
 895          //COKEYXU013:E+ ladder fan relative regs.
 896          
 897          
 898          
 899          XBYTE   ManualFan2PRM                   _at_(OEMRAM5+0xFA);//JERRYCH00:Modify the fan control from linear to the ladder.
 900          //ANGELAG031: remove start
 901          //ANGELAG022: add start
 902          /*XBYTE    cAMDGPUPsysThrott    _at_ (OEMRAM5+0xCC);
 903          XBYTE    cAMDGPUBattOTPThrott           _at_ (OEMRAM5+0xCD);
 904          XBYTE    cAMDGPUBattOCPThrott           _at_ (OEMRAM5+0xCE);
 905          XBYTE    cAMDGPUACtoBattThrott     _at_ (OEMRAM5+0xCF);
 906          XBYTE    cAMDGPUThrottCount     _at_ (OEMRAM5+0xD0);
 907          XBYTE    cAMDGPUBattLowThrott     _at_ (OEMRAM5+0xD1);
 908          
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 16  

 909          XBYTE    DGPUdebug     _at_ (OEMRAM5+0xFF);*/
 910          //ANGELAG022: add end
 911          //ANGELAG031: remove end
 912          //*******************************************************************************
 913          //-------------------------------------------------------------------------------
 914          //      0x600-0x6FF   OEM RAM 6
 915          //-------------------------------------------------------------------------------
 916          //*******************************************************************************
 917          
 918          /* 
 919          XBYTE           cCmd                                    _at_(OEMRAM6+0x01);
 920          
 921          XBYTE           cKBStatus                               _at_(OEMRAM6+0x05);
 922          XBITS_8         cBattFlag0                              _at_(OEMRAM6+0x06);
 923          XBITS_8         cDev                                    _at_(OEMRAM6+0x07);
 924          
 925          XBITS_8         cSPIEEPROM                      _at_(OEMRAM6+0x0F);
 926          
 927          XBITS_8         cThrottlingSet                  _at_(OEMRAM6+0x15);     // 00: Nothing, 01: Thr 12.5%, 02: Thr 25%,..,08: Thr 100%
 928          
 929          XBYTE           cTargetGauge                    _at_(OEMRAM6+0x2B);
 930          XBYTE           uCpuLoadCnt                     _at_(OEMRAM6+0x2C);
 931          
 932          XBYTE           cCPUKind                                _at_(OEMRAM6+0x63);
 933          
 934          XBYTE           cPanelId                                        _at_(OEMRAM6+0x77);
 935          
 936          XBYTE           cBrightUpDelayCnt               _at_(OEMRAM6+0x79);
 937          XBYTE           cBrightDnDelayCnt               _at_(OEMRAM6+0x7A);
 938          XBYTE           cRecoveryBrightValue            _at_(OEMRAM6+0x7B);
 939          
 940          XBYTE           cSysActionFlag                  _at_(OEMRAM6+0x8A);
 941          
 942          XBYTE           cADPThrottling                  _at_(OEMRAM6+0x97);
 943          XBYTE           cTHERMThrottling                        _at_(OEMRAM6+0x98);
 944          XBYTE           cBATTThrottling                 _at_(OEMRAM6+0x99);
 945          
 946          XBITS_16        cSysStus                                _at_(OEMRAM6+0xC0);
 947          XBITS_16        cBattInform                             _at_(OEMRAM6+0xC2);
 948          
 949          XBITS_16        cOsLedCtrl                              _at_(OEMRAM6+0xCA);
 950          XBITS_16        cOsLed1Ctrl                             _at_(OEMRAM6+0xCC);
 951          
 952          XBYTE           initMark                                        _at_(OEMRAM6+0xCE);             // CMW 20121203
 953          XBYTE           TEMP_Error                              _at_(OEMRAM6+0xCF);             // CMW 20121203
 954          XBYTE           delayEDPTm                     _at_(OEMRAM6+0xD0);          // EDP Delay Initial Timer
 955          XBYTE           cCHIPType                               _at_(OEMRAM6+0xF8);
 956          */ 
 957          //*******************************************************************************
 958          //-------------------------------------------------------------------------------
 959          //      0x700-0x7FF   OEM RAM 7
 960          //-------------------------------------------------------------------------------
 961          //*******************************************************************************
 962          // Keil C
 963          
 964          //*******************************************************************************
 965          //-------------------------------------------------------------------------------
 966          //      0x800-0x8FF   OEM RAM 8
 967          //-------------------------------------------------------------------------------
 968          //*******************************************************************************
 969          // Keyboard matrix
 970          XBYTE   KB_RAM_Table[128]                               _at_(OEMRAM8+0x00);     // 0x00
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 17  

 971          XBYTE   ExKB_RAM_Table[24]                              _at_(OEMRAM8+0x80);     // 0x80
 972          
 973          //*******************************************************************************
 974          //-------------------------------------------------------------------------------
 975          //      0x900-0x9FF   OEM RAM 9
 976          //-------------------------------------------------------------------------------
 977          //*******************************************************************************
 978          
 979          //COKEYXU013:S+ ladder fan relative regs.
 980          XBYTE     Fan1RPMVGA_Step1         _at_ (OEMRAM9+0x00);
 981          XBYTE     Fan1RPMVGA_Step2         _at_ (OEMRAM9+0x01);
 982          XBYTE     Fan1RPMVGA_Step3         _at_ (OEMRAM9+0x02);
 983          XBYTE     Fan1RPMVGA_Step4         _at_ (OEMRAM9+0x03);
 984          XBYTE     Fan1RPMVGA_Step5         _at_ (OEMRAM9+0x04);
 985          XBYTE     Fan1RPMVGA_Step6         _at_ (OEMRAM9+0x05);
 986          XBYTE     Fan1RPMVGA_Step7         _at_ (OEMRAM9+0x06);
 987          XBYTE     Fan1RPMVGA_Step8         _at_ (OEMRAM9+0x07);
 988          XBYTE     Fan2RPMVGA_Step1         _at_ (OEMRAM9+0x08);
 989          XBYTE     Fan2RPMVGA_Step2         _at_ (OEMRAM9+0x09);
 990          XBYTE     Fan2RPMVGA_Step3         _at_ (OEMRAM9+0x0A);
 991          XBYTE     Fan2RPMVGA_Step4         _at_ (OEMRAM9+0x0B);
 992          XBYTE     Fan2RPMVGA_Step5                 _at_ (OEMRAM9+0x0C);
 993          XBYTE     Fan2RPMVGA_Step6                 _at_ (OEMRAM9+0x0D);
 994          XBYTE     Fan2RPMVGA_Step7         _at_ (OEMRAM9+0x0E);
 995          XBYTE     Fan2RPMVGA_Step8         _at_ (OEMRAM9+0x0F);
 996          XBYTE     FanLevelVGA                      _at_ (OEMRAM9+0x10);
 997          XBYTE     FanLevel2CPU                     _at_ (OEMRAM9+0x11); 
 998          XBYTE     Fan1RPMTemp                      _at_ (OEMRAM9+0x12); 
 999          XBYTE     Fan2RPMTemp                      _at_ (OEMRAM9+0x13);  
1000          XBYTE     Fan1RPMCount                     _at_ (OEMRAM9+0x14);  
1001          XBYTE     Fan2RPMCount                     _at_ (OEMRAM9+0x15);
1002          XBYTE     Fan1RPMBackUp                    _at_ (OEMRAM9+0x16); 
1003          XBYTE     Fan2RPMBackUp                    _at_ (OEMRAM9+0x17);
1004          
1005          XWORD     RPM1                                     _at_ (OEMRAM9+0x18);
1006          
1007          XWORD     RPM2                                 _at_ (OEMRAM9+0x1A);
1008          //COKEYXU013:E+ ladder fan relative regs.
1009          
1010          XBYTE     delayEDPTm               _at_ (OEMRAM9+0x1C);       // EDP Delay Initial Timer
1011          XBYTE     cCHIPType                _at_ (OEMRAM9+0x1D);
1012          XBYTE     VFAN_Tab_Step3                   _at_ (OEMRAM9+0x1E);  //MEILING003:add.
1013          XBYTE     FAN_Tab_Step3            _at_ (OEMRAM9+0x1F);  //MEILING003:add.
1014          
1015          
1016          
1017          
1018          //Mos: add for control in Mailbox
1019          XBYTE   MMIO_rDATA_index                                _at_(OEMRAM9+0x91);     // 0x81
1020          XBYTE   MMIO_CMD_Ctrl                                   _at_(OEMRAM9+0x82);     // 0x82
1021          /*XBYTE MMIO_rDATA83                                    _at_(OEMRAM9+0x83);     // 0x83
1022          XBYTE   MMIO_rDATA84                                    _at_(OEMRAM9+0x84);     // 0x84
1023          XBYTE   MMIO_rDATA85                                    _at_(OEMRAM9+0x85);     // 0x85
1024          XBYTE   MMIO_rDATA86                                    _at_(OEMRAM9+0x86);     // 0x86
1025          XBYTE   MMIO_rDATA87                                    _at_(OEMRAM9+0x87);     // 0x87
1026          XBYTE   MMIO_rDATA88                                    _at_(OEMRAM9+0x88);     // 0x88
1027          XBYTE   MMIO_rDATA89                                    _at_(OEMRAM9+0x89);     // 0x89
1028          XBYTE   MMIO_rDATA9A                                    _at_(OEMRAM9+0x8A);     // 0x8A*/
1029          XBYTE   MMIO_rDATA[8]                                   _at_(OEMRAM9+0x83);     // 0x83 ~ 0x8A
1030          
1031          XBYTE   MMIO_iCMD                                               _at_(OEMRAM9+0x8B);     // 0x8B
1032          XBYTE   MMIO_iDATA8C                                    _at_(OEMRAM9+0x8C);     // 0x8C
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 18  

1033          XBYTE   MMIO_iDATA8D                                    _at_(OEMRAM9+0x8D);     // 0x8D
1034          XBYTE   MMIO_iDATA8E                                    _at_(OEMRAM9+0x8E);     // 0x8E
1035          XBYTE   MMIO_iDATA8F                                    _at_(OEMRAM9+0x8F);     // 0x8F
1036          XBYTE   MMIO_iDATA90                                    _at_(OEMRAM9+0x90);     // 0x90
1037          
1038          XBYTE   FnStatus                                                _at_(OEMRAM9+0xE0);
1039          
1040          XBYTE   SysStatus                                       _at_(OEMRAM9+0xF0);
1041          XBYTE   LID_DEBOUNCE_CNT                _at_(OEMRAM9+0xF1);
1042          XBYTE   PWRBTN_pressCnt                                 _at_(OEMRAM9+0xF2);
1043          //XBYTE LID_readytime                           _at_(OEMRAM9+0xF3); //ANGELAS007:Optimize power on sequence.
1044          //XBYTE NTC_FLAG                                        _at_(OEMRAM9+0xF3); //ANGELAS007:Optimize power on sequence. //ANGELAS038:remove  
1045          XBYTE   ExtTimeCnt                      _at_(OEMRAM9+0xF4);
1046          XBYTE   SysStatus2                              _at_(OEMRAM9+0xF5);
1047          XBYTE   EC_ON_Flag                              _at_(OEMRAM9+0xF6);  
1048          XBYTE   TPID1                                               _at_(OEMRAM9+0xFA);
1049          XBYTE   TPID2                                               _at_(OEMRAM9+0xFB);
1050          XBYTE   TPID3                                               _at_(OEMRAM9+0xFC);
1051          XBYTE   TPID4                                               _at_(OEMRAM9+0xFD);
1052          
1053          XBYTE   LENOVOPMFW_Temp                 _at_(OEMRAM9+0xFF);
1054          
1055          //*******************************************************************************
1056          //-------------------------------------------------------------------------------
1057          //      0xA00-0xAFF   OEM RAM A
1058          //-------------------------------------------------------------------------------
1059          //*******************************************************************************
1060          
1061          
1062          //*******************************************************************************
1063          //-------------------------------------------------------------------------------
1064          //      0xB00-0xBFF   OEM RAM B
1065          //-------------------------------------------------------------------------------
1066          //*******************************************************************************
1067          //---------------------FAN--------------------------
1068          XBYTE   TEMP_Buff_1                             _at_(OEMRAMB+0x00);
1069          XBYTE   TEMP_Buff_2                             _at_(OEMRAMB+0x01);
1070          XBYTE   TEMP_Buff_3                             _at_(OEMRAMB+0x02);
1071          XBYTE   EXT_Duty                                _at_(OEMRAMB+0x03);
1072          XBYTE   Target_Duty                             _at_(OEMRAMB+0x04);
1073          XBYTE   MBID_Reload                             _at_(OEMRAMB+0x05);
1074          XBYTE   Fan_ON_Count                    _at_(OEMRAMB+0x06);
1075          XBYTE   Fan_Debug_Temp                  _at_(OEMRAMB+0x07);
1076          XBYTE   VGA_TBuff1                              _at_(OEMRAMB+0x08);
1077          XBYTE   VGA_TBuff2                              _at_(OEMRAMB+0x09);
1078          XBYTE   VGA_TBuff3                              _at_(OEMRAMB+0x0A);
1079          XBYTE   WLAN_OFF_Cnt                    _at_(OEMRAMB+0x0B);
1080          XBYTE   Average_Temp                    _at_(OEMRAMB+0x0C);     // Average temperature stage
1081          XBYTE   SLI_Status                              _at_(OEMRAMB+0x0D);     // SLI check byte.
1082          XBYTE   USB_Charger                             _at_(OEMRAMB+0x0E);     // USB charger EN/Dis
1083          XBYTE   USB_Error                               _at_(OEMRAMB+0x0F);
1084          XBYTE   MuteCount                               _at_(OEMRAMB+0x10);
1085          XBYTE   EXT_VGA_Buff1                   _at_(OEMRAMB+0x11);
1086          XBYTE   EXT_VGA_Buff2                   _at_(OEMRAMB+0x12);
1087          XBYTE   EXT_VGA_Buff3                   _at_(OEMRAMB+0x13);
1088          XBYTE   Thro_Status                             _at_(OEMRAMB+0x14);
1089          XBYTE   Thro_Status2                    _at_(OEMRAMB+0x15);
1090          XBYTE   CPU_Shut_Cnt                    _at_(OEMRAMB+0x16);
1091          XBYTE   VGA_Shut_Cnt                    _at_(OEMRAMB+0x17);
1092          XBYTE   EXTVGA_Shut_Cnt                 _at_(OEMRAMB+0x18);
1093          XBYTE   LED_KB_PWM_Count                _at_(OEMRAMB+0x19);
1094          XBYTE   FAN2PRM                                 _at_(OEMRAMB+0x1A);
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 19  

1095          XBYTE   FAN_CpTarget                    _at_(OEMRAMB+0x1B);
1096          XBYTE   SMSC_ChgDelay                   _at_(OEMRAMB+0x1C);
1097          XBYTE   USB_ChargerStep                 _at_(OEMRAMB+0x1D);
1098          //XBYTE ManualFan2PRM                   _at_(OEMRAMB+0x1E);//JERRYCH00:Modify the fan control from linear to the ladder.
1099          XWORD   SHA1_SEED                               _at_(OEMRAMB+0x1F);
1100          
1101          XBYTE   uODDPWRsaving                   _at_(OEMRAMB+0x21);     //
1102          XBYTE   uODDdelaytimeStep               _at_(OEMRAMB+0x22);     //
1103          XBYTE   SHA1failCnt                             _at_(OEMRAMB+0x23);
1104          XBYTE   uWLBTLanTemp                    _at_(OEMRAMB+0x24);     //
1105          XBYTE   uODDlowCnt                              _at_(OEMRAMB+0x25);     //
1106          XBYTE   uODDtimeCnt                             _at_(OEMRAMB+0x26);     //
1107          XBYTE   Service_Auth_Step               _at_(OEMRAMB+0x27);
1108          
1109          XBYTE   FAN_Std_Max                             _at_(OEMRAMB+0x28);
1110          XBYTE   FAN_DOS_Max                             _at_(OEMRAMB+0x29);
1111          XBYTE   FAN_Quite_Max                   _at_(OEMRAMB+0x2A);
1112          
1113          //XBYTE FAN_SP_Max                      _at_(OEMRAMB+0x2B);
1114          XBYTE   FAN_RPM_L               _at_(OEMRAMB+0x2B);
1115          
1116          XBYTE   FAN_PWM_1                               _at_(OEMRAMB+0x2C);
1117          XBYTE   FAN_PWM_2                               _at_(OEMRAMB+0x2D);
1118          XBYTE   StatusKeeper                    _at_(OEMRAMB+0x2E);
1119          XBYTE   ECSleepCount                    _at_(OEMRAMB+0x2F);
1120          
1121          XBYTE   TouchPadCount                   _at_(OEMRAMB+0x30);
1122          XBYTE   EEPROM_PwrSts                   _at_(OEMRAMB+0x31);
1123          
1124          //XWORD         FAN1_RPM                                _at_(OEMRAMB+0x32);
1125          
1126          
1127          
1128          XBYTE   PwrOnDly5Sec                    _at_(OEMRAMB+0x34); 
1129          
1130          XBYTE   SHA1FailRetry           _at_(OEMRAMB+0x35); 
1131          
1132          //ANGELAS043: add start
1133          XBYTE   RSOC1PTO0PCount                 _at_(OEMRAMB+0x36);  
1134          XBYTE   RSOC1PTO0PSaveSpace             _at_(OEMRAMB+0x37);
1135          //ANGELAS043:add end
1136          
1137          XBYTE   SLI_GPUMax                              _at_(OEMRAMB+0x38);
1138          XBYTE   SLI_GPUPWM1                             _at_(OEMRAMB+0x39);
1139          XBYTE   SLI_GPUPWM2                             _at_(OEMRAMB+0x3A);
1140          XBYTE   SLI_FANMax                              _at_(OEMRAMB+0x3B);
1141          XBYTE   SLI_FANPWM1                             _at_(OEMRAMB+0x3C);
1142          XBYTE   SLI_FANPWM2                             _at_(OEMRAMB+0x3D);
1143          
1144          XBYTE   FAN_PWM_3               _at_(OEMRAMB+0x3E); //MEILING003:add.
1145          
1146          XBYTE   Thro_Status3                    _at_ (OEMRAMB+0x3F);  //MEILING040:add.
1147          
1148          LWORD   K[5]                                    _at_(OEMRAMB+0x40);    //4*5 = 20 byte
1149          LWORD   RBATH0                                  _at_(OEMRAMB+0x60);     // 0x0B60 ~ 0x0B63
1150          LWORD   RBATH1                                  _at_(OEMRAMB+0x64);     // 0x0B64 ~ 0x0B67
1151          LWORD   RBATH2                                  _at_(OEMRAMB+0x68);     // 0x0B68 ~ 0x0B6B
1152          LWORD   RBATH3                                  _at_(OEMRAMB+0x6C);     // 0x0B6C ~ 0x0B6F
1153          LWORD   RBATH4                                  _at_(OEMRAMB+0x70);     // 0x0B70 ~ 0x0B73
1154          LWORD   BATchallenger[5]                _at_(OEMRAMB+0x80);     // 0x0B80 ~ 0x0B93
1155          
1156          
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 20  

1157          
1158          
1159          XBYTE   ShutDnCause                     _at_(OEMRAMB+0xA3);    
1160          XBYTE   FunctionKeyDebounce         _at_(OEMRAMB+0xA4);  //ANGELAS084:add
1161          XBYTE   Thro_Status4            _at_(OEMRAMB+0xA5);  ////ANGELAG046: add
1162          
1163          //XWORD     FAN2_RPM                               _at_ (OEMRAMB+0xA6);
1164          
1165          //COKEYXU013:S+ ladder fan relative regs.
1166          XBYTE     Fan1OffVGA_Step1         _at_ (OEMRAMB+0xB0);
1167          XBYTE     Fan1OffVGA_Step2         _at_ (OEMRAMB+0xB1);
1168          XBYTE     Fan1OffVGA_Step3         _at_ (OEMRAMB+0xB2);
1169          XBYTE     Fan1OffVGA_Step4         _at_ (OEMRAMB+0xB3);
1170          XBYTE     Fan1OffVGA_Step5         _at_ (OEMRAMB+0xB4);
1171          XBYTE     Fan1OffVGA_Step6         _at_ (OEMRAMB+0xB5);
1172          XBYTE     Fan1OffVGA_Step7         _at_ (OEMRAMB+0xB6);
1173          XBYTE     Fan1OffVGA_Step8         _at_ (OEMRAMB+0xB7);
1174          XBYTE     Fan2OffVGA_Step1         _at_ (OEMRAMB+0xB8);
1175          XBYTE     Fan2OffVGA_Step2         _at_ (OEMRAMB+0xB9);
1176          XBYTE     Fan2OffVGA_Step3         _at_ (OEMRAMB+0xBA);
1177          XBYTE     Fan2OffVGA_Step4         _at_ (OEMRAMB+0xBB);
1178          XBYTE     Fan2OffVGA_Step5                 _at_ (OEMRAMB+0xBC);
1179          XBYTE     Fan2OffVGA_Step6         _at_ (OEMRAMB+0xBD);
1180          XBYTE     Fan2OffVGA_Step7         _at_ (OEMRAMB+0xBE);
1181          XBYTE     Fan2OffVGA_Step8                 _at_ (OEMRAMB+0xBF);
1182          
1183          
1184          XBYTE     FanLevelCPU                  _at_ (OEMRAMB+0xC0);
1185          XBYTE     FanLevel2VGA                     _at_ (OEMRAMB+0xC1);
1186          XBYTE     temperature1                     _at_ (OEMRAMB+0xC2); 
1187          XBYTE     temperature2                     _at_ (OEMRAMB+0xC3);
1188          XBYTE     Debugtemperature1        _at_ (OEMRAMB+0xC4);    
1189          XBYTE     Debugtemperature2        _at_ (OEMRAMB+0xC5);   
1190          XBYTE     DummyStep                        _at_ (OEMRAMB+0xC6);
1191          XBYTE     FanFullOnCont                _at_ (OEMRAMB+0xC7);
1192          XBYTE     RPMTimeShift                     _at_ (OEMRAMB+0xC8); 
1193          XBYTE     DebugFan1RPMT                    _at_ (OEMRAMB+0xC9);
1194          //COKEYXU013:E+ ladder fan relative regs.
1195          
1196          
1197          
1198          
1199          
1200          
1201          
1202          
1203          
1204          
1205          //ANGELAG018: add start
1206          XBYTE   sdAMDTH0                                _at_(OEMRAMB+0xd0); 
1207          XBYTE   sdAMDTH1                                _at_(OEMRAMB+0xd1); 
1208          XBYTE   sdAMDTH2                                _at_(OEMRAMB+0xd2); 
1209          XBYTE   sdAMDTH3                                _at_(OEMRAMB+0xd3); 
1210          //ANGELAG018: add end
1211          /*LWORD         sdAMDTH0                                _at_(OEMRAMB+0xd0);  //ANGELAG018: remove start
1212          LWORD   sdAMDTH1                                _at_(OEMRAMB+0xd4); 
1213          LWORD   sdAMDTH2                                _at_(OEMRAMB+0xd8); 
1214          LWORD   sdAMDTH3                                _at_(OEMRAMB+0xdC); */ //ANGELAG018: remove end
1215          
1216          //COKEYXU013:S+ ladder fan relative regs.
1217          XBYTE     Fan1OnVGA_Step1                  _at_ (OEMRAMB+0xE0);
1218          XBYTE     Fan1OnVGA_Step2                  _at_ (OEMRAMB+0xE1);
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 21  

1219          XBYTE     Fan1OnVGA_Step3          _at_ (OEMRAMB+0xE2);
1220          XBYTE     Fan1OnVGA_Step4          _at_ (OEMRAMB+0xE3);
1221          XBYTE     Fan1OnVGA_Step5          _at_ (OEMRAMB+0xE4);
1222          XBYTE     Fan1OnVGA_Step6          _at_ (OEMRAMB+0xE5);
1223          XBYTE     Fan1OnVGA_Step7          _at_ (OEMRAMB+0xE6);
1224          XBYTE     Fan1OnVGA_Step8          _at_ (OEMRAMB+0xE7);
1225          XBYTE     Fan2OnVGA_Step1                  _at_ (OEMRAMB+0xE8);
1226          XBYTE     Fan2OnVGA_Step2                  _at_ (OEMRAMB+0xE9);
1227          XBYTE     Fan2OnVGA_Step3                  _at_ (OEMRAMB+0xEA);
1228          XBYTE     Fan2OnVGA_Step4                  _at_ (OEMRAMB+0xEB);
1229          XBYTE     Fan2OnVGA_Step5          _at_ (OEMRAMB+0xEC);
1230          XBYTE     Fan2OnVGA_Step6                  _at_ (OEMRAMB+0xED);
1231          XBYTE     Fan2OnVGA_Step7                  _at_ (OEMRAMB+0xEE);
1232          XBYTE     Fan2OnVGA_Step8                  _at_ (OEMRAMB+0xEF);
1233          //COKEYXU013:E+ ladder fan relative regs.
1234          
1235          
1236          
1237          
1238          
1239          XBYTE   Tgpuproup                               _at_(OEMRAMB+0xf0); 
1240          XBYTE   Tgpuprodown                             _at_(OEMRAMB+0xf1);  
1241          XBYTE   local_Shut_Cnt          _at_(OEMRAMB+0xf2); 
1242          XBYTE   remote_Shut_Cnt         _at_(OEMRAMB+0xf3); 
1243          
1244          
1245          
1246          //*******************************************************************************
1247          //-------------------------------------------------------------------------------
1248          //      0xC00-0xCFF   OEM RAM C
1249          //      0xD00-0xDFF   OEM RAM D
1250          //-------------------------------------------------------------------------------
1251          //*******************************************************************************
1252          LWORD   SHA1_W[80]                                                      _at_ ECRAMC; // 0x0C00 ~ 0x0D3F
1253          
1254          LWORD   WS_temp                                                         _at_(ECRAMD+0x40); // 0x0D40 ~ 0x0D4F
1255          
1256          LWORD   SHA1_a                                                          _at_(ECRAMD+0x50); // 0x0D50 ~ 0x0D53
1257          LWORD   SHA1_b                                                          _at_(ECRAMD+0x54); // 0x0D54 ~ 0x0D57
1258          LWORD   SHA1_c                                                          _at_(ECRAMD+0x58); // 0x0D58 ~ 0x0D5B
1259          LWORD   SHA1_d                                                          _at_(ECRAMD+0x5C); // 0x0D5C ~ 0x0D5F
1260          LWORD   SHA1_e                                                          _at_(ECRAMD+0x60); // 0x0D60 ~ 0x0D63
1261          
1262          LWORD   H0                                                                      _at_(ECRAMD+0x64); // 0x0D64 ~ 0x0D67
1263          LWORD   H1                                                                      _at_(ECRAMD+0x68); // 0x0D68 ~ 0x0D6B
1264          LWORD   H2                                                                      _at_(ECRAMD+0x6C); // 0x0D6C ~ 0x0D6F
1265          LWORD   H3                                                                      _at_(ECRAMD+0x70); // 0x0D70 ~ 0x0D73
1266          LWORD   H4                                                                      _at_(ECRAMD+0x74); // 0x0D74 ~ 0x0D77
1267          
1268          LWORD   K0                                                                      _at_(ECRAMD+0x78); // 0x0D78 ~ 0x0D7B
1269          
1270          // --- here is EC result ---
1271          LWORD   Hn0                                                                     _at_(ECRAMD+0x7C); // 0x0D7C ~ 0x0D7F
1272          LWORD   Hn1                                                                     _at_(ECRAMD+0x80); // 0x0D80 ~ 0x0D83
1273          LWORD   Hn2                                                                     _at_(ECRAMD+0x84); // 0x0D84 ~ 0x0D87
1274          LWORD   Hn3                                                                     _at_(ECRAMD+0x88); // 0x0D88 ~ 0x0D8B
1275          LWORD   Hn4                                                                     _at_(ECRAMD+0x8C); // 0x0D8C ~ 0x0D8F
1276          
1277          // --- here is battery result ---
1278          LWORD   BATH0                                                           _at_(ECRAMD+0x90); // 0x0D90 ~ 0x0D93
1279          LWORD   BATH1                                                           _at_(ECRAMD+0x94); // 0x0D94 ~ 0x0D97
1280          LWORD   BATH2                                                           _at_(ECRAMD+0x98); // 0x0D98 ~ 0x0D9B
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 22  

1281          LWORD   BATH3                                                           _at_(ECRAMD+0x9C); // 0x0D9C ~ 0x0D9F
1282          LWORD   BATH4                                                           _at_(ECRAMD+0xA0); // 0x0DA0 ~ 0x0DA3
1283          
1284          //XBYTE Service_Auth_Step                                       _at_ ECRAMD+0xFF; // 0x0DFF
1285          
1286          //*******************************************************************************
1287          //-------------------------------------------------------------------------------
1288          //      0xE00-0xEFF   OEM RAM E
1289          //-------------------------------------------------------------------------------
1290          //*******************************************************************************
1291          
1292          //*******************************************************************************
1293          //-------------------------------------------------------------------------------
1294          //      0xF00-0xFFF   OEM RAM F
1295          //-------------------------------------------------------------------------------
1296          //*******************************************************************************
1297          //ANGELAS064:add start
1298          XBYTE   nDiagInterface_CMD             _at_(OEMRAMF+0x00);  
1299          XBYTE   nDiagInterface_DATA            _at_(OEMRAMF+0x01);                     
1300          
1301          XBYTE   nDiagInterface_ECRegL          _at_(OEMRAMF+0x02); //or used as EC Space offset
1302          XBYTE   nDiagInterface_ECRegH          _at_(OEMRAMF+0x03); 
1303          
1304          XBYTE   nDiagInterface_DATA_High       _at_(OEMRAMF+0x04); 
1305          
1306          
1307          XBYTE   SMB_PRTC_Diag                              _at_(OEMRAMF+0x60);// 0x60,
1308          XBYTE   SMB_STS_Diag                               _at_(OEMRAMF+0x61);// 0x61,
1309          XBYTE   SMB_ADDR_Diag                          _at_(OEMRAMF+0x62);// 0x62,
1310          XBYTE   SMB_CMD_Diag                               _at_(OEMRAMF+0x63);// 0x63,
1311          XBYTE   SMB_DATA_Diag                              _at_(OEMRAMF+0x64);// 0x64,
1312          //0x64~0x83  for 32 bytes max block R/W 
1313          XBYTE   SMB_BCNT_Diag                              _at_(OEMRAMF+0x84);// 0x84,
1314          // SBS Only Alarm registers  
1315          XBYTE   SMB_ALRA_Diag                              _at_(OEMRAMF+0x85);// 0x85,
1316          XBYTE   SMB_ALRD0_Diag                             _at_(OEMRAMF+0x86);// 0x86,
1317          XBYTE   SMB_ALRD1_Diag                             _at_(OEMRAMF+0x87);// 0x87,
1318          
1319          XBYTE   SMB_EC_Chennel_Diag                        _at_(OEMRAMF+0x88);// 0x88,
1320          //ANGELAS064:add end
1321          
1322          
1323          
1324           
1325            
1326                  
1327          
1328          
1329          
1330          
C51 COMPILER V8.12   OEM_MEMORY                                                            07/28/2018 12:03:52 PAGE 23  

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
