C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE CORE_FLASH
OBJECT MODULE PLACED IN Code\CORE\CORE_FLASH.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\CORE\CORE_FLASH.C LA WL(1) CD OT(8,SIZE) NOAREGS OR INCDIR(.\Code\CORE
                    -\INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_FLASH.C
   3           *
   4           * Author : Dino
   5           *
   6           * Copyright (c) ITE INC. All Rights Reserved.
   7           *
   8           *---------------------------------------------------------------------------*/
   9          
  10          #include <CORE_INCLUDE.H>
  11          #include <OEM_INCLUDE.H>
  12          
  13          //-----------------------------------------------------------------------------
  14          // Always at 0xFF00 of code space
  15          //-----------------------------------------------------------------------------
  16          void RamCode(void)
  17          {
  18   1      
  19   1      }
  20          
  21          //-----------------------------------------------------------------------------
  22          // The function start address always at 0xFE00 (refer to link file)
  23          //-----------------------------------------------------------------------------
  24          void FuncAt_0xFE00(void)
  25          {
  26   1          _nop_();
  27   1          _nop_();
  28   1          _nop_();
  29   1          _nop_();
  30   1          _nop_();
  31   1          _nop_();
  32   1          _nop_();
  33   1          _nop_();
  34   1          FlashECCode();
  35   1      }
  36          
  37          //-----------------------------------------------------------------------------
  38          // The function of EC flash
  39          //-----------------------------------------------------------------------------
  40          void FlashECCode(void)
  41          {
  42   1              RamcodeCmd = 0x00;
  43   1              RamcodeSend = 0x00;
  44   1      
  45   1          PM1DO = 0x33;               // ACK
  46   1      
  47   1              while(1) 
  48   1              {       
  49   2                      if( IS_MASK_SET(KBHISR,IBF))
  50   2                      {
  51   3                              RamcodeCmd = KBHIDIR;
  52   3                              continue;
  53   3                      }
  54   2                      if( IS_MASK_CLEAR(PM1STS,P_IBF) ) continue;
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 2   

  55   2                      if( IS_MASK_CLEAR(PM1STS,P_C_D) ) continue;
  56   2                      RamcodeCmd = PM1DI;
  57   2      
  58   2                      if(RamcodeSend==1)
  59   2                      {
  60   3                              ECINDDR = RamcodeCmd;
  61   3                              RamcodeSend = 0x00;
  62   3                              continue;
  63   3                      }
  64   2      
  65   2                      if(RamcodeCmd==0x01)
  66   2                      {
  67   3                              ECINDAR3 = 0x4F;        // Enter follow mode
  68   3                              ECINDAR2 = 0xFF;
  69   3                              ECINDAR1 = 0xFE;
  70   3                              ECINDAR0 = 0x00;                // FFFFExx = 0xFF   
  71   3                              ECINDDR = 0x00;                 // SCE# high level
  72   3                      }
  73   2                      else if(RamcodeCmd==0x02)
  74   2                      {                                                       // Send SPI command
  75   3                              ECINDAR1 = 0xFD;
  76   3                              RamcodeSend = 1;
  77   3                      }
  78   2                      else if(RamcodeCmd==0x03)
  79   2                      {                                                       // write byte to spi
  80   3                              RamcodeSend = 1;
  81   3                      }
  82   2                      else if(RamcodeCmd==0x04)
  83   2                      {       
  84   3                              //while(IS_MASK_SET(PM1STS,P_OBF));
  85   3                              PM1DO=ECINDDR;                  // Read byte from spi                   
  86   3                      }
  87   2                      else if(RamcodeCmd==0x05)
  88   2                      {       
  89   3                              ECINDAR3 = 0x40;        //Exit follow mode
  90   3                              ECINDAR2 = 0x00;
  91   3                      }
  92   2                      else if(RamcodeCmd==0xFC)
  93   2                      {       
  94   3                              WinFlashMark = 0x33;
  95   3                  WinFlashMark2 = 0x88;
  96   3                              break;
  97   3                      }
  98   2                      else if(RamcodeCmd==0xFD)
  99   2                      {
 100   3                      //ANGELAS080:remove start
 101   3                  //WDTRST = 1;                               // Reset watch dog timer
 102   3                              //WDTEB = 1;                            // Enable watch dog
 103   3                      //while(1);                             // Wait for watch dog time-out
 104   3                      //ANGELAS080:remove end
 105   3                              WinFlashMark=0x33; //ANGELAS080:add
 106   3                      WinFlashMark2=0x88; //ANGELAS080:add
 107   3                              break;                   //ANGELAS080:add
 108   3                      }
 109   2                      else if(RamcodeCmd==0xFE)
 110   2                      {       
 111   3                              BRAM[63]=0x55;
 112   3                  WinFlashMark=0x53;//Modify after flash EC can auto poweron follow bios.
 113   3                      WinFlashMark2=0x35;//Modify after flash EC can auto poweron follow bios.
 114   3                      WDTRST = 1;                             // Reset watch dog timer
 115   3                              WDTEB = 1;                              // Enable watch dog
 116   3                      while(1);                               // Wait for watch dog time-out
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 3   

 117   3                      }
 118   2              }
 119   1      
 120   1              main();
 121   1      }
 122          //ANGELAS002:S+Support 686C flash EC in windows or Shell
 123          void FlashECCodeWinF(void)
 124          {
 125   1              RamcodeCmd = 0x00;
 126   1              RamcodeSend = 0x00;
 127   1              PM2DO = 0x33;
 128   1              
 129   1              while(1) 
 130   1              {       
 131   2                      if( IS_MASK_SET(KBHISR,IBF))
 132   2                      {
 133   3                              RamcodeCmd = KBHIDIR;
 134   3                              continue;
 135   3                      }
 136   2                      if( IS_MASK_CLEAR(PM2STS,P_IBF) ) continue;
 137   2                      if( IS_MASK_CLEAR(PM2STS,P_C_D) ) continue;
 138   2                      RamcodeCmd = PM2DI;
 139   2      
 140   2                      if(RamcodeSend==1)
 141   2                      {
 142   3                              ECINDDR = RamcodeCmd;
 143   3                              RamcodeSend = 0x00;
 144   3                              continue;
 145   3                      }
 146   2      
 147   2                      if(RamcodeCmd==0x01)
 148   2                      {
 149   3                              ECINDAR3 = 0x4F;        // Enter follow mode
 150   3                              ECINDAR2 = 0xFF;
 151   3                              ECINDAR1 = 0xFE;
 152   3                              ECINDAR0 = 0x00;                // FFFFExx = 0xFF   
 153   3                              ECINDDR = 0x00;                 // SCE# high level
 154   3                      }
 155   2                      else if(RamcodeCmd==0x02)
 156   2                      {                                                       // Send SPI command
 157   3                              ECINDAR1 = 0xFD;
 158   3                              RamcodeSend = 1;
 159   3                      }
 160   2                      else if(RamcodeCmd==0x03)
 161   2                      {                                                       // write byte to spi
 162   3                              RamcodeSend = 1;
 163   3                      }
 164   2                      else if(RamcodeCmd==0x04)
 165   2                      {       
 166   3                              //while(IS_MASK_SET(PM1STS,P_OBF));
 167   3                              PM2DO=ECINDDR;                  // Read byte from spi                   
 168   3                      }
 169   2                      else if(RamcodeCmd==0x05)
 170   2                      {       
 171   3                              ECINDAR3 = 0x40;        //Exit follow mode
 172   3                              ECINDAR2 = 0x00;
 173   3                      }
 174   2                      else if(RamcodeCmd==0xFC)
 175   2                      {       
 176   3                          WinFlashMark=0x33;
 177   3                      WinFlashMark2=0x88;
 178   3                              break;
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 4   

 179   3                      }
 180   2                      else if(RamcodeCmd==0xFD)
 181   2                      {
 182   3                              //ANGELAS080:remove start
 183   3                      //WDTRST = 1;                           // Reset watch dog timer
 184   3                              //WDTEB = 1;                            // Enable watch dog
 185   3                      //while(1);                             // Wait for watch dog time-out  
 186   3                              //ANGELAS080:remove end
 187   3                      WinFlashMark=0x33; //ANGELAS080:add
 188   3                      WinFlashMark2=0x88;  //ANGELAS080:add
 189   3                              break; //ANGELAS080:add
 190   3                      }
 191   2                      else if(RamcodeCmd==0xFE)
 192   2                      {       
 193   3                              BRAM[63]=0x55;
 194   3                              WinFlashMark=0x53;
 195   3                      WinFlashMark2=0x35;
 196   3                      WDTRST = 1;                             // Reset watch dog timer
 197   3                              WDTEB = 1;                              // Enable watch dog
 198   3                      while(1);                               // Wait for watch dog time-out
 199   3                      }
 200   2              }
 201   1      
 202   1              main();
 203   1      }
 204          //ANGELAS002:E+Support 686C flash EC in windows or Shell
 205          //-----------------------------------------------------------------------------
 206          // The function of reading SPI status ( command 0x05)
 207          //      After this function, spi status will save to SPIReadStatus
 208          //-----------------------------------------------------------------------------
 209          void SPI_Read_Status(void)
 210          {
 211   1              ECINDAR3 = 0x4F; 
 212   1              ECINDAR2 = 0xFF;
 213   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 214   1      
 215   1              ECINDAR1 = 0xFE;
 216   1              ECINDDR = 0xFF;                                 // SCE# high level
 217   1              ECINDAR1 = 0xFD;
 218   1              ECINDDR = SPICmd_ReadStatus;    // Read status command
 219   1      
 220   1              SPIReadStatus = ECINDDR;                // Save status Register to SPIReadStatus
 221   1              
 222   1              ECINDAR3 = 0x40;                        //Exit follow mode
 223   1              ECINDAR2 = 0x00;
 224   1      }
 225          
 226          //-----------------------------------------------------------------------------
 227          // The function of Write SPI status ( command 0x01)
 228          //      After this function, the value of SPIWriteStatus will write to spi status
 229          //-----------------------------------------------------------------------------
 230          void SPI_Write_Status(void)
 231          {
 232   1              ECINDAR3 = 0x4F; 
 233   1              ECINDAR2 = 0xFF;
 234   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 235   1      
 236   1              ECINDAR1 = 0xFE;
 237   1              ECINDDR = 0xFF;                                 // SCE# high level
 238   1              ECINDAR1 = 0xFD;
 239   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 240   1              while(1)                                                // waiting spi free
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 5   

 241   1              {
 242   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 243   2              {
 244   3                  break;
 245   3              } 
 246   2              }                                                               
 247   1      
 248   1              ECINDAR1 = 0xFE;
 249   1              ECINDDR = 0xFF;                                 // SCE# high level
 250   1              ECINDAR1 = 0xFD;
 251   1              ECINDDR = SPICmd_WREN;                  // Write enable 
 252   1              
 253   1          if(SPIID==SSTID)
 254   1              {
 255   2                      ECINDAR1 = 0xFE;
 256   2                      ECINDDR = 0xFF;                         // SCE# high level
 257   2                      ECINDAR1 = 0xFD;
 258   2                      ECINDDR = SPICmd_EWSR;          // Enable Write Status Register
 259   2              }    
 260   1              
 261   1              ECINDAR1 = 0xFE;
 262   1              ECINDDR = 0xFF;                                 // SCE# high level
 263   1              ECINDAR1 = 0xFD;
 264   1              ECINDDR = SPICmd_WRSR;                  // Write status command
 265   1              ECINDDR = SPIWriteStatus;               // Write SPIWriteStatus to spi status register
 266   1      
 267   1              ECINDAR1 = 0xFE;
 268   1              ECINDDR = 0xFF;                                 // SCE# high level
 269   1              ECINDAR1 = 0xFD;
 270   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 271   1              while(1)                                                // waiting spi free
 272   1              {
 273   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 274   2              {
 275   3                  break;
 276   3              } 
 277   2              }
 278   1              
 279   1              ECINDAR3 = 0x40;                        //Exit follow mode
 280   1              ECINDAR2 = 0x00;
 281   1      }
 282          
 283          //-----------------------------------------------------------------------------
 284          // The function of reading SPI ID (command 0x9F)
 285          //      After this function, spi id will save to array SPIIDBuf[] 
 286          //-----------------------------------------------------------------------------
 287          void SPI_Read_ID(void)
 288          {
 289   1              ECINDAR3 = 0x4F; 
 290   1              ECINDAR2 = 0xFF;
 291   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 292   1              
 293   1              ECINDAR1 = 0xFE;
 294   1              ECINDDR = 0xFF;                                 // SCE# high level
 295   1              ECINDAR1 = 0xFD;
 296   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 297   1              while(1)                                                // waiting spi free
 298   1              {
 299   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 300   2              {
 301   3                  break;
 302   3              } 
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 6   

 303   2              }                                                               
 304   1      
 305   1              ECINDAR1 = 0xFE;
 306   1              ECINDDR = 0xFF;                                 // SCE# high level
 307   1              ECINDAR1 = 0xFD;
 308   1              ECINDDR = SPICmd_DeviceID;  // Manufacture ID command
 309   1              for(SPIIndex=0x00;SPIIndex<4;SPIIndex++)
 310   1              {
 311   2                      SPIIDBuf[SPIIndex] = ECINDDR;
 312   2              }
 313   1              SPIID = SPIIDBuf[0];    
 314   1      
 315   1              ECINDAR1 = 0xFE;
 316   1              ECINDDR = 0xFF;                                 // SCE# high level
 317   1              ECINDAR1 = 0xFD;
 318   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 319   1      
 320   1              while(1)                                                // waiting spi free
 321   1              {
 322   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 323   2              {
 324   3                  break;
 325   3              } 
 326   2              }
 327   1              ECINDAR3 = 0x40;        //Exit follow mode
 328   1              ECINDAR2 = 0x00;
 329   1      }
 330          
 331          //-----------------------------------------------------------------------------
 332          // The function of reading SPI ID (command 0xAB)
 333          //      After this function, spi id will save to array SPIIDBuf[] 
 334          //-----------------------------------------------------------------------------
 335          void SPI_Read_ID_CmdAB(void)
 336          {
 337   1              ECINDAR3 = 0x4F; 
 338   1              ECINDAR2 = 0xFF;
 339   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 340   1              
 341   1              ECINDAR1 = 0xFE;
 342   1              ECINDDR = 0xFF;                                 // SCE# high level
 343   1              ECINDAR1 = 0xFD;
 344   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 345   1              while(1)                                                // waiting spi free
 346   1              {
 347   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 348   2              {
 349   3                  break;
 350   3              } 
 351   2              }                                                               
 352   1      
 353   1              ECINDAR1 = 0xFE;
 354   1              ECINDDR = 0xFF;                                 // SCE# high level
 355   1              ECINDAR1 = 0xFD;
 356   1              ECINDDR = SPICmd_RDID;              // Read ID command
 357   1          ECINDDR = 0x00;                         // Read ID command addr2
 358   1          ECINDDR = 0x00;                         // Read ID command addr1
 359   1          ECINDDR = 0x00;                         // Read ID command addr0
 360   1          
 361   1              for(SPIIndex=0x00;SPIIndex<4;SPIIndex++)
 362   1              {
 363   2                      SPIIDBuf[SPIIndex] = ECINDDR; 
 364   2              }
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 7   

 365   1              SPIID = SPIIDBuf[0];    
 366   1      
 367   1              ECINDAR1 = 0xFE;
 368   1              ECINDDR = 0xFF;                                 // SCE# high level
 369   1              ECINDAR1 = 0xFD;
 370   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 371   1      
 372   1              while(1)                                                // waiting spi free
 373   1              {
 374   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 375   2              {
 376   3                  break;
 377   3              } 
 378   2              }
 379   1              ECINDAR3 = 0x40;        //Exit follow mode
 380   1              ECINDAR2 = 0x00;
 381   1      }
 382          
 383          //-----------------------------------------------------------------------------
 384          // The function of Erasing SPI
 385          //-----------------------------------------------------------------------------
 386          void SPI_Erase(void)
 387          {
 388   1              ECINDAR3 = 0x4F; 
 389   1              ECINDAR2 = 0xFF;
 390   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 391   1              
 392   1              ECINDAR1 = 0xFE;
 393   1              ECINDDR = 0xFF;                                 // SCE# high level
 394   1              ECINDAR1 = 0xFD;
 395   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 396   1              while(1)                                                // waiting spi free
 397   1              {
 398   2                      if((ECINDDR&(SPIStatus_BUSY+SPIStatus_WEL))==SPIStatus_WriteEnable)
 399   2              {
 400   3                  break;
 401   3              } 
 402   2              }                                                               
 403   1      
 404   1              ECINDAR1 = 0xFE;
 405   1              ECINDDR = 0xFF;                                 // SCE# high level
 406   1              ECINDAR1 = 0xFD;
 407   1              ECINDDR = SPIAEraseCmd;                 // Send erase command
 408   1              for(SPIIndex=0x00;SPIIndex<3;SPIIndex++)
 409   1              {
 410   2                      ECINDDR = SPIAddrCycle[SPIIndex];
 411   2              }                                                               // Send address cycle
 412   1      
 413   1              ECINDAR1 = 0xFE;
 414   1              ECINDDR = 0xFF;                                 // SCE# high level
 415   1      
 416   1              ECINDAR1 = 0xFD;
 417   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 418   1      
 419   1              while(1)                                                // waiting spi free
 420   1              {
 421   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 422   2              {
 423   3                  break;
 424   3              } 
 425   2              }
 426   1              ECINDAR3 = 0x40;                        //Exit follow mode
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 8   

 427   1              ECINDAR2 = 0x00;
 428   1      }
 429          
 430          //-----------------------------------------------------------------------------
 431          // The function of SPI write enable
 432          //-----------------------------------------------------------------------------
 433          void SPI_Write_Enable(void)
 434          {
 435   1              ECINDAR3 = 0x4F; 
 436   1              ECINDAR2 = 0xFF;
 437   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 438   1              
 439   1              ECINDAR1 = 0xFE;
 440   1              ECINDDR = 0xFF;                                 // SCE# high level
 441   1              ECINDAR1 = 0xFD;
 442   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 443   1              while(1)                                                // waiting spi free
 444   1              {
 445   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 446   2              {
 447   3                  break;
 448   3              } 
 449   2              }                                                               
 450   1      
 451   1              ECINDAR1 = 0xFE;
 452   1              ECINDDR = 0xFF;                                 // SCE# high level
 453   1              ECINDAR1 = 0xFD;
 454   1              ECINDDR = SPICmd_WREN;                  // Write enable 
 455   1              
 456   1          if(SPIID==SSTID)
 457   1          {
 458   2              ECINDAR1 = 0xFE;
 459   2              ECINDDR = 0xFF;                         // SCE# high level
 460   2              ECINDAR1 = 0xFD;
 461   2              ECINDDR = SPICmd_EWSR;          // Enable Write Status Register
 462   2          }
 463   1          
 464   1              ECINDAR1 = 0xFE;
 465   1              ECINDDR = 0xFF;                                 // SCE# high level
 466   1              ECINDAR1 = 0xFD;
 467   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 468   1              while(1)                                                // waiting spi free
 469   1              {
 470   2                      if((ECINDDR&(SPIStatus_WEL+SPIStatus_BUSY))==0x02) // Check write enable and spi not busy
 471   2              {
 472   3                  break;
 473   3              } 
 474   2              }
 475   1      
 476   1              ECINDAR3 = 0x40;                        //Exit follow mode
 477   1              ECINDAR2 = 0x00;
 478   1      }
 479          
 480          //-----------------------------------------------------------------------------
 481          // The function of SPI write disable
 482          //-----------------------------------------------------------------------------
 483          void SPI_Write_Disable(void)
 484          {
 485   1              ECINDAR3 = 0x4F; 
 486   1              ECINDAR2 = 0xFF;
 487   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 488   1              
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 9   

 489   1              ECINDAR1 = 0xFE;
 490   1              ECINDDR = 0xFF;                                 // SCE# high level
 491   1              ECINDAR1 = 0xFD;
 492   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 493   1              while(1)                                                // waiting spi free
 494   1              {
 495   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 496   2              {
 497   3                  break;
 498   3              } 
 499   2              }                                                               
 500   1      
 501   1              ECINDAR1 = 0xFE;
 502   1              ECINDDR = 0xFF;                                 // SCE# high level
 503   1              ECINDAR1 = 0xFD;
 504   1              ECINDDR = SPICmd_WRDI;                  // Write disable        
 505   1      
 506   1              ECINDAR1 = 0xFE;
 507   1              ECINDDR = 0xFF;                                 // SCE# high level
 508   1              ECINDAR1 = 0xFD;
 509   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 510   1              while(1)                                                // waiting spi free
 511   1              {
 512   2                      if((ECINDDR&(SPIStatus_WEL+SPIStatus_BUSY))==0x00) // Check write disable and spi not busy
 513   2              {
 514   3                  break;
 515   3              } 
 516   2              }
 517   1      
 518   1              ECINDAR3 = 0x40;                        //Exit follow mode
 519   1              ECINDAR2 = 0x00;
 520   1      }
 521          
 522          //-----------------------------------------------------------------------------
 523          // The function of other SPI write 256 bytes
 524          //-----------------------------------------------------------------------------
 525          void Other_SPI_Write_256Bytes(void)
 526          {
 527   1              ECINDAR3 = 0x4F; 
 528   1              ECINDAR2 = 0xFF;
 529   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 530   1              
 531   1              ECINDAR1 = 0xFE;
 532   1              ECINDDR = 0xFF;                                 // SCE# high level
 533   1              ECINDAR1 = 0xFD;
 534   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 535   1              while(1)                                                // waiting spi free
 536   1              {
 537   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 538   2              {
 539   3                  break;
 540   3              } 
 541   2              }                                                               
 542   1      
 543   1              ECINDAR1 = 0xFE;
 544   1              ECINDDR = 0xFF;                             // SCE# high level
 545   1              ECINDAR1 = 0xFD;
 546   1          ECINDDR = SPICmd_BYTEProgram;   // Send Program One Data Byte command
 547   1      
 548   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 549   1              ECINDDR = SPIAddrCycle[1];
 550   1              ECINDDR = SPIAddrCycle[2];
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 10  

 551   1              
 552   1              SPIIndex = 0x00;
 553   1              do
 554   1              {
 555   2                      ECINDDR = *SPIDataPointer;
 556   2                      SPIIndex++;
 557   2                      SPIDataPointerLowByte++;
 558   2              }while(SPIIndex!=0x00);             // Send 256 bytes
 559   1      
 560   1              ECINDAR1 = 0xFE;
 561   1              ECINDDR = 0xFF;                                 // SCE# high level
 562   1              ECINDAR1 = 0xFD;
 563   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 564   1              while(1)                                                // waiting spi free
 565   1              {
 566   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 567   2              {
 568   3                  break;
 569   3              } 
 570   2              }       
 571   1      
 572   1              ECINDAR3 = 0x40;                        // Exit follow mode
 573   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 574   1      }
 575          
 576          //-----------------------------------------------------------------------------
 577          // The function of SST SPI write 256 bytes (for Word AAI command)
 578          //-----------------------------------------------------------------------------
 579          void SST_SPI_Write_256Bytes(void)
 580          {
 581   1              ECINDAR3 = 0x4F; 
 582   1              ECINDAR2 = 0xFF;
 583   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 584   1              
 585   1              ECINDAR1 = 0xFE;
 586   1              ECINDDR = 0xFF;                                 // SCE# high level
 587   1              ECINDAR1 = 0xFD;
 588   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 589   1              while(1)                                                // waiting spi free
 590   1              {
 591   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 592   2              {
 593   3                  break;
 594   3              } 
 595   2              }                                                               
 596   1      
 597   1              ECINDAR1 = 0xFE;
 598   1              ECINDDR = 0xFF;                             // SCE# high level
 599   1              ECINDAR1 = 0xFD;
 600   1          ECINDDR = SPICmd_AAIWordProgram;    // Auto Address Increment Programming
 601   1      
 602   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 603   1              ECINDDR = SPIAddrCycle[1];
 604   1              ECINDDR = SPIAddrCycle[2];
 605   1              
 606   1              SPIIndex = 0x00;
 607   1              do
 608   1              { 
 609   2                      ECINDDR = *SPIDataPointer;
 610   2                      SPIIndex++;
 611   2                      SPIDataPointerLowByte++;
 612   2      
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 11  

 613   2                  if((SPIIndex%2)==0x00)
 614   2                  {
 615   3                          ECINDAR1 = 0xFE;
 616   3                          ECINDDR = 0xFF;                                     // SCE# high level
 617   3                          ECINDAR1 = 0xFD;
 618   3                          ECINDDR = SPICmd_ReadStatus;        // Read Status Register
 619   3                          while(1)                                            // waiting spi free
 620   3                          {
 621   4                                  if((ECINDDR&SPIStatus_BUSY)==0x00)
 622   4                          {
 623   5                          break;
 624   5                      } 
 625   4                          }   
 626   3                      
 627   3                  if(SPIIndex!=0x00)
 628   3                  {
 629   4                              ECINDAR1 = 0xFE;
 630   4                              ECINDDR = 0xFF;                                             // SCE# high level
 631   4                              ECINDAR1 = 0xFD;
 632   4                              ECINDDR = SPICmd_AAIWordProgram;                // Auto Address Increment Programming
 633   4                  }
 634   3                  }
 635   2              }while(SPIIndex!=0x00);                                 // Send 256 bytes
 636   1      
 637   1              ECINDAR1 = 0xFE;
 638   1              ECINDDR = 0xFF;                             // SCE# high level
 639   1              ECINDAR1 = 0xFD;
 640   1          ECINDDR = SPICmd_WRDI;          // Write disable
 641   1      
 642   1          WNCKR = 0x00;                   // Delay 15.26 us
 643   1          WNCKR = 0x00;                   // Delay 15.26 us
 644   1          WNCKR = 0x00;                   // Delay 15.26 us
 645   1          WNCKR = 0x00;                   // Delay 15.26 us
 646   1      
 647   1              ECINDAR3 = 0x40;                        // Exit follow mode
 648   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 649   1      }
 650          
 651          //-----------------------------------------------------------------------------
 652          // The function of old SST SPI write 256 bytes
 653          //-----------------------------------------------------------------------------
 654          void Old_SST_SPI_Write_256Bytes(void)
 655          {
 656   1              ECINDAR3 = 0x4F; 
 657   1              ECINDAR2 = 0xFF;
 658   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 659   1              
 660   1              ECINDAR1 = 0xFE;
 661   1              ECINDDR = 0xFF;                                 // SCE# high level
 662   1              ECINDAR1 = 0xFD;
 663   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 664   1              while(1)                                                // waiting spi free
 665   1              {
 666   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 667   2              {
 668   3                  break;
 669   3              } 
 670   2              }                                                               
 671   1      
 672   1              ECINDAR1 = 0xFE;
 673   1              ECINDDR = 0xFF;                             // SCE# high level
 674   1              ECINDAR1 = 0xFD;
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 12  

 675   1          ECINDDR = SPICmd_AAIProgram;    // Auto Address Increment Programming
 676   1      
 677   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 678   1              ECINDDR = SPIAddrCycle[1];
 679   1              ECINDDR = SPIAddrCycle[2];
 680   1              
 681   1              SPIIndex = 0x00;
 682   1              do
 683   1              {
 684   2                      ECINDDR = *SPIDataPointer;
 685   2                      SPIIndex++;
 686   2                      SPIDataPointerLowByte++;
 687   2      
 688   2                  ECINDAR1 = 0xFE;
 689   2                  ECINDDR = 0xFF;                                     // SCE# high level
 690   2                  ECINDAR1 = 0xFD;
 691   2                  ECINDDR = SPICmd_ReadStatus;        // Read Status Register
 692   2                  while(1)                                            // waiting spi free
 693   2                  {
 694   3                          if((ECINDDR&SPIStatus_BUSY)==0x00)
 695   3                  {
 696   4                      break;
 697   4                  } 
 698   3                  }   
 699   2      
 700   2              if(SPIIndex!=0x00)
 701   2              {
 702   3                      ECINDAR1 = 0xFE;
 703   3                      ECINDDR = 0xFF;                     // SCE# high level
 704   3                      ECINDAR1 = 0xFD;       
 705   3                  ECINDDR = SPICmd_AAIProgram;    // Auto Address Increment Programming
 706   3              }
 707   2              }while(SPIIndex!=0x00);             // Send 256 bytes
 708   1      
 709   1              ECINDAR1 = 0xFE;
 710   1              ECINDDR = 0xFF;                             // SCE# high level
 711   1              ECINDAR1 = 0xFD;
 712   1          ECINDDR = SPICmd_WRDI;          // Write disable
 713   1      
 714   1      
 715   1          WNCKR = 0x00;                   // Delay 15.26 us
 716   1          WNCKR = 0x00;                   // Delay 15.26 us
 717   1          WNCKR = 0x00;                   // Delay 15.26 us
 718   1          WNCKR = 0x00;                   // Delay 15.26 us
 719   1              //ECINDAR1 = 0xFE;
 720   1              //ECINDDR = 0xFF;                                       // SCE# high level
 721   1              //ECINDAR1 = 0xFD;
 722   1              //ECINDDR = SPICmd_ReadStatus;  // Read Status Register
 723   1              //while(1)                                              // waiting spi free
 724   1              //{
 725   1              //      if((ECINDDR&(SPIStatus_BUSY+SSTSPIStatus_AAI))==0x00)
 726   1          //    {
 727   1          //        break;
 728   1          //    } 
 729   1              //}     
 730   1      
 731   1              ECINDAR3 = 0x40;                        // Exit follow mode
 732   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 733   1      }
 734          
 735          //-----------------------------------------------------------------------------
 736          // The function of SPI write 256 bytes
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 13  

 737          //-----------------------------------------------------------------------------
 738          void SPI_Write_256Bytes(void)
 739          {
 740   1          if(SPIID==SSTID)
 741   1          {
 742   2              if(SSTDeviceID==SSTID_Old) 
 743   2              {
 744   3                  LoadSPIFucnToRam(Old_SST_SPI_Write_256Bytes);   // Load function to ram
 745   3              }
 746   2              else
 747   2              {
 748   3                      LoadSPIFucnToRam(SST_SPI_Write_256Bytes);       // Load function to ram
 749   3              }
 750   2          }
 751   1          else
 752   1          {
 753   2                  LoadSPIFucnToRam(Other_SPI_Write_256Bytes); // Load function to ram
 754   2          }  
 755   1      }
 756          
 757          
 758          //-----------------------------------------------------------------------------
 759          // The function of SPI read 256 bytes
 760          //-----------------------------------------------------------------------------
 761          void SPI_Read_256Bytes(void)
 762          {
 763   1              ECINDAR3 = 0x4F; 
 764   1              ECINDAR2 = 0xFF;
 765   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 766   1              
 767   1              ECINDAR1 = 0xFE;
 768   1              ECINDDR = 0xFF;                                 // SCE# high level
 769   1              ECINDAR1 = 0xFD;
 770   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 771   1              while(1)                                                // waiting spi free
 772   1              {
 773   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 774   2              {
 775   3                  break;
 776   3              } 
 777   2              }                                                               
 778   1      
 779   1              ECINDAR1 = 0xFE;
 780   1              ECINDDR = 0xFF;                                         // SCE# high level
 781   1              ECINDAR1 = 0xFD;
 782   1              ECINDDR = SPICmd_HighSpeedRead;         // High-Speed Read
 783   1      
 784   1              ECINDDR = SPIAddrCycle[0];                      // For 256 bytes function limite
 785   1              ECINDDR = SPIAddrCycle[1];
 786   1              ECINDDR = SPIAddrCycle[2];
 787   1              ECINDDR = 0x00;                                         // dummy byte
 788   1              
 789   1              SPIIndex = 0x00;
 790   1              do
 791   1              {
 792   2                      *SPIDataPointer = ECINDDR;;
 793   2                      SPIIndex++;
 794   2                      SPIDataPointerLowByte++;
 795   2              }while(SPIIndex!=0x00);                                 // Send 256 bytes
 796   1      
 797   1              ECINDAR1 = 0xFE;
 798   1              ECINDDR = 0xFF;                                 // SCE# high level
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 14  

 799   1              ECINDAR1 = 0xFD;
 800   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 801   1              while(1)                                                // waiting spi free
 802   1              {
 803   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 804   2              {
 805   3                  break;
 806   3              } 
 807   2              }       
 808   1      
 809   1              ECINDAR3 = 0x40;                        // Exit follow mode
 810   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 811   1      }
 812          
 813          //-----------------------------------------------------------------------------
 814          // The function of loading function to external ram 0x600 ~ 0x6FF
 815          //-----------------------------------------------------------------------------
 816          void LoadSPIFucnToRam(FUNCT_PTR_V_V funcpoint)
 817          {
 818   1              Tmp_XPntr = 0x600;
 819   1              Tmp_code_pointer = funcpoint;
 820   1      
 821   1              ITempB01 = 0x00;
 822   1              do
 823   1              {
 824   2                      *Tmp_XPntr = *Tmp_code_pointer;
 825   2              Tmp_XPntr++;
 826   2                      Tmp_code_pointer++;
 827   2                      ITempB01++;
 828   2              }while(ITempB01!=0x00);
 829   1      }
 830          
 831          //-----------------------------------------------------------------------------
 832          // The function for ITE flash utility
 833          //-----------------------------------------------------------------------------
 834          #pragma ot(7, SIZE)
 835          void ITE_Flash_Utility(void)
 836          {
 837   1              DisableAllInterrupt();                          // Disable all interrupt 
 838   1              LoadSPIFucnToRam(FlashECCode);          // Load function to ram
 839   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 840   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 841   1      }
 842          
 843          //*****************************************************************************
 844          // OEM FUNCTION CALL
 845          //*****************************************************************************
 846          //ANGELAS002:S+Support 686C flash EC in windows or Shell
 847          #pragma ot(7, SIZE)
 848          void ITE_Flash_Utility_WINF(void)
 849          {
 850   1      
 851   1              #if WDT_Support
 852   1          DisableInternalWDT();
 853   1              #endif
 854   1      
 855   1              DisableAllInterrupt();                          // Disable all interrupt 
 856   1              Tmp_XPntr = 0x700;
 857   1              Tmp_code_pointer = (void*)FlashECCodeWinF;
 858   1              ITempB01 = 0x00;
 859   1              do
 860   1              {
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 15  

 861   2                      *Tmp_XPntr = *Tmp_code_pointer;
 862   2              Tmp_XPntr++;
 863   2                      Tmp_code_pointer++;
 864   2                      ITempB01++;
 865   2              }while(ITempB01!=0x00);
 866   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 867   1              _nop_();
 868   1          _nop_();
 869   1          _nop_();
 870   1          _nop_();
 871   1          _nop_();
 872   1          _nop_();
 873   1          _nop_();
 874   1          _nop_();
 875   1          FlashECCodeWinF();  
 876   1      }
 877          //ANGELAS002:E+Support 686C flash EC in windows or Shell
 878          //-----------------------------------------------------------------------------
 879          // The function for oem code write spi status
 880          //-----------------------------------------------------------------------------
 881          #pragma ot(7, SIZE)
 882          void Do_SPI_Write_Status(BYTE statusvalue)
 883          {
 884   1              SPIWriteStatus = statusvalue;
 885   1              
 886   1              DisableAllInterrupt();                          // Disable all interrupt 
 887   1              LoadSPIFucnToRam(SPI_Write_Status);     // Load function to ram
 888   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 889   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 890   1              EnableAllInterrupt();                           // Enable all interrupt 
 891   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 892   1      }
 893          
 894          //-----------------------------------------------------------------------------
 895          // The function for oem code read spi status
 896          //              Note : SPI status always save to SPIReadStatus
 897          //-----------------------------------------------------------------------------
 898          #pragma ot(7, SIZE)
 899          void Do_SPI_Read_Status(void)
 900          {
 901   1              DisableAllInterrupt();                          // Disable all interrupt 
 902   1              LoadSPIFucnToRam(SPI_Read_Status);      // Load function to ram
 903   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 904   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 905   1              EnableAllInterrupt();                           // Enable all interrupt 
 906   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 907   1      }
 908          
 909          //-----------------------------------------------------------------------------
 910          // The function for oem code read spi ID (command 0x9F)   
 911          //              Note : SPI ID always save to array SPIIDBuf[]
 912          //-----------------------------------------------------------------------------
 913          #pragma ot(7, SIZE)
 914          void Do_SPI_Read_ID(void)
 915          {
 916   1              DisableAllInterrupt();                  // Disable all interrupt 
 917   1              LoadSPIFucnToRam(SPI_Read_ID);  // Load function to ram
 918   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 919   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
 920   1              EnableAllInterrupt();               // Enable all interrupt 
 921   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 922   1      }
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 16  

 923          
 924          //-----------------------------------------------------------------------------
 925          // The function for oem code read spi ID (command 0xAB)
 926          //              Note : SPI ID always save to array SPIIDBuf[]
 927          //-----------------------------------------------------------------------------
 928          #pragma ot(7, SIZE)
 929          void Do_SPI_Read_ID_CmdAB(void)
 930          {
 931   1              DisableAllInterrupt();                  // Disable all interrupt 
 932   1              LoadSPIFucnToRam(SPI_Read_ID_CmdAB);    // Load function to ram
 933   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 934   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
 935   1              EnableAllInterrupt();               // Enable all interrupt 
 936   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 937   1      }
 938          
 939          //-----------------------------------------------------------------------------
 940          // The function for oem code erase spi
 941          //              Input : 1 EraseCmd --> Only support SPICmd_Erase4KByte, 
 942          //                                                              SPICmd_Erase32KByte, and SPICmd_Erase64KByte.
 943          //                              2 Addr2    --> A23 ~ A16
 944          //                              3 Addr1    --> A15 ~ A8
 945          //                              4 Addr0    --> A7  ~ A0
 946          //-----------------------------------------------------------------------------
 947          #pragma ot(7, SIZE)
 948          void Do_SPI_Erase(BYTE EraseCmd, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 949          {
 950   1              SPIAEraseCmd = EraseCmd;
 951   1              SPIAddrCycle[0] = Addr2;
 952   1              SPIAddrCycle[1] = Addr1;
 953   1              SPIAddrCycle[2] = Addr0;
 954   1                              
 955   1              DisableAllInterrupt();                  // Disable all interrupt 
 956   1              LoadSPIFucnToRam(SPI_Erase);    // Load function to ram
 957   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 958   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
 959   1              EnableAllInterrupt();               // Enable all interrupt 
 960   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 961   1      }
 962          
 963          //-----------------------------------------------------------------------------
 964          // The function for oem code write spi 256 bytes
 965          //              Input : 1 DataPointer --> Pointe to external memory
 966          //                              2 Addr2    --> A23 ~ A16
 967          //                              3 Addr1    --> A15 ~ A8
 968          //                              4 Addr0    --> A7  ~ A0
 969          //-----------------------------------------------------------------------------
 970          #pragma ot(7, SIZE)
 971          void Do_SPI_Write_256Bytes(XBYTE *DataPointer, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 972          {
 973   1              SPIDataPointer = DataPointer;
 974   1              SPIAddrCycle[0] = Addr2;
 975   1              SPIAddrCycle[1] = Addr1;
 976   1              SPIAddrCycle[2] = Addr0;
 977   1                              
 978   1              DisableAllInterrupt();                          // Disable all interrupt 
 979   1              SPI_Write_256Bytes();               // Load function to ram
 980   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 981   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 982   1              EnableAllInterrupt();                           // Enable all interrupt 
 983   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 984   1      }
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 17  

 985          
 986          //-----------------------------------------------------------------------------
 987          // The function for oem code read spi 256 bytes to external memory
 988          //              Input : 1 DataPointer --> Pointe to external memory
 989          //                              2 Addr2    --> A23 ~ A16
 990          //                              3 Addr1    --> A15 ~ A8
 991          //                              4 Addr0    --> A7  ~ A0
 992          //-----------------------------------------------------------------------------
 993          #pragma ot(7, SIZE)
 994          void Do_SPI_Read_256Bytes(XBYTE *DataPointer, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 995          {
 996   1              SPIDataPointer = DataPointer;
 997   1              SPIAddrCycle[0] = Addr2;
 998   1              SPIAddrCycle[1] = Addr1;
 999   1              SPIAddrCycle[2] = Addr0;
1000   1                              
1001   1              DisableAllInterrupt();                          // Disable all interrupt 
1002   1              LoadSPIFucnToRam(SPI_Read_256Bytes);    // Load function to ram
1003   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
1004   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
1005   1              EnableAllInterrupt();                           // Enable all interrupt 
1006   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
1007   1      }
1008          
1009          //-----------------------------------------------------------------------------
1010          // The function for oem code spi write enable
1011          //-----------------------------------------------------------------------------
1012          #pragma ot(7, SIZE)
1013          void Do_SPI_Write_Enable(void)
1014          {
1015   1              DisableAllInterrupt();                          // Disable all interrupt 
1016   1              LoadSPIFucnToRam(SPI_Write_Enable);     // Load function to ram
1017   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
1018   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
1019   1              EnableAllInterrupt();                           // Enable all interrupt 
1020   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
1021   1      }
1022          
1023          //-----------------------------------------------------------------------------
1024          // The function for oem code spi write disable
1025          //-----------------------------------------------------------------------------
1026          #pragma ot(7, SIZE)
1027          void Do_SPI_Write_Disable(void)
1028          {
1029   1              DisableAllInterrupt();                          // Disable all interrupt 
1030   1              LoadSPIFucnToRam(SPI_Write_Disable);    // Load function to ram
1031   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
1032   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
1033   1              EnableAllInterrupt();                           // Enable all interrupt 
1034   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
1035   1      }
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 18  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION RamCode (BEGIN)
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 19
0000 22                RET     
             ; FUNCTION RamCode (END)

             ; FUNCTION FuncAt_0xFE00 (BEGIN)
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
0000 00                NOP     
                                           ; SOURCE LINE # 27
0001 00                NOP     
                                           ; SOURCE LINE # 28
0002 00                NOP     
                                           ; SOURCE LINE # 29
0003 00                NOP     
                                           ; SOURCE LINE # 30
0004 00                NOP     
                                           ; SOURCE LINE # 31
0005 00                NOP     
                                           ; SOURCE LINE # 32
0006 00                NOP     
                                           ; SOURCE LINE # 33
0007 00                NOP     
                                           ; SOURCE LINE # 34
0008 020000      R     LJMP    FlashECCode
             ; FUNCTION FuncAt_0xFE00 (END)

             ; FUNCTION FlashECCode (BEGIN)
                                           ; SOURCE LINE # 40
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#RamcodeCmd
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 43
0005 900000      E     MOV     DPTR,#RamcodeSend
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 45
0009 900000      E     MOV     DPTR,#PM1DO
000C 7433              MOV     A,#033H
000E F0                MOVX    @DPTR,A
000F         ?C0003:
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
000F 900000      E     MOV     DPTR,#KBHISR
0012 E0                MOVX    A,@DPTR
0013 30E10A            JNB     ACC.1,?C0005
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0016 900000      E     MOV     DPTR,#KBHIDIR
0019 E0                MOVX    A,@DPTR
001A 900000      E     MOV     DPTR,#RamcodeCmd
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 52
001E 80EF              SJMP    ?C0003
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 19  

                                           ; SOURCE LINE # 53
0020         ?C0005:
                                           ; SOURCE LINE # 54
0020 900000      E     MOV     DPTR,#PM1STS
0023 E0                MOVX    A,@DPTR
0024 30E1E8            JNB     ACC.1,?C0003
0027         ?C0006:
                                           ; SOURCE LINE # 55
0027 900000      E     MOV     DPTR,#PM1STS
002A E0                MOVX    A,@DPTR
002B 30E3E1            JNB     ACC.3,?C0003
002E         ?C0007:
                                           ; SOURCE LINE # 56
002E 900000      E     MOV     DPTR,#PM1DI
0031 E0                MOVX    A,@DPTR
0032 900000      E     MOV     DPTR,#RamcodeCmd
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 58
0036 900000      E     MOV     DPTR,#RamcodeSend
0039 E0                MOVX    A,@DPTR
003A B4010F            CJNE    A,#01H,?C0008
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
003D 900000      E     MOV     DPTR,#RamcodeCmd
0040 E0                MOVX    A,@DPTR
0041 900000      E     MOV     DPTR,#ECINDDR
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
0045 E4                CLR     A
0046 900000      E     MOV     DPTR,#RamcodeSend
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
004A 80C3              SJMP    ?C0003
                                           ; SOURCE LINE # 63
004C         ?C0008:
                                           ; SOURCE LINE # 65
004C 900000      E     MOV     DPTR,#RamcodeCmd
004F E0                MOVX    A,@DPTR
0050 B4011C            CJNE    A,#01H,?C0009
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
0053 900000      E     MOV     DPTR,#ECINDAR3
0056 744F              MOV     A,#04FH
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 68
0059 900000      E     MOV     DPTR,#ECINDAR2
005C 74FF              MOV     A,#0FFH
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 69
005F 900000      E     MOV     DPTR,#ECINDAR1
0062 14                DEC     A
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
0064 E4                CLR     A
0065 900000      E     MOV     DPTR,#ECINDAR0
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 71
0069 900000      E     MOV     DPTR,#ECINDDR
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
006D 80A0              SJMP    ?C0003
006F         ?C0009:
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 20  

                                           ; SOURCE LINE # 73
006F 900000      E     MOV     DPTR,#RamcodeCmd
0072 E0                MOVX    A,@DPTR
0073 B40208            CJNE    A,#02H,?C0011
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
0076 900000      E     MOV     DPTR,#ECINDAR1
0079 74FD              MOV     A,#0FDH
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
007C 8007              SJMP    ?C0175
007E         ?C0011:
                                           ; SOURCE LINE # 78
007E 900000      E     MOV     DPTR,#RamcodeCmd
0081 E0                MOVX    A,@DPTR
0082 B40308            CJNE    A,#03H,?C0013
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
0085         ?C0175:
0085 900000      E     MOV     DPTR,#RamcodeSend
0088 7401              MOV     A,#01H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 81
008B 8082              SJMP    ?C0003
008D         ?C0013:
                                           ; SOURCE LINE # 82
008D 900000      E     MOV     DPTR,#RamcodeCmd
0090 E0                MOVX    A,@DPTR
0091 B4040B            CJNE    A,#04H,?C0015
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 85
0094 900000      E     MOV     DPTR,#ECINDDR
0097 E0                MOVX    A,@DPTR
0098 900000      E     MOV     DPTR,#PM1DO
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
009C 020000      R     LJMP    ?C0003
009F         ?C0015:
                                           ; SOURCE LINE # 87
009F 900000      E     MOV     DPTR,#RamcodeCmd
00A2 E0                MOVX    A,@DPTR
00A3 B4050E            CJNE    A,#05H,?C0017
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
00A6 900000      E     MOV     DPTR,#ECINDAR3
00A9 7440              MOV     A,#040H
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
00AC E4                CLR     A
00AD 900000      E     MOV     DPTR,#ECINDAR2
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
00B1 020000      R     LJMP    ?C0003
00B4         ?C0017:
                                           ; SOURCE LINE # 92
00B4 900000      E     MOV     DPTR,#RamcodeCmd
00B7 E0                MOVX    A,@DPTR
00B8 B4FC02            CJNE    A,#0FCH,?C0019
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 21  

                                           ; SOURCE LINE # 96
00BB 8007              SJMP    ?C0176
                                           ; SOURCE LINE # 97
00BD         ?C0019:
                                           ; SOURCE LINE # 98
00BD 900000      E     MOV     DPTR,#RamcodeCmd
00C0 E0                MOVX    A,@DPTR
00C1 B4FD0E            CJNE    A,#0FDH,?C0021
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 105
00C4         ?C0176:
00C4 900000      E     MOV     DPTR,#WinFlashMark
00C7 7433              MOV     A,#033H
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
00CA 900000      E     MOV     DPTR,#WinFlashMark2
00CD 7488              MOV     A,#088H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
00D0 8023              SJMP    ?C0004
                                           ; SOURCE LINE # 108
00D2         ?C0021:
                                           ; SOURCE LINE # 109
00D2 900000      E     MOV     DPTR,#RamcodeCmd
00D5 E0                MOVX    A,@DPTR
00D6 64FE              XRL     A,#0FEH
00D8 6003              JZ      $ + 5H
00DA 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
00DD 900000      E     MOV     DPTR,#BRAM+03FH
00E0 7455              MOV     A,#055H
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
00E3 900000      E     MOV     DPTR,#WinFlashMark
00E6 7453              MOV     A,#053H
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
00E9 900000      E     MOV     DPTR,#WinFlashMark2
00EC 7435              MOV     A,#035H
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
00EF D2D8              SETB    WDTRST
                                           ; SOURCE LINE # 115
00F1 D2D9              SETB    WDTEB
00F3         ?C0024:
                                           ; SOURCE LINE # 116
00F3 80FE              SJMP    ?C0024
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
00F5         ?C0004:
                                           ; SOURCE LINE # 120
00F5 020000      E     LJMP    main
             ; FUNCTION FlashECCode (END)

             ; FUNCTION FlashECCodeWinF (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#RamcodeCmd
0004 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 22  

                                           ; SOURCE LINE # 126
0005 900000      E     MOV     DPTR,#RamcodeSend
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0009 900000      E     MOV     DPTR,#PM2DO
000C 7433              MOV     A,#033H
000E F0                MOVX    @DPTR,A
000F         ?C0027:
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
000F 900000      E     MOV     DPTR,#KBHISR
0012 E0                MOVX    A,@DPTR
0013 30E10A            JNB     ACC.1,?C0029
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
0016 900000      E     MOV     DPTR,#KBHIDIR
0019 E0                MOVX    A,@DPTR
001A 900000      E     MOV     DPTR,#RamcodeCmd
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
001E 80EF              SJMP    ?C0027
                                           ; SOURCE LINE # 135
0020         ?C0029:
                                           ; SOURCE LINE # 136
0020 900000      E     MOV     DPTR,#PM2STS
0023 E0                MOVX    A,@DPTR
0024 30E1E8            JNB     ACC.1,?C0027
0027         ?C0030:
                                           ; SOURCE LINE # 137
0027 900000      E     MOV     DPTR,#PM2STS
002A E0                MOVX    A,@DPTR
002B 30E3E1            JNB     ACC.3,?C0027
002E         ?C0031:
                                           ; SOURCE LINE # 138
002E 900000      E     MOV     DPTR,#PM2DI
0031 E0                MOVX    A,@DPTR
0032 900000      E     MOV     DPTR,#RamcodeCmd
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
0036 900000      E     MOV     DPTR,#RamcodeSend
0039 E0                MOVX    A,@DPTR
003A B4010F            CJNE    A,#01H,?C0032
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
003D 900000      E     MOV     DPTR,#RamcodeCmd
0040 E0                MOVX    A,@DPTR
0041 900000      E     MOV     DPTR,#ECINDDR
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
0045 E4                CLR     A
0046 900000      E     MOV     DPTR,#RamcodeSend
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
004A 80C3              SJMP    ?C0027
                                           ; SOURCE LINE # 145
004C         ?C0032:
                                           ; SOURCE LINE # 147
004C 900000      E     MOV     DPTR,#RamcodeCmd
004F E0                MOVX    A,@DPTR
0050 B4011C            CJNE    A,#01H,?C0033
                                           ; SOURCE LINE # 148
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 23  

                                           ; SOURCE LINE # 149
0053 900000      E     MOV     DPTR,#ECINDAR3
0056 744F              MOV     A,#04FH
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
0059 900000      E     MOV     DPTR,#ECINDAR2
005C 74FF              MOV     A,#0FFH
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
005F 900000      E     MOV     DPTR,#ECINDAR1
0062 14                DEC     A
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0064 E4                CLR     A
0065 900000      E     MOV     DPTR,#ECINDAR0
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
0069 900000      E     MOV     DPTR,#ECINDDR
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
006D 80A0              SJMP    ?C0027
006F         ?C0033:
                                           ; SOURCE LINE # 155
006F 900000      E     MOV     DPTR,#RamcodeCmd
0072 E0                MOVX    A,@DPTR
0073 B40208            CJNE    A,#02H,?C0035
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0076 900000      E     MOV     DPTR,#ECINDAR1
0079 74FD              MOV     A,#0FDH
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
007C 8007              SJMP    ?C0177
007E         ?C0035:
                                           ; SOURCE LINE # 160
007E 900000      E     MOV     DPTR,#RamcodeCmd
0081 E0                MOVX    A,@DPTR
0082 B40308            CJNE    A,#03H,?C0037
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
0085         ?C0177:
0085 900000      E     MOV     DPTR,#RamcodeSend
0088 7401              MOV     A,#01H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
008B 8082              SJMP    ?C0027
008D         ?C0037:
                                           ; SOURCE LINE # 164
008D 900000      E     MOV     DPTR,#RamcodeCmd
0090 E0                MOVX    A,@DPTR
0091 B4040B            CJNE    A,#04H,?C0039
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 167
0094 900000      E     MOV     DPTR,#ECINDDR
0097 E0                MOVX    A,@DPTR
0098 900000      E     MOV     DPTR,#PM2DO
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
009C 020000      R     LJMP    ?C0027
009F         ?C0039:
                                           ; SOURCE LINE # 169
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 24  

009F 900000      E     MOV     DPTR,#RamcodeCmd
00A2 E0                MOVX    A,@DPTR
00A3 B4050E            CJNE    A,#05H,?C0041
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
00A6 900000      E     MOV     DPTR,#ECINDAR3
00A9 7440              MOV     A,#040H
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
00AC E4                CLR     A
00AD 900000      E     MOV     DPTR,#ECINDAR2
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
00B1 020000      R     LJMP    ?C0027
00B4         ?C0041:
                                           ; SOURCE LINE # 174
00B4 900000      E     MOV     DPTR,#RamcodeCmd
00B7 E0                MOVX    A,@DPTR
00B8 B4FC02            CJNE    A,#0FCH,?C0043
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
00BB 8007              SJMP    ?C0178
                                           ; SOURCE LINE # 179
00BD         ?C0043:
                                           ; SOURCE LINE # 180
00BD 900000      E     MOV     DPTR,#RamcodeCmd
00C0 E0                MOVX    A,@DPTR
00C1 B4FD0E            CJNE    A,#0FDH,?C0045
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 187
00C4         ?C0178:
00C4 900000      E     MOV     DPTR,#WinFlashMark
00C7 7433              MOV     A,#033H
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
00CA 900000      E     MOV     DPTR,#WinFlashMark2
00CD 7488              MOV     A,#088H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
00D0 8023              SJMP    ?C0028
                                           ; SOURCE LINE # 190
00D2         ?C0045:
                                           ; SOURCE LINE # 191
00D2 900000      E     MOV     DPTR,#RamcodeCmd
00D5 E0                MOVX    A,@DPTR
00D6 64FE              XRL     A,#0FEH
00D8 6003              JZ      $ + 5H
00DA 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
00DD 900000      E     MOV     DPTR,#BRAM+03FH
00E0 7455              MOV     A,#055H
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
00E3 900000      E     MOV     DPTR,#WinFlashMark
00E6 7453              MOV     A,#053H
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
00E9 900000      E     MOV     DPTR,#WinFlashMark2
00EC 7435              MOV     A,#035H
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 25  

00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
00EF D2D8              SETB    WDTRST
                                           ; SOURCE LINE # 197
00F1 D2D9              SETB    WDTEB
00F3         ?C0048:
                                           ; SOURCE LINE # 198
00F3 80FE              SJMP    ?C0048
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
00F5         ?C0028:
                                           ; SOURCE LINE # 202
00F5 020000      E     LJMP    main
             ; FUNCTION FlashECCodeWinF (END)

             ; FUNCTION SPI_Read_Status (BEGIN)
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0028 E0                MOVX    A,@DPTR
0029 900000      E     MOV     DPTR,#SPIReadStatus
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
002D 900000      E     MOV     DPTR,#ECINDAR3
0030 7440              MOV     A,#040H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
0033 E4                CLR     A
0034 900000      E     MOV     DPTR,#ECINDAR2
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
0038 22                RET     
             ; FUNCTION SPI_Read_Status (END)

C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 26  

             ; FUNCTION SPI_Write_Status (BEGIN)
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0052:
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0052
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
002F         ?C0053:
                                           ; SOURCE LINE # 248
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7406              MOV     A,#06H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
0046 900000      E     MOV     DPTR,#SPIID
0049 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 27  

004A B4BF17            CJNE    A,#0BFH,?C0055
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
004D 900000      E     MOV     DPTR,#ECINDAR1
0050 74FE              MOV     A,#0FEH
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0053 900000      E     MOV     DPTR,#ECINDDR
0056 04                INC     A
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
0058 900000      E     MOV     DPTR,#ECINDAR1
005B 74FD              MOV     A,#0FDH
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
005E 900000      E     MOV     DPTR,#ECINDDR
0061 7450              MOV     A,#050H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
0064         ?C0055:
                                           ; SOURCE LINE # 261
0064 900000      E     MOV     DPTR,#ECINDAR1
0067 74FE              MOV     A,#0FEH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
006A 900000      E     MOV     DPTR,#ECINDDR
006D 04                INC     A
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
006F 900000      E     MOV     DPTR,#ECINDAR1
0072 74FD              MOV     A,#0FDH
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
0075 900000      E     MOV     DPTR,#ECINDDR
0078 7401              MOV     A,#01H
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
007B 900000      E     MOV     DPTR,#SPIWriteStatus
007E E0                MOVX    A,@DPTR
007F 900000      E     MOV     DPTR,#ECINDDR
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
0083 900000      E     MOV     DPTR,#ECINDAR1
0086 74FE              MOV     A,#0FEH
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
0089 900000      E     MOV     DPTR,#ECINDDR
008C 04                INC     A
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
008E 900000      E     MOV     DPTR,#ECINDAR1
0091 74FD              MOV     A,#0FDH
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
0094 900000      E     MOV     DPTR,#ECINDDR
0097 7405              MOV     A,#05H
0099 F0                MOVX    @DPTR,A
009A         ?C0056:
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
009A 900000      E     MOV     DPTR,#ECINDDR
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 28  

009D E0                MOVX    A,@DPTR
009E 20E0F9            JB      ACC.0,?C0056
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
00A1         ?C0057:
                                           ; SOURCE LINE # 279
00A1 900000      E     MOV     DPTR,#ECINDAR3
00A4 7440              MOV     A,#040H
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
00A7 E4                CLR     A
00A8 900000      E     MOV     DPTR,#ECINDAR2
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
00AC 22                RET     
             ; FUNCTION SPI_Write_Status (END)

             ; FUNCTION SPI_Read_ID (BEGIN)
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 291
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0060:
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0060
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
002F         ?C0061:
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 29  

                                           ; SOURCE LINE # 305
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 307
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
0040 900000      E     MOV     DPTR,#ECINDDR
0043 749F              MOV     A,#09FH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
0046 E4                CLR     A
0047 900000      E     MOV     DPTR,#SPIIndex
004A F0                MOVX    @DPTR,A
004B         ?C0063:
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
004B 900000      E     MOV     DPTR,#ECINDDR
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 900000      E     MOV     DPTR,#SPIIndex
0053 E0                MOVX    A,@DPTR
0054 2400        E     ADD     A,#LOW SPIIDBuf
0056 F582              MOV     DPL,A
0058 E4                CLR     A
0059 3400        E     ADDC    A,#HIGH SPIIDBuf
005B F583              MOV     DPH,A
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
005F 900000      E     MOV     DPTR,#SPIIndex
0062 E0                MOVX    A,@DPTR
0063 04                INC     A
0064 F0                MOVX    @DPTR,A
0065 E0                MOVX    A,@DPTR
0066 B404E2            CJNE    A,#04H,?C0063
0069         ?C0064:
                                           ; SOURCE LINE # 313
0069 900000      E     MOV     DPTR,#SPIIDBuf
006C E0                MOVX    A,@DPTR
006D 900000      E     MOV     DPTR,#SPIID
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
0071 900000      E     MOV     DPTR,#ECINDAR1
0074 74FE              MOV     A,#0FEH
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0077 900000      E     MOV     DPTR,#ECINDDR
007A 04                INC     A
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
007C 900000      E     MOV     DPTR,#ECINDAR1
007F 74FD              MOV     A,#0FDH
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
0082 900000      E     MOV     DPTR,#ECINDDR
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 30  

0085 7405              MOV     A,#05H
0087 F0                MOVX    @DPTR,A
0088         ?C0066:
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
0088 900000      E     MOV     DPTR,#ECINDDR
008B E0                MOVX    A,@DPTR
008C 20E0F9            JB      ACC.0,?C0066
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
008F         ?C0067:
                                           ; SOURCE LINE # 327
008F 900000      E     MOV     DPTR,#ECINDAR3
0092 7440              MOV     A,#040H
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
0095 E4                CLR     A
0096 900000      E     MOV     DPTR,#ECINDAR2
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
009A 22                RET     
             ; FUNCTION SPI_Read_ID (END)

             ; FUNCTION SPI_Read_ID_CmdAB (BEGIN)
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 339
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 341
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 344
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0070:
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
0028 900000      E     MOV     DPTR,#ECINDDR
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 31  

002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0070
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
002F         ?C0071:
                                           ; SOURCE LINE # 353
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 356
0040 900000      E     MOV     DPTR,#ECINDDR
0043 74AB              MOV     A,#0ABH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
004A 900000      E     MOV     DPTR,#SPIIndex
004D F0                MOVX    @DPTR,A
004E         ?C0073:
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
004E 900000      E     MOV     DPTR,#ECINDDR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 900000      E     MOV     DPTR,#SPIIndex
0056 E0                MOVX    A,@DPTR
0057 2400        E     ADD     A,#LOW SPIIDBuf
0059 F582              MOV     DPL,A
005B E4                CLR     A
005C 3400        E     ADDC    A,#HIGH SPIIDBuf
005E F583              MOV     DPH,A
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
0062 900000      E     MOV     DPTR,#SPIIndex
0065 E0                MOVX    A,@DPTR
0066 04                INC     A
0067 F0                MOVX    @DPTR,A
0068 E0                MOVX    A,@DPTR
0069 B404E2            CJNE    A,#04H,?C0073
006C         ?C0074:
                                           ; SOURCE LINE # 365
006C 900000      E     MOV     DPTR,#SPIIDBuf
006F E0                MOVX    A,@DPTR
0070 900000      E     MOV     DPTR,#SPIID
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 32  

0074 900000      E     MOV     DPTR,#ECINDAR1
0077 74FE              MOV     A,#0FEH
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
007A 900000      E     MOV     DPTR,#ECINDDR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
007F 900000      E     MOV     DPTR,#ECINDAR1
0082 74FD              MOV     A,#0FDH
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0085 900000      E     MOV     DPTR,#ECINDDR
0088 7405              MOV     A,#05H
008A F0                MOVX    @DPTR,A
008B         ?C0076:
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 374
008B 900000      E     MOV     DPTR,#ECINDDR
008E E0                MOVX    A,@DPTR
008F 20E0F9            JB      ACC.0,?C0076
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
0092         ?C0077:
                                           ; SOURCE LINE # 379
0092 900000      E     MOV     DPTR,#ECINDAR3
0095 7440              MOV     A,#040H
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
0098 E4                CLR     A
0099 900000      E     MOV     DPTR,#ECINDAR2
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
009D 22                RET     
             ; FUNCTION SPI_Read_ID_CmdAB (END)

             ; FUNCTION SPI_Erase (BEGIN)
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 33  

                                           ; SOURCE LINE # 394
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0080:
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
                                           ; SOURCE LINE # 398
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 5403              ANL     A,#03H
002E FF                MOV     R7,A
002F BF02F6            CJNE    R7,#02H,?C0080
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 402
0032         ?C0081:
                                           ; SOURCE LINE # 404
0032 900000      E     MOV     DPTR,#ECINDAR1
0035 74FE              MOV     A,#0FEH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
0038 900000      E     MOV     DPTR,#ECINDDR
003B 04                INC     A
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
003D 900000      E     MOV     DPTR,#ECINDAR1
0040 74FD              MOV     A,#0FDH
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
0043 900000      E     MOV     DPTR,#SPIAEraseCmd
0046 E0                MOVX    A,@DPTR
0047 900000      E     MOV     DPTR,#ECINDDR
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 408
004B E4                CLR     A
004C 900000      E     MOV     DPTR,#SPIIndex
004F F0                MOVX    @DPTR,A
0050         ?C0083:
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 410
0050 900000      E     MOV     DPTR,#SPIIndex
0053 E0                MOVX    A,@DPTR
0054 2400        E     ADD     A,#LOW SPIAddrCycle
0056 F582              MOV     DPL,A
0058 E4                CLR     A
0059 3400        E     ADDC    A,#HIGH SPIAddrCycle
005B F583              MOV     DPH,A
005D E0                MOVX    A,@DPTR
005E 900000      E     MOV     DPTR,#ECINDDR
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
0062 900000      E     MOV     DPTR,#SPIIndex
0065 E0                MOVX    A,@DPTR
0066 04                INC     A
0067 F0                MOVX    @DPTR,A
0068 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 34  

0069 B403E4            CJNE    A,#03H,?C0083
006C         ?C0084:
                                           ; SOURCE LINE # 413
006C 900000      E     MOV     DPTR,#ECINDAR1
006F 74FE              MOV     A,#0FEH
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
0072 900000      E     MOV     DPTR,#ECINDDR
0075 04                INC     A
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
0077 900000      E     MOV     DPTR,#ECINDAR1
007A 74FD              MOV     A,#0FDH
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
007D 900000      E     MOV     DPTR,#ECINDDR
0080 7405              MOV     A,#05H
0082 F0                MOVX    @DPTR,A
0083         ?C0086:
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
0083 900000      E     MOV     DPTR,#ECINDDR
0086 E0                MOVX    A,@DPTR
0087 20E0F9            JB      ACC.0,?C0086
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
008A         ?C0087:
                                           ; SOURCE LINE # 426
008A 900000      E     MOV     DPTR,#ECINDAR3
008D 7440              MOV     A,#040H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
0090 E4                CLR     A
0091 900000      E     MOV     DPTR,#ECINDAR2
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
0095 22                RET     
             ; FUNCTION SPI_Erase (END)

             ; FUNCTION SPI_Write_Enable (BEGIN)
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 35  

0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0090:
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0090
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 449
002F         ?C0091:
                                           ; SOURCE LINE # 451
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7406              MOV     A,#06H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
0046 900000      E     MOV     DPTR,#SPIID
0049 E0                MOVX    A,@DPTR
004A B4BF17            CJNE    A,#0BFH,?C0093
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
004D 900000      E     MOV     DPTR,#ECINDAR1
0050 74FE              MOV     A,#0FEH
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
0053 900000      E     MOV     DPTR,#ECINDDR
0056 04                INC     A
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0058 900000      E     MOV     DPTR,#ECINDAR1
005B 74FD              MOV     A,#0FDH
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
005E 900000      E     MOV     DPTR,#ECINDDR
0061 7450              MOV     A,#050H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
0064         ?C0093:
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 36  

                                           ; SOURCE LINE # 464
0064 900000      E     MOV     DPTR,#ECINDAR1
0067 74FE              MOV     A,#0FEH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
006A 900000      E     MOV     DPTR,#ECINDDR
006D 04                INC     A
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 466
006F 900000      E     MOV     DPTR,#ECINDAR1
0072 74FD              MOV     A,#0FDH
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
0075 900000      E     MOV     DPTR,#ECINDDR
0078 7405              MOV     A,#05H
007A F0                MOVX    @DPTR,A
007B         ?C0094:
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
007B 900000      E     MOV     DPTR,#ECINDDR
007E E0                MOVX    A,@DPTR
007F 5403              ANL     A,#03H
0081 FF                MOV     R7,A
0082 BF02F6            CJNE    R7,#02H,?C0094
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
0085         ?C0095:
                                           ; SOURCE LINE # 476
0085 900000      E     MOV     DPTR,#ECINDAR3
0088 7440              MOV     A,#040H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
008B E4                CLR     A
008C 900000      E     MOV     DPTR,#ECINDAR2
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
0090 22                RET     
             ; FUNCTION SPI_Write_Enable (END)

             ; FUNCTION SPI_Write_Disable (BEGIN)
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 486
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 489
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 37  

0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0098:
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 495
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0098
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
002F         ?C0099:
                                           ; SOURCE LINE # 501
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 502
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 503
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 504
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7404              MOV     A,#04H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 506
0046 900000      E     MOV     DPTR,#ECINDAR1
0049 74FE              MOV     A,#0FEH
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 507
004C 900000      E     MOV     DPTR,#ECINDDR
004F 04                INC     A
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
0051 900000      E     MOV     DPTR,#ECINDAR1
0054 74FD              MOV     A,#0FDH
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
0057 900000      E     MOV     DPTR,#ECINDDR
005A 7405              MOV     A,#05H
005C F0                MOVX    @DPTR,A
005D         ?C0101:
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 512
005D 900000      E     MOV     DPTR,#ECINDDR
0060 E0                MOVX    A,@DPTR
0061 5403              ANL     A,#03H
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 38  

0063 70F8              JNZ     ?C0101
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
0065         ?C0102:
                                           ; SOURCE LINE # 518
0065 900000      E     MOV     DPTR,#ECINDAR3
0068 7440              MOV     A,#040H
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
006B E4                CLR     A
006C 900000      E     MOV     DPTR,#ECINDAR2
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
0070 22                RET     
             ; FUNCTION SPI_Write_Disable (END)

             ; FUNCTION Other_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 529
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 531
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 534
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0105:
                                           ; SOURCE LINE # 535
                                           ; SOURCE LINE # 536
                                           ; SOURCE LINE # 537
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0105
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
002F         ?C0106:
                                           ; SOURCE LINE # 543
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 39  

002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 544
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 545
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7402              MOV     A,#02H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 549
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
005E E4                CLR     A
005F 900000      E     MOV     DPTR,#SPIIndex
0062 F0                MOVX    @DPTR,A
0063         ?C0110:
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
0063 900000      E     MOV     DPTR,#SPIDataPointer
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A F582              MOV     DPL,A
006C 8E83              MOV     DPH,R6
006E E0                MOVX    A,@DPTR
006F 900000      E     MOV     DPTR,#ECINDDR
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 556
0073 900000      E     MOV     DPTR,#SPIIndex
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 557
0079 90009C            MOV     DPTR,#09CH
007C E0                MOVX    A,@DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 558
007F 900000      E     MOV     DPTR,#SPIIndex
0082 E0                MOVX    A,@DPTR
0083 70DE              JNZ     ?C0110
                                           ; SOURCE LINE # 560
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 40  

0085 900000      E     MOV     DPTR,#ECINDAR1
0088 74FE              MOV     A,#0FEH
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
008B 900000      E     MOV     DPTR,#ECINDDR
008E 04                INC     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
0090 900000      E     MOV     DPTR,#ECINDAR1
0093 74FD              MOV     A,#0FDH
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 563
0096 900000      E     MOV     DPTR,#ECINDDR
0099 7405              MOV     A,#05H
009B F0                MOVX    @DPTR,A
009C         ?C0111:
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
009C 900000      E     MOV     DPTR,#ECINDDR
009F E0                MOVX    A,@DPTR
00A0 20E0F9            JB      ACC.0,?C0111
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 570
00A3         ?C0112:
                                           ; SOURCE LINE # 572
00A3 900000      E     MOV     DPTR,#ECINDAR3
00A6 7440              MOV     A,#040H
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 573
00A9 E4                CLR     A
00AA 900000      E     MOV     DPTR,#ECINDAR2
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
00AE 22                RET     
             ; FUNCTION Other_SPI_Write_256Bytes (END)

             ; FUNCTION SST_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 586
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 41  

                                           ; SOURCE LINE # 587
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0115:
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 591
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0115
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
002F         ?C0116:
                                           ; SOURCE LINE # 597
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 598
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 599
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 600
0040 900000      E     MOV     DPTR,#ECINDDR
0043 74AD              MOV     A,#0ADH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 602
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 603
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 606
005E E4                CLR     A
005F 900000      E     MOV     DPTR,#SPIIndex
0062 F0                MOVX    @DPTR,A
0063         ?C0120:
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
0063 900000      E     MOV     DPTR,#SPIDataPointer
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 A3                INC     DPTR
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 42  

0069 E0                MOVX    A,@DPTR
006A F582              MOV     DPL,A
006C 8E83              MOV     DPH,R6
006E E0                MOVX    A,@DPTR
006F 900000      E     MOV     DPTR,#ECINDDR
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 610
0073 900000      E     MOV     DPTR,#SPIIndex
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 611
0079 90009C            MOV     DPTR,#09CH
007C E0                MOVX    A,@DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
007F 900000      E     MOV     DPTR,#SPIIndex
0082 E0                MOVX    A,@DPTR
0083 20E03B            JB      ACC.0,?C0118
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 615
0086 900000      E     MOV     DPTR,#ECINDAR1
0089 74FE              MOV     A,#0FEH
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 616
008C 900000      E     MOV     DPTR,#ECINDDR
008F 04                INC     A
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 617
0091 900000      E     MOV     DPTR,#ECINDAR1
0094 74FD              MOV     A,#0FDH
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 618
0097 900000      E     MOV     DPTR,#ECINDDR
009A 7405              MOV     A,#05H
009C F0                MOVX    @DPTR,A
009D         ?C0122:
                                           ; SOURCE LINE # 619
                                           ; SOURCE LINE # 620
                                           ; SOURCE LINE # 621
009D 900000      E     MOV     DPTR,#ECINDDR
00A0 E0                MOVX    A,@DPTR
00A1 20E0F9            JB      ACC.0,?C0122
                                           ; SOURCE LINE # 622
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 624
                                           ; SOURCE LINE # 625
00A4         ?C0123:
                                           ; SOURCE LINE # 627
00A4 900000      E     MOV     DPTR,#SPIIndex
00A7 E0                MOVX    A,@DPTR
00A8 6017              JZ      ?C0118
                                           ; SOURCE LINE # 628
                                           ; SOURCE LINE # 629
00AA 900000      E     MOV     DPTR,#ECINDAR1
00AD 74FE              MOV     A,#0FEH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 630
00B0 900000      E     MOV     DPTR,#ECINDDR
00B3 04                INC     A
00B4 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 43  

                                           ; SOURCE LINE # 631
00B5 900000      E     MOV     DPTR,#ECINDAR1
00B8 74FD              MOV     A,#0FDH
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 632
00BB 900000      E     MOV     DPTR,#ECINDDR
00BE 74AD              MOV     A,#0ADH
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 633
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 635
00C1         ?C0118:
00C1 900000      E     MOV     DPTR,#SPIIndex
00C4 E0                MOVX    A,@DPTR
00C5 709C              JNZ     ?C0120
                                           ; SOURCE LINE # 637
00C7 900000      E     MOV     DPTR,#ECINDAR1
00CA 74FE              MOV     A,#0FEH
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 638
00CD 900000      E     MOV     DPTR,#ECINDDR
00D0 04                INC     A
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 639
00D2 900000      E     MOV     DPTR,#ECINDAR1
00D5 74FD              MOV     A,#0FDH
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 640
00D8 900000      E     MOV     DPTR,#ECINDDR
00DB 7404              MOV     A,#04H
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 642
00DE E4                CLR     A
00DF 900000      E     MOV     DPTR,#WNCKR
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 643
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 644
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 645
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 647
00E6 900000      E     MOV     DPTR,#ECINDAR3
00E9 7440              MOV     A,#040H
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 648
00EC E4                CLR     A
00ED 900000      E     MOV     DPTR,#ECINDAR2
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 649
00F1 22                RET     
             ; FUNCTION SST_SPI_Write_256Bytes (END)

             ; FUNCTION Old_SST_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 657
0006 900000      E     MOV     DPTR,#ECINDAR2
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 44  

0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 658
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 660
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 661
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 662
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 663
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0127:
                                           ; SOURCE LINE # 664
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 666
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0127
                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
002F         ?C0128:
                                           ; SOURCE LINE # 672
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 673
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 674
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 675
0040 900000      E     MOV     DPTR,#ECINDDR
0043 74AF              MOV     A,#0AFH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 677
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 678
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 679
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 45  

0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
005E E4                CLR     A
005F 900000      E     MOV     DPTR,#SPIIndex
0062 F0                MOVX    @DPTR,A
0063         ?C0132:
                                           ; SOURCE LINE # 683
                                           ; SOURCE LINE # 684
0063 900000      E     MOV     DPTR,#SPIDataPointer
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A F582              MOV     DPL,A
006C 8E83              MOV     DPH,R6
006E E0                MOVX    A,@DPTR
006F 900000      E     MOV     DPTR,#ECINDDR
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 685
0073 900000      E     MOV     DPTR,#SPIIndex
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 686
0079 90009C            MOV     DPTR,#09CH
007C E0                MOVX    A,@DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 688
007F 900000      E     MOV     DPTR,#ECINDAR1
0082 74FE              MOV     A,#0FEH
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 689
0085 900000      E     MOV     DPTR,#ECINDDR
0088 04                INC     A
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 690
008A 900000      E     MOV     DPTR,#ECINDAR1
008D 74FD              MOV     A,#0FDH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 691
0090 900000      E     MOV     DPTR,#ECINDDR
0093 7405              MOV     A,#05H
0095 F0                MOVX    @DPTR,A
0096         ?C0133:
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 694
0096 900000      E     MOV     DPTR,#ECINDDR
0099 E0                MOVX    A,@DPTR
009A 20E0F9            JB      ACC.0,?C0133
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 696
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 698
009D         ?C0134:
                                           ; SOURCE LINE # 700
009D 900000      E     MOV     DPTR,#SPIIndex
00A0 E0                MOVX    A,@DPTR
00A1 6017              JZ      ?C0130
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 46  

                                           ; SOURCE LINE # 701
                                           ; SOURCE LINE # 702
00A3 900000      E     MOV     DPTR,#ECINDAR1
00A6 74FE              MOV     A,#0FEH
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 703
00A9 900000      E     MOV     DPTR,#ECINDDR
00AC 04                INC     A
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
00AE 900000      E     MOV     DPTR,#ECINDAR1
00B1 74FD              MOV     A,#0FDH
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 705
00B4 900000      E     MOV     DPTR,#ECINDDR
00B7 74AF              MOV     A,#0AFH
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 707
00BA         ?C0130:
00BA 900000      E     MOV     DPTR,#SPIIndex
00BD E0                MOVX    A,@DPTR
00BE 70A3              JNZ     ?C0132
                                           ; SOURCE LINE # 709
00C0 900000      E     MOV     DPTR,#ECINDAR1
00C3 74FE              MOV     A,#0FEH
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 710
00C6 900000      E     MOV     DPTR,#ECINDDR
00C9 04                INC     A
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 711
00CB 900000      E     MOV     DPTR,#ECINDAR1
00CE 74FD              MOV     A,#0FDH
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 712
00D1 900000      E     MOV     DPTR,#ECINDDR
00D4 7404              MOV     A,#04H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 715
00D7 E4                CLR     A
00D8 900000      E     MOV     DPTR,#WNCKR
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 717
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 731
00DF 900000      E     MOV     DPTR,#ECINDAR3
00E2 7440              MOV     A,#040H
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 732
00E5 E4                CLR     A
00E6 900000      E     MOV     DPTR,#ECINDAR2
00E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 733
00EA 22                RET     
             ; FUNCTION Old_SST_SPI_Write_256Bytes (END)

             ; FUNCTION SPI_Write_256Bytes (BEGIN)
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 47  

                                           ; SOURCE LINE # 738
                                           ; SOURCE LINE # 739
                                           ; SOURCE LINE # 740
0000 900000      E     MOV     DPTR,#SPIID
0003 E0                MOVX    A,@DPTR
0004 B4BF13            CJNE    A,#0BFH,?C0138
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 742
0007 900000      E     MOV     DPTR,#SSTDeviceID
000A E0                MOVX    A,@DPTR
000B B40106            CJNE    A,#01H,?C0139
                                           ; SOURCE LINE # 743
                                           ; SOURCE LINE # 744
000E 7E00        R     MOV     R6,#HIGH Old_SST_SPI_Write_256Bytes
0010 7F00        R     MOV     R7,#LOW Old_SST_SPI_Write_256Bytes
                                           ; SOURCE LINE # 745
0012 800A              SJMP    ?C0180
0014         ?C0139:
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 748
0014 7E00        R     MOV     R6,#HIGH SST_SPI_Write_256Bytes
0016 7F00        R     MOV     R7,#LOW SST_SPI_Write_256Bytes
0018         ?C0179:
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 750
0018 8004              SJMP    ?C0180
001A         ?C0138:
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 753
001A 7E00        R     MOV     R6,#HIGH Other_SPI_Write_256Bytes
001C 7F00        R     MOV     R7,#LOW Other_SPI_Write_256Bytes
001E         ?C0180:
001E 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 754
                                           ; SOURCE LINE # 755
0021         ?C0142:
0021 22                RET     
             ; FUNCTION SPI_Write_256Bytes (END)

             ; FUNCTION SPI_Read_256Bytes (BEGIN)
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 764
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 765
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 767
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 768
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 48  

                                           ; SOURCE LINE # 769
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 770
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0143:
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0143
                                           ; SOURCE LINE # 774
                                           ; SOURCE LINE # 775
                                           ; SOURCE LINE # 776
                                           ; SOURCE LINE # 777
002F         ?C0144:
                                           ; SOURCE LINE # 779
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 780
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 781
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 782
0040 900000      E     MOV     DPTR,#ECINDDR
0043 740B              MOV     A,#0BH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 784
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 785
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 786
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 787
005E E4                CLR     A
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 789
0060 900000      E     MOV     DPTR,#SPIIndex
0063 F0                MOVX    @DPTR,A
0064         ?C0148:
                                           ; SOURCE LINE # 791
                                           ; SOURCE LINE # 792
0064 900000      E     MOV     DPTR,#ECINDDR
0067 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 49  

0068 FF                MOV     R7,A
0069 900000      E     MOV     DPTR,#SPIDataPointer
006C E0                MOVX    A,@DPTR
006D FC                MOV     R4,A
006E A3                INC     DPTR
006F E0                MOVX    A,@DPTR
0070 F582              MOV     DPL,A
0072 8C83              MOV     DPH,R4
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 793
0076 900000      E     MOV     DPTR,#SPIIndex
0079 E0                MOVX    A,@DPTR
007A 04                INC     A
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 794
007C 90009C            MOV     DPTR,#09CH
007F E0                MOVX    A,@DPTR
0080 04                INC     A
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 795
0082 900000      E     MOV     DPTR,#SPIIndex
0085 E0                MOVX    A,@DPTR
0086 70DC              JNZ     ?C0148
                                           ; SOURCE LINE # 797
0088 900000      E     MOV     DPTR,#ECINDAR1
008B 74FE              MOV     A,#0FEH
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 798
008E 900000      E     MOV     DPTR,#ECINDDR
0091 04                INC     A
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 799
0093 900000      E     MOV     DPTR,#ECINDAR1
0096 74FD              MOV     A,#0FDH
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 800
0099 900000      E     MOV     DPTR,#ECINDDR
009C 7405              MOV     A,#05H
009E F0                MOVX    @DPTR,A
009F         ?C0149:
                                           ; SOURCE LINE # 801
                                           ; SOURCE LINE # 802
                                           ; SOURCE LINE # 803
009F 900000      E     MOV     DPTR,#ECINDDR
00A2 E0                MOVX    A,@DPTR
00A3 20E0F9            JB      ACC.0,?C0149
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
                                           ; SOURCE LINE # 807
00A6         ?C0150:
                                           ; SOURCE LINE # 809
00A6 900000      E     MOV     DPTR,#ECINDAR3
00A9 7440              MOV     A,#040H
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 810
00AC E4                CLR     A
00AD 900000      E     MOV     DPTR,#ECINDAR2
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 811
00B1 22                RET     
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 50  

             ; FUNCTION SPI_Read_256Bytes (END)

             ; FUNCTION _LoadSPIFucnToRam (BEGIN)
                                           ; SOURCE LINE # 816
;---- Variable 'funcpoint' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 817
                                           ; SOURCE LINE # 818
0000 7800        E     MOV     R0,#LOW Tmp_XPntr
0002 7606              MOV     @R0,#06H
0004 08                INC     R0
0005 7600              MOV     @R0,#00H
                                           ; SOURCE LINE # 819
0007 8E00        E     MOV     Tmp_code_pointer,R6
0009 8F00        E     MOV     Tmp_code_pointer+01H,R7
                                           ; SOURCE LINE # 821
000B E4                CLR     A
000C F500        E     MOV     ITempB01,A
000E         ?C0155:
                                           ; SOURCE LINE # 823
                                           ; SOURCE LINE # 824
000E 850082      E     MOV     DPL,Tmp_code_pointer+01H
0011 850083      E     MOV     DPH,Tmp_code_pointer
0014 E4                CLR     A
0015 93                MOVC    A,@A+DPTR
0016 FF                MOV     R7,A
0017 7800        E     MOV     R0,#LOW Tmp_XPntr
0019 E6                MOV     A,@R0
001A FC                MOV     R4,A
001B 08                INC     R0
001C E6                MOV     A,@R0
001D F582              MOV     DPL,A
001F 8C83              MOV     DPH,R4
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 825
0023 06                INC     @R0
0024 E6                MOV     A,@R0
0025 18                DEC     R0
0026 7001              JNZ     ?C0171
0028 06                INC     @R0
0029         ?C0171:
                                           ; SOURCE LINE # 826
0029 0500        E     INC     Tmp_code_pointer+01H
002B E500        E     MOV     A,Tmp_code_pointer+01H
002D 7002              JNZ     ?C0172
002F 0500        E     INC     Tmp_code_pointer
0031         ?C0172:
                                           ; SOURCE LINE # 827
0031 0500        E     INC     ITempB01
                                           ; SOURCE LINE # 828
0033 E500        E     MOV     A,ITempB01
0035 70D7              JNZ     ?C0155
                                           ; SOURCE LINE # 829
0037 22                RET     
             ; FUNCTION _LoadSPIFucnToRam (END)

             ; FUNCTION ITE_Flash_Utility (BEGIN)
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 836
                                           ; SOURCE LINE # 837
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 838
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 51  

0003 7E00        R     MOV     R6,#HIGH FlashECCode
0005 7F00        R     MOV     R7,#LOW FlashECCode
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 839
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 840
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 841
0014 22                RET     
             ; FUNCTION ITE_Flash_Utility (END)

             ; FUNCTION ITE_Flash_Utility_WINF (BEGIN)
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 852
0000 120000      E     LCALL   DisableInternalWDT
                                           ; SOURCE LINE # 855
0003 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 856
0006 7800        E     MOV     R0,#LOW Tmp_XPntr
0008 7607              MOV     @R0,#07H
000A 08                INC     R0
000B 7600              MOV     @R0,#00H
                                           ; SOURCE LINE # 857
000D 750000      R     MOV     Tmp_code_pointer,#HIGH FlashECCodeWinF
0010 750000      R     MOV     Tmp_code_pointer+01H,#LOW FlashECCodeWinF
                                           ; SOURCE LINE # 858
0013 E4                CLR     A
0014 F500        E     MOV     ITempB01,A
0016         ?C0160:
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 861
0016 850082      E     MOV     DPL,Tmp_code_pointer+01H
0019 850083      E     MOV     DPH,Tmp_code_pointer
001C E4                CLR     A
001D 93                MOVC    A,@A+DPTR
001E FF                MOV     R7,A
001F 7800        E     MOV     R0,#LOW Tmp_XPntr
0021 E6                MOV     A,@R0
0022 FC                MOV     R4,A
0023 08                INC     R0
0024 E6                MOV     A,@R0
0025 F582              MOV     DPL,A
0027 8C83              MOV     DPH,R4
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 862
002B 06                INC     @R0
002C E6                MOV     A,@R0
002D 18                DEC     R0
002E 7001              JNZ     ?C0173
0030 06                INC     @R0
0031         ?C0173:
                                           ; SOURCE LINE # 863
0031 0500        E     INC     Tmp_code_pointer+01H
0033 E500        E     MOV     A,Tmp_code_pointer+01H
0035 7002              JNZ     ?C0174
0037 0500        E     INC     Tmp_code_pointer
0039         ?C0174:
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 52  

                                           ; SOURCE LINE # 864
0039 0500        E     INC     ITempB01
                                           ; SOURCE LINE # 865
003B E500        E     MOV     A,ITempB01
003D 70D7              JNZ     ?C0160
                                           ; SOURCE LINE # 866
003F 900000      E     MOV     DPTR,#FBCFG
0042 E0                MOVX    A,@DPTR
0043 4480              ORL     A,#080H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 867
0046 00                NOP     
                                           ; SOURCE LINE # 868
0047 00                NOP     
                                           ; SOURCE LINE # 869
0048 00                NOP     
                                           ; SOURCE LINE # 870
0049 00                NOP     
                                           ; SOURCE LINE # 871
004A 00                NOP     
                                           ; SOURCE LINE # 872
004B 00                NOP     
                                           ; SOURCE LINE # 873
004C 00                NOP     
                                           ; SOURCE LINE # 874
004D 00                NOP     
                                           ; SOURCE LINE # 875
004E 120000      R     LCALL   FlashECCodeWinF
                                           ; SOURCE LINE # 876
0051 22                RET     
             ; FUNCTION ITE_Flash_Utility_WINF (END)

             ; FUNCTION _Do_SPI_Write_Status (BEGIN)
                                           ; SOURCE LINE # 882
;---- Variable 'statusvalue' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 883
                                           ; SOURCE LINE # 884
0000 900000      E     MOV     DPTR,#SPIWriteStatus
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 886
0005 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 887
0008 7E00        R     MOV     R6,#HIGH SPI_Write_Status
000A 7F00        R     MOV     R7,#LOW SPI_Write_Status
000C 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 888
000F 900000      E     MOV     DPTR,#FBCFG
0012 E0                MOVX    A,@DPTR
0013 4480              ORL     A,#080H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 889
0016 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 890
0019 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 891
001C 900000      E     MOV     DPTR,#FBCFG
001F E0                MOVX    A,@DPTR
0020 547F              ANL     A,#07FH
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 892
0023 22                RET     
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 53  

             ; FUNCTION _Do_SPI_Write_Status (END)

             ; FUNCTION Do_SPI_Read_Status (BEGIN)
                                           ; SOURCE LINE # 899
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 901
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 902
0003 7E00        R     MOV     R6,#HIGH SPI_Read_Status
0005 7F00        R     MOV     R7,#LOW SPI_Read_Status
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 903
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 904
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 905
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 906
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 907
001E 22                RET     
             ; FUNCTION Do_SPI_Read_Status (END)

             ; FUNCTION Do_SPI_Read_ID (BEGIN)
                                           ; SOURCE LINE # 914
                                           ; SOURCE LINE # 915
                                           ; SOURCE LINE # 916
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 917
0003 7E00        R     MOV     R6,#HIGH SPI_Read_ID
0005 7F00        R     MOV     R7,#LOW SPI_Read_ID
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 918
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 919
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 920
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 921
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 922
001E 22                RET     
             ; FUNCTION Do_SPI_Read_ID (END)

             ; FUNCTION Do_SPI_Read_ID_CmdAB (BEGIN)
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 930
                                           ; SOURCE LINE # 931
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 932
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 54  

0003 7E00        R     MOV     R6,#HIGH SPI_Read_ID_CmdAB
0005 7F00        R     MOV     R7,#LOW SPI_Read_ID_CmdAB
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 933
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 934
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 935
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 936
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 937
001E 22                RET     
             ; FUNCTION Do_SPI_Read_ID_CmdAB (END)

             ; FUNCTION _Do_SPI_Erase (BEGIN)
                                           ; SOURCE LINE # 948
;---- Variable 'EraseCmd' assigned to Register 'R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 950
0000 900000      E     MOV     DPTR,#SPIAEraseCmd
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 951
0005 900000      E     MOV     DPTR,#SPIAddrCycle
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 952
000A A3                INC     DPTR
000B EB                MOV     A,R3
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 953
000D 900000      R     MOV     DPTR,#Addr0
0010 E0                MOVX    A,@DPTR
0011 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 955
0015 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 956
0018 7E00        R     MOV     R6,#HIGH SPI_Erase
001A 7F00        R     MOV     R7,#LOW SPI_Erase
001C 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 957
001F 900000      E     MOV     DPTR,#FBCFG
0022 E0                MOVX    A,@DPTR
0023 4480              ORL     A,#080H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 958
0026 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 959
0029 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 960
002C 900000      E     MOV     DPTR,#FBCFG
002F E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 55  

0030 547F              ANL     A,#07FH
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 961
0033 22                RET     
             ; FUNCTION _Do_SPI_Erase (END)

             ; FUNCTION _Do_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 971
;---- Variable 'DataPointer' assigned to Register 'R6/R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 973
0000 900000      E     MOV     DPTR,#SPIDataPointer
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 974
0008 900000      E     MOV     DPTR,#SPIAddrCycle
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 975
000D A3                INC     DPTR
000E EB                MOV     A,R3
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 976
0010 900000      R     MOV     DPTR,#Addr0
0013 E0                MOVX    A,@DPTR
0014 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 978
0018 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 979
001B 120000      R     LCALL   SPI_Write_256Bytes
                                           ; SOURCE LINE # 980
001E 900000      E     MOV     DPTR,#FBCFG
0021 E0                MOVX    A,@DPTR
0022 4480              ORL     A,#080H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 981
0025 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 982
0028 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 983
002B 900000      E     MOV     DPTR,#FBCFG
002E E0                MOVX    A,@DPTR
002F 547F              ANL     A,#07FH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 984
0032 22                RET     
             ; FUNCTION _Do_SPI_Write_256Bytes (END)

             ; FUNCTION _Do_SPI_Read_256Bytes (BEGIN)
                                           ; SOURCE LINE # 994
;---- Variable 'DataPointer' assigned to Register 'R6/R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 995
                                           ; SOURCE LINE # 996
0000 900000      E     MOV     DPTR,#SPIDataPointer
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 56  

0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 997
0008 900000      E     MOV     DPTR,#SPIAddrCycle
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 998
000D A3                INC     DPTR
000E EB                MOV     A,R3
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 999
0010 900000      R     MOV     DPTR,#Addr0
0013 E0                MOVX    A,@DPTR
0014 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1001
0018 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 1002
001B 7E00        R     MOV     R6,#HIGH SPI_Read_256Bytes
001D 7F00        R     MOV     R7,#LOW SPI_Read_256Bytes
001F 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 1003
0022 900000      E     MOV     DPTR,#FBCFG
0025 E0                MOVX    A,@DPTR
0026 4480              ORL     A,#080H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1004
0029 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 1005
002C 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 1006
002F 900000      E     MOV     DPTR,#FBCFG
0032 E0                MOVX    A,@DPTR
0033 547F              ANL     A,#07FH
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1007
0036 22                RET     
             ; FUNCTION _Do_SPI_Read_256Bytes (END)

             ; FUNCTION Do_SPI_Write_Enable (BEGIN)
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 1016
0003 7E00        R     MOV     R6,#HIGH SPI_Write_Enable
0005 7F00        R     MOV     R7,#LOW SPI_Write_Enable
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 1017
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1018
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 1019
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 1020
0017 900000      E     MOV     DPTR,#FBCFG
C51 COMPILER V8.12   CORE_FLASH                                                            07/28/2018 12:03:37 PAGE 57  

001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1021
001E 22                RET     
             ; FUNCTION Do_SPI_Write_Enable (END)

             ; FUNCTION Do_SPI_Write_Disable (BEGIN)
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1028
                                           ; SOURCE LINE # 1029
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 1030
0003 7E00        R     MOV     R6,#HIGH SPI_Write_Disable
0005 7F00        R     MOV     R7,#LOW SPI_Write_Disable
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 1031
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1032
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 1033
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 1034
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1035
001E 22                RET     
             ; FUNCTION Do_SPI_Write_Disable (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2831    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
