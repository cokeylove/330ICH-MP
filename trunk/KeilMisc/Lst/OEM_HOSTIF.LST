C51 COMPILER V8.12   OEM_HOSTIF                                                            07/28/2018 12:03:51 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE OEM_HOSTIF
OBJECT MODULE PLACED IN Code\Oem\OEM_HOSTIF.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\Oem\OEM_HOSTIF.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\
                    -INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: OEM_HOSTIF.C
   3           *
   4           * Author : Dino
   5           *
   6           * Note : These functions are reference only.
   7           *        Please follow your project software specification to do some modification.
   8           *---------------------------------------------------------------------------*/
   9          
  10          #include <CORE_INCLUDE.H>
  11          #include <OEM_INCLUDE.H>
  12          
  13          //-----------------------------------------------------------------------------
  14          // put data to PM1 port
  15          //-----------------------------------------------------------------------------
  16          void Data_To_PM1(BYTE data_byte)
  17          {
  18   1              PM1DO = data_byte;
  19   1      }
  20          
  21          //-----------------------------------------------------------------------------
  22          // put PM1 port data to buffer
  23          //-----------------------------------------------------------------------------
  24          void PM1_DataPending(BYTE nPending)
  25          {
  26   1          if( PM1PendingRXCount > 6 )  return;
  27   1      
  28   1          PM1DataPending[PM1PendingRXCount] = nPending;
  29   1          PM1PendingRXCount++;
  30   1          SetServiceSendFlag();
  31   1      }
  32          
  33          //-----------------------------------------------------------------------------
  34          // get PM1 port data from buffer
  35          //-----------------------------------------------------------------------------
  36          BYTE GetPM1_PendingData(void)
  37          {
  38   1              ITempB03 = PM1DataPending[(PM1PendingTXCount&0x07)];
  39   1              PM1PendingTXCount++;
  40   1              if( PM1PendingTXCount >= PM1PendingRXCount ) {
  41   2                      PM1PendingTXCount = 0;
  42   2                      PM1PendingRXCount = 0;
  43   2              }
  44   1              return ITempB03;
  45   1      }
  46          
  47          //-----------------------------------------------------------------------------
  48          // put data to PM2 port
  49          //-----------------------------------------------------------------------------
  50          void Data_To_PM2(BYTE data_byte)
  51          {
  52   1              PM2DO = data_byte;
  53   1      }
  54          
C51 COMPILER V8.12   OEM_HOSTIF                                                            07/28/2018 12:03:51 PAGE 2   

  55          //-----------------------------------------------------------------------------
  56          // put PM2 port data to buffer
  57          //-----------------------------------------------------------------------------
  58          void PM2_DataPending(BYTE nPending)
  59          {
  60   1          if( PM2PendingRXCount > 6 )  return;
  61   1      
  62   1          PM2DataPending[PM2PendingRXCount] = nPending;
  63   1          PM2PendingRXCount++;
  64   1          SetServiceSendFlag();
  65   1      }
  66          
  67          //-----------------------------------------------------------------------------
  68          // get PM2 port data from buffer
  69          //-----------------------------------------------------------------------------
  70          BYTE GetPM2_PendingData(void)
  71          {
  72   1              ITempB03 = PM2DataPending[(PM2PendingTXCount&0x07)];
  73   1              PM2PendingTXCount++;
  74   1              if( PM2PendingTXCount >= PM2PendingRXCount ) {
  75   2                      PM2PendingTXCount = 0;
  76   2                      PM2PendingRXCount = 0;
  77   2              }
  78   1              return ITempB03;
  79   1      }
  80          
  81          const BYTE code initsio_table[]=
  82          {
  83                                          // Configure and Enable Logical Device 06h(KBD)
  84                  0x07 ,0x06,     // Select Logical Device 06h(KBD)
  85                  0x70 ,0x01,     // Set IRQ=01h for Logical Device 06h(KBD)
  86                  0x30 ,0x01,     // Enable Logical Device 06h(Mouse)
  87                                          // Configure and Enable Logical Device 05h(Mouse)
  88                  0x07 ,0x05,     // Select Logical Device 05h(Mouse)
  89                  0x70 ,0x0C,     // Set IRQ=0Ch for Logical Device 05h(Mouse)
  90                  0x30 ,0x01,     // Enable Logical Device 05h(Mouse)
  91                                          // Enable Logical Device 11h(PM1)
  92                  0x07 ,0x11,     // Select Logical Device 11h(PM1)
  93                  0x70 ,0x00,     // Clear IRQ=0 for  Logical Device 11h(PM1)
  94                  0x30 ,0x01,     // Enable Logical Device 11h(PM1)
  95                                          // Enable Logical Device 12h(PM2)
  96                  0x07 ,0x12,     // Select Logical Device 12h(PM2)
  97                  0x70 ,0x00,     // Clear IRQ=0 for  Logical Device 12h(PM2)
  98                  0x30 ,0x01,     // Enable Logical Device 12h(PM2)
  99                                          // Enable Logical Device 04h(MSWC)
 100                  0x07 ,0x04,     // Logical Device 04h(MSWC)
 101                  0x30 ,0x01,     // Enable MSWC 
 102           
 103                  //0x07 ,0x10, // Logical Device 10h(BRAM)
 104                  //0x62 ,0x05,
 105                  //0x63 ,0x00, // BRAMLD address is 0x500ndex) and 0x501ata) 
 106                  //0xF3 ,0x3F,  // msmart test
 107                  //0x30 ,0x01, // Enable BRAM
 108                  
 109                  0x07, 0x10, // Logical Device 10h(BRAM)
 110                  0x60, 0x00, // I/O Base Address 700h  Bank0
 111                  0x61, 0x6A, // I/O Base Address 700h
 112                  //0x62, 0x07, // I/O Base Address 702h  Bank1
 113                  //0x63, 0x02, // I/O Base Address 702h
 114                  0xF3 ,0x3F, // msmart test
 115                  0xF4 ,0x3F, // msmart test
 116                  0x70, 0x00, // Set Without IRQ
C51 COMPILER V8.12   OEM_HOSTIF                                                            07/28/2018 12:03:51 PAGE 3   

 117                  0x30, 0x01, // Enable BRAM
 118          
 119                  0x07 ,0x0F,     // Logical Device 0Fh(Shared Memory)
 120                  0x60 ,0x02, // Set Base address 200h
 121                  0x61 ,0x00, 
 122          
 123                                          // Define EC internal RAM base address on LPC memory space.
 124                  0xF5 ,0x00, // H2RAM-HLPC Base Address Bits [15:12] (HLPCRAMBA[15:12]) high nibble
 125                  0xF6 ,0x00, // H2RAM-HLPC Base Address Bits [23:16] (HLPCRAMBA[23:16])
 126          
 127                  0x30 ,0x01,     // MSWC Shared Memory
 128          
 129              0x07 ,0x17, // Select Logical Device 17h(PM3)
 130                  0x62 ,0x00, // IO Port 6A4              
 131                  0x63 ,0x6C, //
 132                  0x60 ,0x00, // IO Port 6A0              
 133                  0x61 ,0x68, //
 134                  0x30 ,0x01,     // Enable Logical Device 17h(PM3)
 135          };
 136          //----------------------------------------------------------------------------
 137          // Init super IO function
 138          //----------------------------------------------------------------------------
 139          void InitSio(void)
 140          {
 141   1          BYTE code * data_pntr;
 142   1          BYTE cnt;
 143   1      
 144   1              SET_MASK(LSIOHA,LKCFG);
 145   1              SET_MASK(IBMAE,CFGAE);
 146   1              SET_MASK(IBCTL,CSAE);
 147   1      
 148   1          cnt=0;
 149   1          data_pntr=initsio_table;
 150   1          while(cnt < (sizeof(initsio_table)/2) )
 151   1          {
 152   2              IHIOA=0;              // Set indirect Host I/O Address
 153   2              IHD=*data_pntr;
 154   2              while( IS_MASK_SET(IBCTL,CWIB));
 155   2              data_pntr ++;
 156   2      
 157   2              IHIOA=1;              // Set indirect Host I/O Address
 158   2              IHD=*data_pntr;
 159   2              while( IS_MASK_SET(IBCTL,CWIB));
 160   2              data_pntr ++;
 161   2              cnt ++;
 162   2          }
 163   1      
 164   1              CLEAR_MASK(LSIOHA,LKCFG);
 165   1              CLEAR_MASK(IBMAE,CFGAE);
 166   1              CLEAR_MASK(IBCTL,CSAE);
 167   1      }
 168          
 169          //----------------------------------------------------------------------------
 170          // Init system memory cycle to EC external ram 
 171          //----------------------------------------------------------------------------
 172          void InitSysMemory2ECRam(void)
 173          {
 174   1              HRAMW0BA = 0x00;                                        // Define RAM window 0 base address 0x000
 175   1              HRAMW0AAS |= HostRamSize2048Byte;       // Host RAM Window 0 Size 2K bytes
 176   1              //HRAMWC |= Window0En;
 177   1              HRAMW1BA = 0x80;                                        // Define RAM window 1 base address 0x800
 178   1              HRAMW1AAS |= HostRamSize2048Byte;       // Host RAM Window 1 Size 2K bytes
C51 COMPILER V8.12   OEM_HOSTIF                                                            07/28/2018 12:03:51 PAGE 4   

 179   1              HRAMWC = 0x03;                                          // open two windows
 180   1      }
 181          
C51 COMPILER V8.12   OEM_HOSTIF                                                            07/28/2018 12:03:51 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0015 (BEGIN)
0000         L?0022:
0000 2400        E     ADD     A,#LOW PM1DataPending
0002 F582              MOV     DPL,A
0004 E4                CLR     A
0005 3400        E     ADDC    A,#HIGH PM1DataPending
0007 F583              MOV     DPH,A
0009 22                RET     
000A         L?0023:
000A 2400        E     ADD     A,#LOW PM2DataPending
000C F582              MOV     DPL,A
000E E4                CLR     A
000F 3400        E     ADDC    A,#HIGH PM2DataPending
0011 F583              MOV     DPH,A
0013 22                RET     
             ; FUNCTION Com0015 (END)

             ; FUNCTION _Data_To_PM1 (BEGIN)
                                           ; SOURCE LINE # 16
;---- Variable 'data_byte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 18
0000 900000      E     MOV     DPTR,#PM1DO
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 19
0005 22                RET     
             ; FUNCTION _Data_To_PM1 (END)

             ; FUNCTION _PM1_DataPending (BEGIN)
                                           ; SOURCE LINE # 24
;---- Variable 'nPending' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
0000 900000      E     MOV     DPTR,#PM1PendingRXCount
0003 E0                MOVX    A,@DPTR
0004 D3                SETB    C
0005 9406              SUBB    A,#06H
0007 5012              JNC     ?C0003
0009         ?C0002:
                                           ; SOURCE LINE # 28
0009 900000      E     MOV     DPTR,#PM1PendingRXCount
000C E0                MOVX    A,@DPTR
000D 120000      R     LCALL   L?0022
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 29
0012 900000      E     MOV     DPTR,#PM1PendingRXCount
0015 E0                MOVX    A,@DPTR
0016 04                INC     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 30
0018 120000      E     LCALL   SetServiceSendFlag
                                           ; SOURCE LINE # 31
001B         ?C0003:
001B 22                RET     
             ; FUNCTION _PM1_DataPending (END)

             ; FUNCTION GetPM1_PendingData (BEGIN)
C51 COMPILER V8.12   OEM_HOSTIF                                                            07/28/2018 12:03:51 PAGE 6   

                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 38
0000 900000      E     MOV     DPTR,#PM1PendingTXCount
0003 E0                MOVX    A,@DPTR
0004 5407              ANL     A,#07H
0006 120000      R     LCALL   L?0022
0009 E0                MOVX    A,@DPTR
000A F500        E     MOV     ITempB03,A
                                           ; SOURCE LINE # 39
000C 900000      E     MOV     DPTR,#PM1PendingTXCount
000F E0                MOVX    A,@DPTR
0010 04                INC     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 40
0012 900000      E     MOV     DPTR,#PM1PendingRXCount
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 900000      E     MOV     DPTR,#PM1PendingTXCount
001A E0                MOVX    A,@DPTR
001B C3                CLR     C
001C 9F                SUBB    A,R7
001D 4006              JC      ?C0004
                                           ; SOURCE LINE # 41
001F E4                CLR     A
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 42
0021 900000      E     MOV     DPTR,#PM1PendingRXCount
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 43
0025         ?C0004:
                                           ; SOURCE LINE # 44
0025 AF00        E     MOV     R7,ITempB03
                                           ; SOURCE LINE # 45
0027         ?C0005:
0027 22                RET     
             ; FUNCTION GetPM1_PendingData (END)

             ; FUNCTION _Data_To_PM2 (BEGIN)
                                           ; SOURCE LINE # 50
;---- Variable 'data_byte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
0000 900000      E     MOV     DPTR,#PM2DO
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 53
0005 22                RET     
             ; FUNCTION _Data_To_PM2 (END)

             ; FUNCTION _PM2_DataPending (BEGIN)
                                           ; SOURCE LINE # 58
;---- Variable 'nPending' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
0000 900000      E     MOV     DPTR,#PM2PendingRXCount
0003 E0                MOVX    A,@DPTR
0004 D3                SETB    C
0005 9406              SUBB    A,#06H
0007 5012              JNC     ?C0008
0009         ?C0007:
                                           ; SOURCE LINE # 62
C51 COMPILER V8.12   OEM_HOSTIF                                                            07/28/2018 12:03:51 PAGE 7   

0009 900000      E     MOV     DPTR,#PM2PendingRXCount
000C E0                MOVX    A,@DPTR
000D 120000      R     LCALL   L?0023
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
0012 900000      E     MOV     DPTR,#PM2PendingRXCount
0015 E0                MOVX    A,@DPTR
0016 04                INC     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 64
0018 120000      E     LCALL   SetServiceSendFlag
                                           ; SOURCE LINE # 65
001B         ?C0008:
001B 22                RET     
             ; FUNCTION _PM2_DataPending (END)

             ; FUNCTION GetPM2_PendingData (BEGIN)
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
0000 900000      E     MOV     DPTR,#PM2PendingTXCount
0003 E0                MOVX    A,@DPTR
0004 5407              ANL     A,#07H
0006 120000      R     LCALL   L?0023
0009 E0                MOVX    A,@DPTR
000A F500        E     MOV     ITempB03,A
                                           ; SOURCE LINE # 73
000C 900000      E     MOV     DPTR,#PM2PendingTXCount
000F E0                MOVX    A,@DPTR
0010 04                INC     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
0012 900000      E     MOV     DPTR,#PM2PendingRXCount
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 900000      E     MOV     DPTR,#PM2PendingTXCount
001A E0                MOVX    A,@DPTR
001B C3                CLR     C
001C 9F                SUBB    A,R7
001D 4006              JC      ?C0009
                                           ; SOURCE LINE # 75
001F E4                CLR     A
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
0021 900000      E     MOV     DPTR,#PM2PendingRXCount
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0025         ?C0009:
                                           ; SOURCE LINE # 78
0025 AF00        E     MOV     R7,ITempB03
                                           ; SOURCE LINE # 79
0027         ?C0010:
0027 22                RET     
             ; FUNCTION GetPM2_PendingData (END)

             ; FUNCTION InitSio (BEGIN)
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 144
0000 900000      E     MOV     DPTR,#LSIOHA
0003 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   OEM_HOSTIF                                                            07/28/2018 12:03:51 PAGE 8   

0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
0007 900000      E     MOV     DPTR,#IBMAE
000A E0                MOVX    A,@DPTR
000B 4401              ORL     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
000E 900000      E     MOV     DPTR,#IBCTL
0011 E0                MOVX    A,@DPTR
0012 4401              ORL     A,#01H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
;---- Variable 'cnt' assigned to Register 'R7' ----
0015 E4                CLR     A
0016 FF                MOV     R7,A
                                           ; SOURCE LINE # 149
0017 7C00        R     MOV     R4,#HIGH initsio_table
0019 7D00        R     MOV     R5,#LOW initsio_table
;---- Variable 'data_pntr' assigned to Register 'R4/R5' ----
001B         ?C0011:
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
001B E4                CLR     A
001C 900000      E     MOV     DPTR,#IHIOA
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
0020 8D82              MOV     DPL,R5
0022 8C83              MOV     DPH,R4
0024 93                MOVC    A,@A+DPTR
0025 900000      E     MOV     DPTR,#IHD
0028 F0                MOVX    @DPTR,A
0029         ?C0013:
                                           ; SOURCE LINE # 154
0029 900000      E     MOV     DPTR,#IBCTL
002C E0                MOVX    A,@DPTR
002D 20E2F9            JB      ACC.2,?C0013
0030         ?C0014:
                                           ; SOURCE LINE # 155
0030 0D                INC     R5
0031 BD0001            CJNE    R5,#00H,?C0019
0034 0C                INC     R4
0035         ?C0019:
                                           ; SOURCE LINE # 157
0035 900000      E     MOV     DPTR,#IHIOA
0038 7401              MOV     A,#01H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
003B 8D82              MOV     DPL,R5
003D 8C83              MOV     DPH,R4
003F E4                CLR     A
0040 93                MOVC    A,@A+DPTR
0041 900000      E     MOV     DPTR,#IHD
0044 F0                MOVX    @DPTR,A
0045         ?C0015:
                                           ; SOURCE LINE # 159
0045 900000      E     MOV     DPTR,#IBCTL
0048 E0                MOVX    A,@DPTR
0049 20E2F9            JB      ACC.2,?C0015
004C         ?C0016:
                                           ; SOURCE LINE # 160
C51 COMPILER V8.12   OEM_HOSTIF                                                            07/28/2018 12:03:51 PAGE 9   

004C 0D                INC     R5
004D BD0001            CJNE    R5,#00H,?C0020
0050 0C                INC     R4
0051         ?C0020:
                                           ; SOURCE LINE # 161
0051 0F                INC     R7
                                           ; SOURCE LINE # 162
0052 EF                MOV     A,R7
0053 B421C5            CJNE    A,#021H,?C0011
0056         ?C0012:
                                           ; SOURCE LINE # 164
0056 900000      E     MOV     DPTR,#LSIOHA
0059 E0                MOVX    A,@DPTR
005A 54FE              ANL     A,#0FEH
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
005D 900000      E     MOV     DPTR,#IBMAE
0060 E0                MOVX    A,@DPTR
0061 54FE              ANL     A,#0FEH
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
0064 900000      E     MOV     DPTR,#IBCTL
0067 E0                MOVX    A,@DPTR
0068 54FE              ANL     A,#0FEH
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
006B 22                RET     
             ; FUNCTION InitSio (END)

             ; FUNCTION InitSysMemory2ECRam (BEGIN)
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#HRAMW0BA
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
0005 900000      E     MOV     DPTR,#HRAMW0AAS
0008 E0                MOVX    A,@DPTR
0009 4407              ORL     A,#07H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
000C 900000      E     MOV     DPTR,#HRAMW1BA
000F 7480              MOV     A,#080H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
0012 900000      E     MOV     DPTR,#HRAMW1AAS
0015 E0                MOVX    A,@DPTR
0016 4407              ORL     A,#07H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0019 900000      E     MOV     DPTR,#HRAMWC
001C 7403              MOV     A,#03H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
001F 22                RET     
             ; FUNCTION InitSysMemory2ECRam (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    308    ----
C51 COMPILER V8.12   OEM_HOSTIF                                                            07/28/2018 12:03:51 PAGE 10  

   CONSTANT SIZE    =     66    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
