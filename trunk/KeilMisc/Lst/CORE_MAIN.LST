C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE CORE_MAIN
OBJECT MODULE PLACED IN Code\CORE\CORE_MAIN.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\CORE\CORE_MAIN.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\
                    -INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_MAIN.C - Main Program for KBC firmware.
   3           *
   4           * Main processing loop (interrupt driven) for the keyboard controller/scanner.
   5           *
   6           * Copyright (c) 1983-2007, Insyde Software Corporation. All Rights Reserved.
   7           *
   8           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
   9           * transmit, broadcast, present, recite, release, license or otherwise exploit
  10           * any part of this publication in any form, by any means, without the prior
  11           * written permission of Insyde Software Corporation.
  12           *---------------------------------------------------------------------------*/
  13          
  14          #include <CORE_INCLUDE.H>
  15          #include <OEM_INCLUDE.H>
  16          
  17          /* ----------------------------------------------------------------------------
  18           *  FUNCTION: main - Main service loop.
  19           *
  20           *  Wait in idle state until an IRQ causes an exit from idle.  If the IRQ
  21           *  handler posted a service request (via bSERVICE) then dispatch control to
  22           *  the appropriate service handler.  Otherwise, go back to idle state.  After
  23           *  all service requests have been handled, return to idle state.
  24           * ------------------------------------------------------------------------- */
  25          void main(void)
  26          {
  27   1              DisableAllInterrupt();
  28   1              SP = 0xC0;                                      // Setting stack pointer
  29   1              _nop_();
  30   1          _nop_();
  31   1          _nop_();
  32   1          _nop_();
  33   1          DCache = 0x03;
  34   1             
  35   1          #if Support_Mirror_Code
  36   1              /*  
  37   1              if(((WinFlashMark == 0x53) && (WinFlashMark2 == 0x35) )||((WinFlashMark == 0x33) && (WinFlashMark2 =
             -= 0x88))) //T11L+
  38   1              {
  39   1              }
  40   1              else 
  41   1              {
  42   1              Check_Mirror_Occurs(); //T11B+
  43   1              if(Read_Eflash_Byte(0x00, 0x00, 0x4D) != 00)
  44   1              {
  45   1                              //T11B- Do_Eflash_Write_1Byte(0x00, 0x40, 0x00, 0x4D);
  46   1                              Do_Eflash_Write_1Byte(0x00, 0x00, 0x00, 0x4D);  //T11B+ 
  47   1              }
  48   1              }  
  49   1              */    
  50   1          #endif
  51   1              CLEAR_MASK(RAM_16FF,BIT0);      // for AX
  52   1      
  53   1              if(Hook_ECRetunrMainFuncKeepCondition()==0x33)  // Exit from follow mode or EC scatch ROM
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 2   

  54   1              {
  55   2                      CLEAR_MASK(FBCFG,SSMC); // disable scatch ROM
  56   2                      _nop_();
  57   2                  MPRECF = 0x01;
  58   2                  _nop_();
  59   2                  MPRECF = 0x01;
  60   2                  _nop_();
  61   2                  MPRECF = 0x01;
  62   2                  _nop_();
  63   2                  MPRECF = 0x01;
  64   2                  _nop_();
  65   2                  _nop_();
  66   2              WinFlashMark = 0xFC;
  67   2                      WinFlashMark1=0x55;             //G21: Add WinFlashMark1 check
  68   2              WinFlashMark2 = 0x00;
  69   2              ResetBANKDATA();        // init bank mechanism to code bank 0
  70   2              Hook_ECExitFollowMode();
  71   2              Init_Timers();
  72   2                  EnableModuleInterrupt();
  73   2                  CheckECCHIPVer();
  74   2              }
  75   1              else
  76   1              {
  77   2                      ECSleepCount = 3;
  78   2                      //ProcessSID(COLDBOOT_ID);
  79   2                      //pLastSID  = COLDBOOT_ID; //ANGELAS089: remove
  80   2              //uMBID = Read_Eflash_Byte(EEPROMA2,(EEPROMA1_B03 | 0x07) ,0xE0);
  81   2      
  82   2                      EEPROM_PwrSts = Read_Eflash_Byte(EEPROMA2,(EEPROMA1_B03 | 0x07),0xDF);
  83   2                      if( (EEPROM_PwrSts & 0x10) != 0 )
  84   2                      {
  85   3                              Core_Init_Regs();
  86   3                              if( CheckCrisisMode() )
  87   3                              { 
  88   4                                  SET_MASK(SYS_MISC1,Crisis_On);
  89   4                                      SET_MASK(SYS_MISC1,BATCRISIS_FLAG);
  90   4                              }
  91   3                              else
  92   3                              { 
  93   4                                  CLR_MASK(SYS_MISC1,Crisis_On); 
  94   4                                      CLR_MASK(SYS_MISC1,BATCRISIS_FLAG); 
  95   4                  }
  96   3                      }
  97   2      
  98   2                      Core_Initialization();
  99   2                      Oem_Initialization();
 100   2              InitEnableInterrupt();
 101   2                      
 102   2              #ifdef UART_Debug
 103   2              Init_UART();
 104   2              printf("\n************************************");
 105   2              printf("\nEC Init OK !!!");
 106   2              printf("\n************************************");
 107   2              #endif
 108   2              }
 109   1              
 110   1              #if !EN_PwrSeqTest
 111   1                      #if WDT_Support
 112   1                      EnableInternalWDT();
 113   1                      #endif
 114   1              #endif
 115   1              
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 3   

 116   1          #if Support_Mirror_Code
 117   1          if(!((WinFlashMark == 0xFC)&&(WinFlashMark2 == 0x00)&&(WinFlashMark1==0x55))) //Add WinFlashMark1 chec
             -k
 118   1          {
 119   2              RamDebug(0x88);
 120   2              Check_Mirror_Occurs(); 
 121   2              if(Read_Eflash_Byte(0x00, 0x00, 0x4D) != 00)
 122   2              {
 123   3                      Do_Eflash_Write_1Byte(0x00, 0x00, 0x00, 0x4D);            
 124   3                      RamDebug(0x66);
 125   3                      FLHCTRL3R |= 0x80;      
 126   3                      HINSTC1 |= 0x40;           
 127   3                  RamDebug(0x77);               
 128   3              }
 129   2          }    
 130   1          #endif
 131   1              ProcessSID(ShutDnCause); //ANGELAS089:add
 132   1              //T11N + e
 133   1              while(1)
 134   1              {
 135   2              if(OEM_SkipMainServiceFunc()==Normal_MainService)
 136   2              {
 137   3                      main_service();
 138   3                      EnableModuleInterrupt();
 139   3                      _nop_();
 140   3                      _nop_();
 141   3                      _nop_();
 142   3                      _nop_();
 143   3          
 144   3          
 145   3              #if TouchPad_only  //Update PS2 code base.
 146   3          
 147   3              #else
                              if(PS2CheckPendingISR()==0x00)
                              {
                              ScanAUXDeviceStep();
                          }
                      #endif
 153   3      
 154   3              #ifdef SMBusServiceCenterFunc
                              if((Service==0x00)&&(Service1==0x00)&&(CheckSMBusNeedService()==SMBus_ClearService))
                      #else
 157   3                  if((Service==0x00)&&(Service1==0x00))
 158   3              #endif
 159   3                  {
 160   4                      if (TH0< Timer_1ms>>8)
 161   4                          TH0 = Timer_1ms>>8;
 162   4                  }
 163   3              }
 164   2              }
 165   1      }
 166          
 167          /* ----------------------------------------------------------------------------
 168           * FUNCTION: main_service - Check for new/more service requests.
 169           *
 170           * Check for a request flag.  The check is done according to priority.  If a
 171           * request flag is set, handle the request and loop back to get the flags
 172           * again.  Do not follow through to check the next flag.  The flags are to be
 173           * checked in order.
 174           * ------------------------------------------------------------------------- */
 175          void main_service(void)
 176          {
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 4   

 177   1          #ifdef SMBusServiceCenterFunc
                  while((Service!=0x00)||(Service1!=0x00)||(CheckSMBusNeedService()==SMBus_NeedService))
                  #else
 180   1          while((Service!=0x00)||(Service1!=0x00))
 181   1          #endif
 182   1          { 
 183   2                      /* //
 184   2                      if( IS_MASK_SET(BATTUPDATEFW, BIT0))
 185   2                      {
 186   2                              if(F_Service_PCI2)
 187   2                              {
 188   2                                      F_Service_PCI2=0;
 189   2                                      service_pci2();
 190   2                                      continue;
 191   2                              }
 192   2                      }
 193   2                      */     
 194   2              //-----------------------------------
 195   2              // Host command/data service
 196   2              //-----------------------------------
 197   2              if(F_Service_PCI)
 198   2              {
 199   3                  F_Service_PCI=0;
 200   3                  service_pci1();
 201   3                  continue;
 202   3              }
 203   2      
 204   2              //-----------------------------------
 205   2              // Service unlock
 206   2              //-----------------------------------
 207   2              if(F_Service_UNLOCK)
 208   2              {
 209   3                  F_Service_UNLOCK=0;
 210   3                  service_unlock();
 211   3                  continue;
 212   3              }
 213   2      
 214   2              //-----------------------------------
 215   2              // Send byte from KBC
 216   2              //-----------------------------------
 217   2              if(F_Service_SEND)
 218   2              {
 219   3                  F_Service_SEND=0;
 220   3                  service_send();
 221   3                  continue;
 222   3              }
 223   2      
 224   2              //-----------------------------------
 225   2              // Send PS2 interface data
 226   2              //-----------------------------------
 227   2              if(F_Service_Send_PS2)
 228   2              {
 229   3                  F_Service_Send_PS2=0;
 230   3                  service_PS2_data();
 231   3                  continue;
 232   3              }
 233   2      
 234   2              //-----------------------------------
 235   2              // process PS2 interface data
 236   2              //-----------------------------------
 237   2              if(F_Service_PS2)
 238   2              {
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 5   

 239   3                  F_Service_PS2=0;
 240   3                  service_ps2();
 241   3                  continue;
 242   3              }
 243   2      
 244   2              //-----------------------------------
 245   2              // process SMBus interface data
 246   2              //-----------------------------------
 247   2              #ifdef SMBusServiceCenterFunc
                      ServiceSMBus();
                      #endif
 250   2             if(F_Service_PCI2)
 251   2              {
 252   3                  F_Service_PCI2=0;
 253   3                  service_pci2();
 254   3                  continue;
 255   3              }
 256   2              //-----------------------------------
 257   2              // 1 millisecond elapsed
 258   2              //-----------------------------------
 259   2              if(F_Service_MS_1)
 260   2              {
 261   3                  F_Service_MS_1=0;
 262   3                  service_1mS();
 263   3                  continue;
 264   3              }
 265   2      
 266   2              //-----------------------------------
 267   2              // Secondary Host command/data service
 268   2              //-----------------------------------
 269   2              if(F_Service_PCI2)
 270   2              {
 271   3                  F_Service_PCI2=0;
 272   3                  service_pci2();
 273   3                  continue;
 274   3              }
 275   2      
 276   2              //-----------------------------------
 277   2              // Keyboard scanner service
 278   2              //-----------------------------------
 279   2              if(F_Service_KEY)
 280   2              {
 281   3                  F_Service_KEY=0;
 282   3                  service_scan();
 283   3                  continue;
 284   3              }
 285   2      
 286   2              //-----------------------------------
 287   2              //
 288   2              //-----------------------------------
 289   2              Hook_main_service_H();
 290   2      
 291   2              //-----------------------------------
 292   2              // Low level event
 293   2              //-----------------------------------
 294   2              if(F_Service_Low_LV)
 295   2              {
 296   3                  F_Service_Low_LV=0;
 297   3                  service_Low_LVEvent();
 298   3                  continue;
 299   3              }
 300   2      
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 6   

 301   2              //-----------------------------------
 302   2              // Third Host command/data service
 303   2              //-----------------------------------
 304   2              if(F_Service_PCI3)
 305   2              {
 306   3                  F_Service_PCI3=0;
 307   3                  service_pci3();
 308   3                  continue;
 309   3              }
 310   2      
 311   2              //-----------------------------------
 312   2              // CIR IRQ
 313   2              //-----------------------------------
 314   2              if(F_Service_CIR)
 315   2              {
 316   3                  F_Service_CIR=0;
 317   3                  service_cir();
 318   3                  continue;
 319   3              }
 320   2      
 321   2              //-----------------------------------
 322   2              // fourth command/data service
 323   2              //-----------------------------------
 324   2              if(F_Service_PCI4)
 325   2              {
 326   3                  F_Service_PCI4=0;
 327   3                  service_pci4();
 328   3                  continue;
 329   3              }
 330   2      
 331   2              //------------------------------------
 332   2              // service_OEM_1
 333   2              //------------------------------------
 334   2              if(F_Service_OEM_1)
 335   2              {
 336   3                  F_Service_OEM_1=0;
 337   3                  service_OEM_1();
 338   3                  continue;
 339   3              }
 340   2      
 341   2              //------------------------------------
 342   2              // service_OEM_2
 343   2              //------------------------------------
 344   2              if(F_Service_OEM_2)
 345   2              {
 346   3                  F_Service_OEM_2=0;
 347   3                  service_OEM_2();
 348   3                  continue;
 349   3              }
 350   2      
 351   2              //------------------------------------
 352   2              // service_OEM_3
 353   2              //------------------------------------
 354   2              if(F_Service_OEM_3)
 355   2              {
 356   3                  F_Service_OEM_3=0;
 357   3                  service_OEM_3();
 358   3                  continue;
 359   3              }
 360   2      
 361   2              //------------------------------------
 362   2              // service_OEM_4
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 7   

 363   2              //------------------------------------
 364   2              if(F_Service_OEM_4)
 365   2              {
 366   3                  F_Service_OEM_4=0;
 367   3                  service_OEM_4();
 368   3                  continue;
 369   3              }
 370   2      
 371   2              //-----------------------------------
 372   2              //
 373   2              //-----------------------------------
 374   2              Hook_main_service_L();
 375   2          }
 376   1      }
 377          
 378          static void service_Low_LVEvent(void)
 379          {
 380   1          if((KBPendingTXCount != KBPendingRXCount )||(scan.kbf_head != scan.kbf_tail))
 381   1          {
 382   2                   SetServiceSendFlag();
 383   2               if(IS_MASK_SET(BATTUPDATEFW,PriBattInhib)) //ANGELAG008:add
 384   2                              F_Service_SEND = 1;                     //ANGELAG008:add
 385   2          }
 386   1      
 387   1          if(IS_MASK_SET(KBHISR,P_IBF))
 388   1          {
 389   2                  F_Service_PCI = 1;
 390   2          }
 391   1      
 392   1          if(IS_MASK_SET(PM1STS,P_IBF))
 393   1          {
 394   2                  F_Service_PCI2 = 1;
 395   2          }
 396   1      }
 397          
 398          //----------------------------------------------------------------------------
 399          // FUNCTION: service_unlock
 400          // Unlock aux devices and re-enable Host interface IRQ if it is ok to do so.
 401          //----------------------------------------------------------------------------
 402          static void service_unlock(void)
 403          {
 404   1              Unlock_Scan();
 405   1      }
 406          
 407          //------------------------------------------------------------
 408          // Polling events
 409          //------------------------------------------------------------
 410          void service_1mS(void)
 411          {
 412   1          Timer1msEvent();
 413   1          Timer1msCnt++;
 414   1          if(Timer1msCnt>=10)
 415   1          {
 416   2              Timer1msCnt = 0x00;
 417   2          }
 418   1      
 419   1          if(Hook_Only_Timer1msEvent()==Only_Timer1msEvent)
 420   1          {
 421   2              return;
 422   2          }
 423   1      
 424   1          if((Timer1msCnt%5)==0x00)
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 8   

 425   1          {
 426   2                  Timer5msEvent();
 427   2                  Timer5msCnt++;
 428   2                  if ( Timer5msCnt & 1 )      // 10ms events
 429   2                  {
 430   3                  Timer10msEventA();
 431   3                  }
 432   2                  else
 433   2                  {
 434   3                          Timer10msEventB();
 435   3                  switch( Timer5msCnt )   // Share Loading Branch Control
 436   3                  {
 437   4                      case 2: 
 438   4                      Timer50msEventA();
 439   4                      break;
 440   4                      case 4: 
 441   4                      Timer50msEventB();
 442   4                      break;
 443   4                      case 6: 
 444   4                      Timer50msEventC();
 445   4                      break;
 446   4                      case 8: 
 447   4                      Timer100msCntB++;
 448   4                              if ( Timer100msCntB & 1 )
 449   4                      {
 450   5                              Timer100msEventA();
 451   5                      }
 452   4                      else
 453   4                      {
 454   5                              Timer100msEventB();
 455   5                      }
 456   4                      break;
 457   4      
 458   4                      default:
 459   4                                      Timer5msCnt=0;
 460   4                      break;
 461   4                      }
 462   3      
 463   3                  if ( Timer5msCnt == 0x00 )
 464   3                  {                           // 50msec
 465   4                          Timer100msCnt ++;
 466   4                          if ( Timer100msCnt & 1 )
 467   4                          {
 468   5                          Timer100msEventC();
 469   5                          }
 470   4                          else
 471   4                          {                   // 100msec
 472   5                                  switch( Timer100msCnt )
 473   5                          {
 474   6                              case 2: 
 475   6                              Timer500msEventA();
 476   6                                      break;
 477   6                              case 4: 
 478   6                              Timer500msEventB();
 479   6                              break;
 480   6                              case 6: 
 481   6                              Timer500msEventC();
 482   6                                      break;
 483   6                              case 8: 
 484   6                              Timer1SecEventA();
 485   6                              break;
 486   6                                          case 10:    
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 9   

 487   6                              Timer1SecEventB();
 488   6                              break;
 489   6                              case 12:        
 490   6                              Timer500msEventA();
 491   6                              break;
 492   6                              case 14:        
 493   6                              Timer500msEventB();
 494   6                              break;
 495   6                              case 16:        
 496   6                              Timer500msEventC();
 497   6                              break;
 498   6                              case 18:        
 499   6                              Timer1SecEventC();
 500   6                                      break;
 501   6                              default:        // 1 Sec
 502   6                              Timer100msCnt = 0;
 503   6                                      Timer1SecCnt ++;
 504   6                              if ( Timer1SecCnt == 60 )
 505   6                              {
 506   7                                      Timer1MinEvent();
 507   7                                      Timer1SecCnt=0;
 508   7                              }
 509   6                              break;
 510   6                                  }
 511   5                      }
 512   4                      }
 513   3                      }
 514   2              }
 515   1      }
 516          
 517          //------------------------------------------------------------
 518          // 1ms events
 519          //------------------------------------------------------------
 520          void Timer1msEvent(void)
 521          {
 522   1          ReSendPS2PendingData();
 523   1          Hook_Timer1msEvent(Timer1msCnt);
 524   1      }
 525          
 526          //------------------------------------------------------------
 527          // 5ms events
 528          //------------------------------------------------------------
 529          void Timer5msEvent(void)
 530          {
 531   1          F_Service_Low_LV = 1;
 532   1              if (Timer_A.fbit.TMR_SCAN)
 533   1              {
 534   2                      F_Service_KEY = 1;              // Request scanner service.
 535   2              }
 536   1             Hook_Timer5msEvent();
 537   1      }
 538          
 539          //------------------------------------------------------------
 540          // 10ms events
 541          //------------------------------------------------------------
 542          void Timer10msEventA(void)
 543          {
 544   1          SetStartScanAUXFlag();
 545   1              Hook_Timer10msEventA();
 546   1      }
 547          
 548          //------------------------------------------------------------
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 10  

 549          // 10ms events
 550          //------------------------------------------------------------
 551          void Timer10msEventB(void)
 552          {
 553   1              Hook_Timer10msEventB();
 554   1      }
 555          
 556          //------------------------------------------------------------
 557          // 50ms events A
 558          //------------------------------------------------------------
 559          void Timer50msEventA(void)
 560          {
 561   1              Hook_Timer50msEventA();
 562   1      }
 563          
 564          //------------------------------------------------------------
 565          // 50ms events B
 566          //------------------------------------------------------------
 567          void Timer50msEventB(void)
 568          {
 569   1              Hook_Timer50msEventB();
 570   1      }
 571          
 572          //------------------------------------------------------------
 573          // 50ms events C
 574          //------------------------------------------------------------
 575          void Timer50msEventC(void)
 576          {
 577   1              Hook_Timer50msEventC();
 578   1      }
 579          
 580          //------------------------------------------------------------
 581          // 100ms events A
 582          //------------------------------------------------------------
 583          void Timer100msEventA(void)
 584          {
 585   1              Hook_Timer100msEventA();
 586   1      }
 587          
 588          //------------------------------------------------------------
 589          // 100ms events B
 590          //------------------------------------------------------------
 591          void Timer100msEventB(void)
 592          {
 593   1              Hook_Timer100msEventB();
 594   1      }
 595          
 596          //------------------------------------------------------------
 597          // 100ms events C
 598          //------------------------------------------------------------
 599          void Timer100msEventC(void)
 600          {
 601   1              Hook_Timer100msEventC();
 602   1      }
 603          
 604          //------------------------------------------------------------
 605          // 500ms events A
 606          //------------------------------------------------------------
 607          void Timer500msEventA(void)
 608          {
 609   1              Hook_Timer500msEventA();
 610   1      }
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 11  

 611          
 612          //------------------------------------------------------------
 613          // 500ms events B
 614          //------------------------------------------------------------
 615          void Timer500msEventB(void)
 616          {
 617   1              Hook_Timer500msEventB();
 618   1      }
 619          
 620          //------------------------------------------------------------
 621          // 500ms events C
 622          //------------------------------------------------------------
 623          void Timer500msEventC(void)
 624          {
 625   1              Hook_Timer500msEventC();
 626   1      }
 627          
 628          //------------------------------------------------------------
 629          // 1sec events A
 630          //------------------------------------------------------------
 631          void Timer1SecEventA(void)
 632          {
 633   1              Hook_Timer1SecEventA();
 634   1      }
 635          
 636          //------------------------------------------------------------
 637          // 1sec events B
 638          //------------------------------------------------------------
 639          void Timer1SecEventB(void)
 640          {
 641   1              Hook_Timer1SecEventB();
 642   1      }
 643          
 644          //------------------------------------------------------------
 645          // 1sec events C
 646          //------------------------------------------------------------
 647          void Timer1SecEventC(void)
 648          {
 649   1              Hook_Timer1SecEventC();
 650   1      }
 651          
 652          //------------------------------------------------------------
 653          // 1min events
 654          //------------------------------------------------------------
 655          void Timer1MinEvent(void)
 656          {
 657   1          Hook_Timer1MinEvent();
 658   1      }
 659          
 660          bit CheckCanEnterDeepSleep()
 661          {
 662   1              //under S5&S3 battery mode  EC enter sleep mode start
 663   1              BYTE resault;
 664   1              resault = 0x00;
 665   1              if(Read_AC_IN()) 
 666   1              {
 667   2                      resault = 0x01;
 668   2              }
 669   1              if(SystemIsS0)                                                   // if system in S0
 670   1              {
 671   2                      resault = 0x01;
 672   2              }
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 12  

 673   1              //MARTINH154:Add  start
 674   1              if(IS_MASK_SET(CMOS_TEST,b0_CMOS_FunctionKey))                                                    // if system in S0
 675   1              {
 676   2                      resault = 0x01;
 677   2              }
 678   1              //MARTINH154:Add end
 679   1              //ANGELAS044:add start
 680   1              if(Read_EC_PWRBTN())                                   
 681   1              {       
 682   2                      resault = 0x01;
 683   2              }
 684   1              if(LOWBATT_3TIMES!=0)
 685   1              {
 686   2                      resault=0x01;
 687   2              }
 688   1              if(IS_MASK_SET(ACPI_HOTKEY, b6Cmd_NoShut))
 689   1              {
 690   2                      resault = 0x01;
 691   2              }
 692   1              //ANGELAS067:add start
 693   1              if(IS_MASK_SET(ACPI_HOTKEY, b7BIOS_NoShut))
 694   1              {
 695   2                      resault = 0x01;
 696   2              }
 697   1              //ANGELAS067:add end
 698   1              if(Read_AC_IN()&&(IS_MASK_CLEAR(nBattery0x16L,FullyChg))&&(IS_MASK_SET(BT1_STATUS1, bat_in)))
 699   1              {
 700   2                      resault=0x01;
 701   2              }
 702   1              if(LID_DEBOUNCE_CNT>0)//W127
 703   1              {
 704   2                      resault=0x01;
 705   2              }
 706   1          //ANGELAS044:add end
 707   1              //ANGELAS081:remove start
 708   1              //if(Read_LID_SW_IN()&& IS_MASK_SET(SysStatus,CloseLid))//G83:Fixed cannot resume from S3 by open lid 
             -after enter S3 via close lid on DC mode.
 709   1          //{
 710   1          //  resault = 0x01;
 711   1          //}
 712   1          //ANGELAS081:remove end
 713   1              if(IS_MASK_SET(POWER_FLAG1, wait_PSW_off))      // power switch pressed
 714   1              {
 715   2                      resault = 0x01;
 716   2              }
 717   1               /*ANGELAS057:remove start
 718   1              if(SystemIsS3) //ANGELAS044:s5 to s3
 719   1              {
 720   1                      resault = 0x01;
 721   1              }
 722   1              *///ANGELAS057:remove end
 723   1              if((SysPowState==SYSTEM_S5_S0)||(SysPowState==SYSTEM_S4_S0)||
 724   1           (SysPowState==SYSTEM_S3_S0)||(SysPowState==SYSTEM_S0_S5)||(SysPowState==SYSTEM_S0_S4)||
 725   1           (SysPowState==SYSTEM_S0_S3)||(SysPowState == SYSTEM_S5_DSX)||(SysPowState == SYSTEM_DSX_S5))
 726   1              {
 727   2                      resault = 0x01;
 728   2              }
 729   1      
 730   1              if(resault == 0x00)
 731   1              {
 732   2                      if(DeepSleepCunt < 250)           // Delay 2500 ms for EC deep sleep mode////G83
 733   2                      {
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 13  

 734   3                              DeepSleepCunt++;
 735   3                              resault = 0x02;
 736   3                      }
 737   2                      else
 738   2                      {
 739   3                              resault = 0x00;
 740   3                              DeepSleepCunt = 0x00;
 741   3                      }
 742   2              }
 743   1              else
 744   1              {
 745   2                      DeepSleepCunt = 0x00;
 746   2              }
 747   1      
 748   1              switch(resault)
 749   1              {
 750   2                      case 0:
 751   2                              return(1);
 752   2                              break;
 753   2      
 754   2                      case 1:
 755   2                              DeepSleepCunt=0x00;
 756   2                              return(0);
 757   2                              break;
 758   2      
 759   2                      case 2:
 760   2                              return(0);
 761   2                              break;
 762   2              }
 763   1      
 764   1              return 0;       
 765   1      //under S5 battery mode  EC enter deep sleep mode end
 766   1      
 767   1      }
 768          
 769          //-----------------------------------------------------------------------------
 770          void InitEnterDeepSleep(void)
 771          {
 772   1          EC_DeepSleep_Temp0 = ADCSTS;
 773   1          EC_DeepSleep_Temp1 = ADCCFG;
 774   1          EC_DeepSleep_Temp2 = DACPWRDN;
 775   1          EC_DeepSleep_Temp3 = CGCTRL1R;
 776   1      
 777   1          EC_DeepSleep_TempPortA = GPDRA;
 778   1          EC_DeepSleep_TempPortB = GPDRB;
 779   1          EC_DeepSleep_TempPortC = GPDRC;
 780   1          EC_DeepSleep_TempPortD = GPDRD;
 781   1          EC_DeepSleep_TempPortE = GPDRE;
 782   1          EC_DeepSleep_TempPortF = GPDRF;
 783   1          EC_DeepSleep_TempPortG = GPDRG;
 784   1          EC_DeepSleep_TempPortH = GPDRH;
 785   1          EC_DeepSleep_TempPortI = GPDRI;
 786   1          EC_DeepSleep_TempPortJ = GPDRJ;
 787   1      
 788   1              EA = 0;
 789   1              KSOL    = 0x00;
 790   1              KSOH1   = 0x00;
 791   1              KSOH2   = 0x00;
 792   1              KSICTRL = 0x00;
 793   1      
 794   1              //MEILING030:S-remove change LED control mode.
 795   1              /*if(SystemIsS3)
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 14  

 796   1              {
 797   1                      GPCRA0 = ALT; 
 798   1                      DCR0 = 0x7F; 
 799   1              }*/
 800   1              //MEILING030:S-remove change LED control mode.
 801   1              
 802   1              if(SystemIsDSX)
 803   1              {
 804   2                  PM_PWRBTN_LOW(); 
 805   2                      BAT_LOW_LED_ON();
 806   2                      BAT_CHG_LED_ON();
 807   2                      PWR_LED_ON();
 808   2                      NUMLED_ON();
 809   2                      CAPLED_ON();
 810   2                      GPCRA0=INPUT;      //no
 811   2                      GPCRA1=INPUT;           //no
 812   2                      GPCRA2=INPUT;
 813   2              }
 814   1              
 815   1              FPCFG&=0xBF;
 816   1              ADCCFG &= 0xFE; 
 817   1              CGCTRL2R = 0x70;
 818   1              CGCTRL3R = 0x2F; 
 819   1              
 820   1              if(!(SystemIsDSX)) 
 821   1              ECPowerDownEnableExternalTimer2(); 
 822   1              
 823   1              SetACIN_Int();
 824   1          Setlanwake_Int();//Modify sometimes will wake up from S3 when plug AC adaptor after sending magic-pack
             -age under DC mode.
 825   1              SetPWRSW_Int();
 826   1          SetNovo_Int();
 827   1          MXLID_Wake_En();
 828   1          SlpS3_Wake_En();
 829   1              InterKBDWakeEnable();
 830   1      
 831   1              ADCSTS  = 0x00;
 832   1              ADCCFG  = 0x00;
 833   1              DACPWRDN = 0xFF;
 834   1          CGCTRL1R = 0x0F;
 835   1      
 836   1              if(SystemIsDSX) 
 837   1              { 
 838   2                      //LMLKBL0015:add start.
 839   2                      SMBUS_CK1_HIGH;
 840   2                      SMBUS_DA1_HIGH;
 841   2                      SMBUS_CK1_IN;
 842   2                      SMBUS_DA1_IN;
 843   2                      //LMLKBL0015:add end.
 844   2      
 845   2              //PM_PWRBTN_LOW(); 
 846   2                      
 847   2                      GPCRA5=INPUT;  //no
 848   2                      GPCRB6=INPUT;           
 849   2                      GPCRC0=INPUT;                   
 850   2                      GPCRC7=INPUT;           
 851   2                      GPCRD3=INPUT;           
 852   2                      //GPCRE3=INPUT; //ANGELAG041: remove    
 853   2                      //GPCRE7=INPUT; //LMLNANO013:remove.    
 854   2                      //GPCRG6=INPUT; //ANGELAG023: remove
 855   2                      //GPCRH3=INPUT; //LMLNANO013:remove.
 856   2                      //GPCRJ3=INPUT; //ANGELAG023: remove
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 15  

 857   2                      GPCRJ4=INPUT;
 858   2                      GPCRJ6=INPUT;
 859   2              } 
 860   1      
 861   1              WUESR1  = 0xFF;
 862   1              WUESR2  = 0xFF;
 863   1              WUESR3  = 0xFF;
 864   1              WUESR4  = 0xFF;
 865   1              WUESR7  = 0xFF;
 866   1              WUESR10 = 0xFF; // AC in
 867   1              WUESR14 = 0xFF; // Novo
 868   1      
 869   1              ISR1 = 0xFF;
 870   1              ISR2 = 0xFF;
 871   1              ISR3 = 0xFF;
 872   1              ISR4 = 0xFF;
 873   1              ISR13= 0xFF; // AC in
 874   1              ISR16= 0xFF; // Novo
 875   1      }
 876          
 877          //-----------------------------------------------------------------------------
 878          void InitWakeFromDeepSleep(void)
 879          {       
 880   1          if(!(SystemIsDSX))  //THOMASG015:chage state
 881   1                      ECDisableExternalTimer2();
 882   1          
 883   1              FPCFG|=0x40;
 884   1              ADCCFG |= 0x01;
 885   1          CGCTRL2R = 0x00;
 886   1          CGCTRL3R = 0x00;
 887   1              
 888   1              IER0    = 0x00;  // 7 ~ 0
 889   1              IER1    = 0x00;  // 15 ~ 8
 890   1              IER2    = 0x00;  // 23 ~ 16
 891   1              IER3    = 0x00;
 892   1              IER4    = 0x00;
 893   1          IER9    = 0x00;
 894   1              IER13   = 0x00; // AC in
 895   1              IER16   = 0x00; // Novo
 896   1      
 897   1      
 898   1      
 899   1              ISR0    = 0xFF;
 900   1              ISR1    = 0xFF;
 901   1              ISR2    = 0xFF;
 902   1              ISR3    = 0xFF;
 903   1              ISR4    = 0xFF;
 904   1          ISR9    = 0xFF;
 905   1          ISR13   = 0xFF; // AC in
 906   1          ISR16   = 0xFF; // Novo
 907   1      
 908   1      
 909   1              WUESR1  = 0xFF;
 910   1              WUESR2  = 0xFF;
 911   1              WUESR3  = 0xFF;
 912   1              WUESR4  = 0xFF;
 913   1              WUESR7  = 0xFF;
 914   1              WUESR10 = 0xFF; // AC in
 915   1              WUESR14 = 0xFF; // Novo
 916   1      
 917   1          ADCSTS = EC_DeepSleep_Temp0;
 918   1          ADCCFG = EC_DeepSleep_Temp1;
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 16  

 919   1          DACPWRDN = EC_DeepSleep_Temp2;
 920   1          CGCTRL1R = EC_DeepSleep_Temp3;
 921   1      
 922   1              Init_Kbd();
 923   1              Core_Init_Regs();
 924   1              Init_Regs();
 925   1              Enable_Any_Key_Irq();   //msmart
 926   1      
 927   1              //MEILING030:S- remove change power led control.
 928   1              /*if(SystemIsS3)
 929   1              {
 930   1                      GPCRA0 = OUTPUT; 
 931   1              }*/
 932   1              //MEILING030:E-
 933   1              
 934   1              if(SystemIsDSX || SystemIsS5)
 935   1              {
 936   2                      //LMLKBL0015:add start.
 937   2                      SMBUS_CK1_ALT;
 938   2                      SMBUS_DA1_ALT;
 939   2                      //LMLKBL0015:add end.
 940   2                      
 941   2                      GPCRA0=OUTPUT;
 942   2                      GPCRA1=OUTPUT; //MEILING030:add.
 943   2                      GPCRA2=OUTPUT;
 944   2                      BAT_LOW_LED_OFF();
 945   2                      PWR_LED_OFF();
 946   2                      NUMLED_OFF();
 947   2                      CAPLED_OFF();
 948   2                      BAT_CHG_LED_OFF();
 949   2              
 950   2                      //GPCRA3=OUTPUT;         //ANGELAG023: remove   
 951   2                      //GPCRA4=OUTPUT; //ANGELAG023: remove   
 952   2                      GPCRA5=OUTPUT;
 953   2                      //GPCRA7=OUTPUT;                //ANGELAG023: remove
 954   2                      //GPCRB2=OUTPUT;         //ANGELAG023: remove   
 955   2                      GPCRB6=OUTPUT;          
 956   2                      GPCRC0=OUTPUT;          
 957   2                      //GPCRC6=OUTPUT;        //ANGELAG023: remove    
 958   2                      GPCRC7=OUTPUT;          
 959   2                      GPCRD3=OUTPUT;          
 960   2                      //GPCRE3=OUTPUT; //ANGELAG041: remove
 961   2                      //GPCRE4=OUTPUT; //ANGELAG023: remove
 962   2                      //VR_ON_OFF(); //ANGELAG023: remove
 963   2                      //GPCRE7=OUTPUT;        //LMLNANO013:remove.    
 964   2                      //GPCRF1=OUTPUT;        //ANGELAG023: remove
 965   2                      //GPCRG0=OUTPUT;                 //ANGELAN007 remove
 966   2                      //GPCRG6=OUTPUT; //ANGELAG023: remove   
 967   2                      //GPCRH3=OUTPUT;        //LMLNANO013:remove.
 968   2                      //GPCRH6=OUTPUT;        //ANGELAG023: remove
 969   2                      //GPCRJ3=OUTPUT; //ANGELAG023: remove
 970   2                      GPCRJ4=OUTPUT;
 971   2                      GPCRJ6=OUTPUT;  
 972   2              }        
 973   1      //ANGELAG041: add start
 974   1              GPDRA = EC_DeepSleep_TempPortA;
 975   1              GPDRB = EC_DeepSleep_TempPortB;
 976   1              GPDRC = EC_DeepSleep_TempPortC;
 977   1              GPDRD = EC_DeepSleep_TempPortD;
 978   1              GPDRE = EC_DeepSleep_TempPortE;
 979   1              GPDRF = EC_DeepSleep_TempPortF;
 980   1              GPDRG = EC_DeepSleep_TempPortG;
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 17  

 981   1              GPDRH = EC_DeepSleep_TempPortH;
 982   1              GPDRI = EC_DeepSleep_TempPortI;
 983   1              GPDRJ = EC_DeepSleep_TempPortJ;
 984   1      //ANGELAG041: add end
 985   1      }
 986          
 987          //----------------------------------------------------------------------------
 988          // Output : 1 Crisis mode
 989          //          0 Normal mode
 990          //----------------------------------------------------------------------------
 991          bit CheckCrisisMode(void)
 992          {       // To add condition here
 993   1              BYTE BKSOL,BKSOH1,BKSOH2;
 994   1          BKSOL = KSOL;
 995   1          BKSOH1 = KSOH1;
 996   1          BKSOH2 = KSOH2;
 997   1      
 998   1              KSOL  = 0xFF;
 999   1              KSOH1 = 0xBF;
1000   1              KSOH2 = 0xFF;                   // Fn key (scan line b14)
1001   1              WNCKR = 0x00;           // Delay 15.26 us
1002   1              WNCKR = 0x00;           // Delay 15.26 us
1003   1              if ((KSI&0x10) != 0)    // Fn key (data line b4)
1004   1              {
1005   2                      KSOH1 = 0xFF;
1006   2              KSOL  = BKSOL;
1007   2              KSOH1 = BKSOH1;
1008   2              KSOH2 = BKSOH2;
1009   2                  return FALSE;
1010   2              }
1011   1      
1012   1              KSOL  = 0xEF;
1013   1              KSOH1 = 0xFF;
1014   1              KSOH2 = 0xFF;                   // "R" key (scan line b4)
1015   1              WNCKR = 0x00;           // Delay 15.26 us
1016   1              WNCKR = 0x00;           // Delay 15.26 us
1017   1              if ((KSI&0x04) != 0)    // "R" key (data line b2)
1018   1              {
1019   2                      KSOL  = 0xFF;
1020   2              KSOL  = BKSOL;
1021   2              KSOH1 = BKSOH1;
1022   2              KSOH2 = BKSOH2;
1023   2                  return FALSE;
1024   2              }
1025   1              KSOL  = 0xFF;
1026   1      
1027   1          KSOL  = BKSOL;
1028   1          KSOH1 = BKSOH1;
1029   1          KSOH2 = BKSOH2;
1030   1      
1031   1              return TRUE;
1032   1      }
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 18  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0084 (BEGIN)
0000         L?0133:
0000 F0                MOVX    @DPTR,A
0001 900000      E     MOV     DPTR,#GPCRB6
0004 F0                MOVX    @DPTR,A
0005 900000      E     MOV     DPTR,#GPCRC0
0008 F0                MOVX    @DPTR,A
0009 900000      E     MOV     DPTR,#GPCRC7
000C F0                MOVX    @DPTR,A
000D 900000      E     MOV     DPTR,#GPCRD3
0010 F0                MOVX    @DPTR,A
0011 900000      E     MOV     DPTR,#GPCRJ4
0014 F0                MOVX    @DPTR,A
0015 900000      E     MOV     DPTR,#GPCRJ6
0018 F0                MOVX    @DPTR,A
0019 22                RET     
001A         L?0134:
001A F0                MOVX    @DPTR,A
001B 900000      E     MOV     DPTR,#WUESR2
001E F0                MOVX    @DPTR,A
001F 900000      E     MOV     DPTR,#WUESR3
0022 F0                MOVX    @DPTR,A
0023 900000      E     MOV     DPTR,#WUESR4
0026 F0                MOVX    @DPTR,A
0027 900000      E     MOV     DPTR,#WUESR7
002A F0                MOVX    @DPTR,A
002B 900000      E     MOV     DPTR,#WUESR10
002E F0                MOVX    @DPTR,A
002F 900000      E     MOV     DPTR,#WUESR14
0032 F0                MOVX    @DPTR,A
0033 22                RET     
0034         L?0135:
0034 900000      E     MOV     DPTR,#ISR1
0037 F0                MOVX    @DPTR,A
0038 900000      E     MOV     DPTR,#ISR2
003B F0                MOVX    @DPTR,A
003C 900000      E     MOV     DPTR,#ISR3
003F F0                MOVX    @DPTR,A
0040 900000      E     MOV     DPTR,#ISR4
0043 F0                MOVX    @DPTR,A
0044 22                RET     
0045         L?0136:
0045 900000      E     MOV     DPTR,#GPCRA0
0048 F0                MOVX    @DPTR,A
0049 900000      E     MOV     DPTR,#GPCRA1
004C F0                MOVX    @DPTR,A
004D 900000      E     MOV     DPTR,#GPCRA2
0050 F0                MOVX    @DPTR,A
0051 22                RET     
0052         L?0137:
0052         L?0138:
0052 900000      E     MOV     DPTR,#KSOH1
0055 F0                MOVX    @DPTR,A
0056 900000      E     MOV     DPTR,#KSOH2
0059 22                RET     
005A         L?0139:
005A F0                MOVX    @DPTR,A
005B E4                CLR     A
005C 900000      E     MOV     DPTR,#WNCKR
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 19  

005F F0                MOVX    @DPTR,A
0060 F0                MOVX    @DPTR,A
0061 900000      E     MOV     DPTR,#KSI
0064 E0                MOVX    A,@DPTR
0065 22                RET     
0066         L?0140:
0066 F0                MOVX    @DPTR,A
0067         L?0141:
0067 900000      E     MOV     DPTR,#SysPowState
006A E0                MOVX    A,@DPTR
006B 6466              XRL     A,#066H
006D 22                RET     
             ; FUNCTION Com0084 (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
                                           ; SOURCE LINE # 27
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 28
0003 7581C0            MOV     SP,#0C0H
                                           ; SOURCE LINE # 29
0006 00                NOP     
                                           ; SOURCE LINE # 30
0007 00                NOP     
                                           ; SOURCE LINE # 31
0008 00                NOP     
                                           ; SOURCE LINE # 32
0009 00                NOP     
                                           ; SOURCE LINE # 33
000A 900000      E     MOV     DPTR,#DCache
000D 7403              MOV     A,#03H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
0010 900000      E     MOV     DPTR,#RAM_16FF
0013 E0                MOVX    A,@DPTR
0014 54FE              ANL     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 53
0017 120000      E     LCALL   Hook_ECRetunrMainFuncKeepCondition
001A EF                MOV     A,R7
001B 6433              XRL     A,#033H
001D 703B              JNZ     ?C0001
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
001F 900000      E     MOV     DPTR,#FBCFG
0022 E0                MOVX    A,@DPTR
0023 547F              ANL     A,#07FH
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 56
0026 00                NOP     
                                           ; SOURCE LINE # 57
0027 75F701            MOV     MPRECF,#01H
                                           ; SOURCE LINE # 58
002A 00                NOP     
                                           ; SOURCE LINE # 59
002B 75F701            MOV     MPRECF,#01H
                                           ; SOURCE LINE # 60
002E 00                NOP     
                                           ; SOURCE LINE # 61
002F 75F701            MOV     MPRECF,#01H
                                           ; SOURCE LINE # 62
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 20  

0032 00                NOP     
                                           ; SOURCE LINE # 63
0033 75F701            MOV     MPRECF,#01H
                                           ; SOURCE LINE # 64
0036 00                NOP     
                                           ; SOURCE LINE # 65
0037 00                NOP     
                                           ; SOURCE LINE # 66
0038 900000      E     MOV     DPTR,#WinFlashMark
003B 74FC              MOV     A,#0FCH
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
003E 900000      E     MOV     DPTR,#WinFlashMark1
0041 7455              MOV     A,#055H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 68
0044 E4                CLR     A
0045 900000      E     MOV     DPTR,#WinFlashMark2
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 69
0049 120000      E     LCALL   ResetBANKDATA
                                           ; SOURCE LINE # 70
004C 120000      E     LCALL   Hook_ECExitFollowMode
                                           ; SOURCE LINE # 71
004F 120000      E     LCALL   Init_Timers
                                           ; SOURCE LINE # 72
0052 120000      E     LCALL   EnableModuleInterrupt
                                           ; SOURCE LINE # 73
0055 120000      E     LCALL   CheckECCHIPVer
                                           ; SOURCE LINE # 74
0058 804F              SJMP    ?C0002
005A         ?C0001:
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
005A 900000      E     MOV     DPTR,#ECSleepCount
005D 7403              MOV     A,#03H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 82
0060 7BDF              MOV     R3,#0DFH
0062 7DB7              MOV     R5,#0B7H
0064 7F01              MOV     R7,#01H
0066 120000      E     LCALL   _Read_Eflash_Byte
0069 900000      E     MOV     DPTR,#EEPROM_PwrSts
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
006E E0                MOVX    A,@DPTR
006F 30E41C            JNB     ACC.4,?C0003
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
0072 120000      E     LCALL   Core_Init_Regs
                                           ; SOURCE LINE # 86
0075 120000      R     LCALL   CheckCrisisMode
0078 900000      E     MOV     DPTR,#SYS_MISC1
007B E0                MOVX    A,@DPTR
007C 5009              JNC     ?C0004
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
007E 4440              ORL     A,#040H
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
0081 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 21  

0082 4408              ORL     A,#08H
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
0085 8007              SJMP    ?C0003
0087         ?C0004:
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
0087 54BF              ANL     A,#0BFH
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
008A E0                MOVX    A,@DPTR
008B 54F7              ANL     A,#0F7H
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
008E         ?C0003:
                                           ; SOURCE LINE # 98
008E 120000      E     LCALL   Core_Initialization
                                           ; SOURCE LINE # 99
0091 120000      E     LCALL   Oem_Initialization
                                           ; SOURCE LINE # 100
0094 120000      E     LCALL   InitEnableInterrupt
                                           ; SOURCE LINE # 103
0097 120000      E     LCALL   Init_UART
                                           ; SOURCE LINE # 104
009A 120000      R     LCALL   L?0142
                                           ; SOURCE LINE # 105
009D 7BFF              MOV     R3,#0FFH
009F 7A00        R     MOV     R2,#HIGH ?SC_38
00A1 7900        R     MOV     R1,#LOW ?SC_38
00A3 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 106
00A6 120000      R     LCALL   L?0142
                                           ; SOURCE LINE # 108
00A9         ?C0002:
                                           ; SOURCE LINE # 112
00A9 120000      E     LCALL   EnableInternalWDT
                                           ; SOURCE LINE # 117
00AC 900000      E     MOV     DPTR,#WinFlashMark
00AF E0                MOVX    A,@DPTR
00B0 B4FC0E            CJNE    A,#0FCH,?C0007
00B3 900000      E     MOV     DPTR,#WinFlashMark2
00B6 E0                MOVX    A,@DPTR
00B7 7008              JNZ     ?C0007
00B9 900000      E     MOV     DPTR,#WinFlashMark1
00BC E0                MOVX    A,@DPTR
00BD 6455              XRL     A,#055H
00BF 6038              JZ      ?C0006
00C1         ?C0007:
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
00C1 7F88              MOV     R7,#088H
00C3 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 120
00C6 120000      E     LCALL   Check_Mirror_Occurs
                                           ; SOURCE LINE # 121
00C9 7B4D              MOV     R3,#04DH
00CB E4                CLR     A
00CC FD                MOV     R5,A
00CD FF                MOV     R7,A
00CE 120000      E     LCALL   _Read_Eflash_Byte
00D1 EF                MOV     A,R7
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 22  

00D2 6025              JZ      ?C0006
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
00D4 900000      E     MOV     DPTR,#?_Do_Eflash_Write_1Byte?BYTE+03H
00D7 744D              MOV     A,#04DH
00D9 F0                MOVX    @DPTR,A
00DA E4                CLR     A
00DB FB                MOV     R3,A
00DC FD                MOV     R5,A
00DD FF                MOV     R7,A
00DE 120000      E     LCALL   _Do_Eflash_Write_1Byte
                                           ; SOURCE LINE # 124
00E1 7F66              MOV     R7,#066H
00E3 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 125
00E6 900000      E     MOV     DPTR,#FLHCTRL3R
00E9 E0                MOVX    A,@DPTR
00EA 4480              ORL     A,#080H
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
00ED 900000      E     MOV     DPTR,#HINSTC1
00F0 E0                MOVX    A,@DPTR
00F1 4440              ORL     A,#040H
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
00F4 7F77              MOV     R7,#077H
00F6 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
00F9         ?C0006:
                                           ; SOURCE LINE # 131
00F9 900000      E     MOV     DPTR,#ShutDnCause
00FC E0                MOVX    A,@DPTR
00FD FF                MOV     R7,A
00FE 120000      E     LCALL   _ProcessSID
0101         ?C0009:
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
0101 120000      E     LCALL   OEM_SkipMainServiceFunc
0104 BFFFFA            CJNE    R7,#0FFH,?C0009
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
0107 120000      R     LCALL   main_service
                                           ; SOURCE LINE # 138
010A 120000      E     LCALL   EnableModuleInterrupt
                                           ; SOURCE LINE # 139
010D 00                NOP     
                                           ; SOURCE LINE # 140
010E 00                NOP     
                                           ; SOURCE LINE # 141
010F 00                NOP     
                                           ; SOURCE LINE # 142
0110 00                NOP     
                                           ; SOURCE LINE # 157
0111 E500        E     MOV     A,Service
0113 70EC              JNZ     ?C0009
0115 E500        E     MOV     A,Service1
0117 70E8              JNZ     ?C0009
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
0119 E58C              MOV     A,TH0
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 23  

011B C3                CLR     C
011C 94FD              SUBB    A,#0FDH
011E 50E1              JNC     ?C0009
                                           ; SOURCE LINE # 161
0120 758CFD            MOV     TH0,#0FDH
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
0123 80DC              SJMP    ?C0009
                                           ; SOURCE LINE # 165
0125         L?0142:
0125 7BFF              MOV     R3,#0FFH
0127 7A00        R     MOV     R2,#HIGH ?SC_0
0129 7900        R     MOV     R1,#LOW ?SC_0
012B 120000      E     LCALL   _printf
012E 22                RET     
             ; FUNCTION main (END)

             ; FUNCTION main_service (BEGIN)
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
0000         ?C0015:
                                           ; SOURCE LINE # 180
0000 E500        E     MOV     A,Service
0002 7007              JNZ     ?C0017
0004 E500        E     MOV     A,Service1
0006 7003              JNZ     $ + 5H
0008 020000      R     LJMP    ?C0035
000B         ?C0017:
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 197
000B 300007      E     JNB     F_Service_PCI,?C0018
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
000E C200        E     CLR     F_Service_PCI
                                           ; SOURCE LINE # 200
0010 120000      E     LCALL   service_pci1
                                           ; SOURCE LINE # 201
0013 80EB              SJMP    ?C0015
                                           ; SOURCE LINE # 202
0015         ?C0018:
                                           ; SOURCE LINE # 207
0015 300007      E     JNB     F_Service_UNLOCK,?C0019
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
0018 C200        E     CLR     F_Service_UNLOCK
                                           ; SOURCE LINE # 210
001A 120000      R     LCALL   service_unlock
                                           ; SOURCE LINE # 211
001D 80E1              SJMP    ?C0015
                                           ; SOURCE LINE # 212
001F         ?C0019:
                                           ; SOURCE LINE # 217
001F 300007      E     JNB     F_Service_SEND,?C0020
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0022 C200        E     CLR     F_Service_SEND
                                           ; SOURCE LINE # 220
0024 120000      E     LCALL   service_send
                                           ; SOURCE LINE # 221
0027 80D7              SJMP    ?C0015
                                           ; SOURCE LINE # 222
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 24  

0029         ?C0020:
                                           ; SOURCE LINE # 227
0029 300007      E     JNB     F_Service_Send_PS2,?C0021
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
002C C200        E     CLR     F_Service_Send_PS2
                                           ; SOURCE LINE # 230
002E 120000      E     LCALL   service_PS2_data
                                           ; SOURCE LINE # 231
0031 80CD              SJMP    ?C0015
                                           ; SOURCE LINE # 232
0033         ?C0021:
                                           ; SOURCE LINE # 237
0033 300007      E     JNB     F_Service_PS2,?C0022
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
0036 C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 240
0038 120000      E     LCALL   service_ps2
                                           ; SOURCE LINE # 241
003B 80C3              SJMP    ?C0015
                                           ; SOURCE LINE # 242
003D         ?C0022:
                                           ; SOURCE LINE # 250
003D 300002      E     JNB     F_Service_PCI2,?C0023
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
0040 800D              SJMP    ?C0126
                                           ; SOURCE LINE # 255
0042         ?C0023:
                                           ; SOURCE LINE # 259
0042 300007      E     JNB     F_Service_MS_1,?C0024
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
0045 C200        E     CLR     F_Service_MS_1
                                           ; SOURCE LINE # 262
0047 120000      R     LCALL   service_1mS
                                           ; SOURCE LINE # 263
004A 80B4              SJMP    ?C0015
                                           ; SOURCE LINE # 264
004C         ?C0024:
                                           ; SOURCE LINE # 269
004C 300007      E     JNB     F_Service_PCI2,?C0025
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
004F         ?C0126:
004F C200        E     CLR     F_Service_PCI2
                                           ; SOURCE LINE # 272
0051 120000      E     LCALL   service_pci2
                                           ; SOURCE LINE # 273
0054 80AA              SJMP    ?C0015
                                           ; SOURCE LINE # 274
0056         ?C0025:
                                           ; SOURCE LINE # 279
0056 300007      E     JNB     F_Service_KEY,?C0026
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0059 C200        E     CLR     F_Service_KEY
                                           ; SOURCE LINE # 282
005B 120000      E     LCALL   service_scan
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 25  

                                           ; SOURCE LINE # 283
005E 80A0              SJMP    ?C0015
                                           ; SOURCE LINE # 284
0060         ?C0026:
                                           ; SOURCE LINE # 289
0060 120000      E     LCALL   Hook_main_service_H
                                           ; SOURCE LINE # 294
0063 300007      E     JNB     F_Service_Low_LV,?C0027
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
0066 C200        E     CLR     F_Service_Low_LV
                                           ; SOURCE LINE # 297
0068 120000      R     LCALL   service_Low_LVEvent
                                           ; SOURCE LINE # 298
006B 8093              SJMP    ?C0015
                                           ; SOURCE LINE # 299
006D         ?C0027:
                                           ; SOURCE LINE # 304
006D 300007      E     JNB     F_Service_PCI3,?C0028
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
0070 C200        E     CLR     F_Service_PCI3
                                           ; SOURCE LINE # 307
0072 120000      E     LCALL   service_pci3
                                           ; SOURCE LINE # 308
0075 8089              SJMP    ?C0015
                                           ; SOURCE LINE # 309
0077         ?C0028:
                                           ; SOURCE LINE # 314
0077 300008      E     JNB     F_Service_CIR,?C0029
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
007A C200        E     CLR     F_Service_CIR
                                           ; SOURCE LINE # 317
007C 120000      E     LCALL   service_cir
                                           ; SOURCE LINE # 318
007F 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 319
0082         ?C0029:
                                           ; SOURCE LINE # 324
0082 300008      E     JNB     F_Service_PCI4,?C0030
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
0085 C200        E     CLR     F_Service_PCI4
                                           ; SOURCE LINE # 327
0087 120000      E     LCALL   service_pci4
                                           ; SOURCE LINE # 328
008A 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 329
008D         ?C0030:
                                           ; SOURCE LINE # 334
008D 300008      E     JNB     F_Service_OEM_1,?C0031
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
0090 C200        E     CLR     F_Service_OEM_1
                                           ; SOURCE LINE # 337
0092 120000      E     LCALL   service_OEM_1
                                           ; SOURCE LINE # 338
0095 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 339
0098         ?C0031:
                                           ; SOURCE LINE # 344
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 26  

0098 300008      E     JNB     F_Service_OEM_2,?C0032
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
009B C200        E     CLR     F_Service_OEM_2
                                           ; SOURCE LINE # 347
009D 120000      E     LCALL   service_OEM_2
                                           ; SOURCE LINE # 348
00A0 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 349
00A3         ?C0032:
                                           ; SOURCE LINE # 354
00A3 300008      E     JNB     F_Service_OEM_3,?C0033
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
00A6 C200        E     CLR     F_Service_OEM_3
                                           ; SOURCE LINE # 357
00A8 120000      E     LCALL   service_OEM_3
                                           ; SOURCE LINE # 358
00AB 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 359
00AE         ?C0033:
                                           ; SOURCE LINE # 364
00AE 300008      E     JNB     F_Service_OEM_4,?C0034
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 366
00B1 C200        E     CLR     F_Service_OEM_4
                                           ; SOURCE LINE # 367
00B3 120000      E     LCALL   service_OEM_4
                                           ; SOURCE LINE # 368
00B6 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 369
00B9         ?C0034:
                                           ; SOURCE LINE # 374
00B9 120000      E     LCALL   Hook_main_service_L
                                           ; SOURCE LINE # 375
00BC 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 376
00BF         ?C0035:
00BF 22                RET     
             ; FUNCTION main_service (END)

             ; FUNCTION service_Low_LVEvent (BEGIN)
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
0000 900000      E     MOV     DPTR,#KBPendingRXCount
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      E     MOV     DPTR,#KBPendingTXCount
0008 E0                MOVX    A,@DPTR
0009 6F                XRL     A,R7
000A 700E              JNZ     ?C0037
000C AF00        E     MOV     R7,scan
000E EF                MOV     A,R7
000F C4                SWAP    A
0010 540F              ANL     A,#0FH
0012 FF                MOV     R7,A
0013 E500        E     MOV     A,scan
0015 540F              ANL     A,#0FH
0017 6F                XRL     A,R7
0018 600C              JZ      ?C0036
001A         ?C0037:
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 27  

                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 382
001A 120000      E     LCALL   SetServiceSendFlag
                                           ; SOURCE LINE # 383
001D 900000      E     MOV     DPTR,#BATTUPDATEFW
0020 E0                MOVX    A,@DPTR
0021 30E002            JNB     ACC.0,?C0036
                                           ; SOURCE LINE # 384
0024 D200        E     SETB    F_Service_SEND
                                           ; SOURCE LINE # 385
0026         ?C0036:
                                           ; SOURCE LINE # 387
0026 900000      E     MOV     DPTR,#KBHISR
0029 E0                MOVX    A,@DPTR
002A 30E102            JNB     ACC.1,?C0039
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
002D D200        E     SETB    F_Service_PCI
                                           ; SOURCE LINE # 390
002F         ?C0039:
                                           ; SOURCE LINE # 392
002F 900000      E     MOV     DPTR,#PM1STS
0032 E0                MOVX    A,@DPTR
0033 30E102            JNB     ACC.1,?C0041
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
0036 D200        E     SETB    F_Service_PCI2
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 396
0038         ?C0041:
0038 22                RET     
             ; FUNCTION service_Low_LVEvent (END)

             ; FUNCTION service_unlock (BEGIN)
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 404
0000 020000      E     LJMP    Unlock_Scan
             ; FUNCTION service_unlock (END)

             ; FUNCTION service_1mS (BEGIN)
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
0000 120000      R     LCALL   Timer1msEvent
                                           ; SOURCE LINE # 413
0003 0500        E     INC     Timer1msCnt
                                           ; SOURCE LINE # 414
0005 E500        E     MOV     A,Timer1msCnt
0007 C3                CLR     C
0008 940A              SUBB    A,#0AH
000A 4003              JC      ?C0043
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
000C E4                CLR     A
000D F500        E     MOV     Timer1msCnt,A
                                           ; SOURCE LINE # 417
000F         ?C0043:
                                           ; SOURCE LINE # 419
000F 120000      E     LCALL   Hook_Only_Timer1msEvent
0012 EF                MOV     A,R7
0013 6401              XRL     A,#01H
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 28  

0015 7003              JNZ     $ + 5H
0017 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 422
001A         ?C0044:
                                           ; SOURCE LINE # 424
001A E500        E     MOV     A,Timer1msCnt
001C 75F005            MOV     B,#05H
001F 84                DIV     AB
0020 E5F0              MOV     A,B
0022 6003              JZ      $ + 5H
0024 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
0027 120000      R     LCALL   Timer5msEvent
                                           ; SOURCE LINE # 427
002A 0500        E     INC     Timer5msCnt
                                           ; SOURCE LINE # 428
002C E500        E     MOV     A,Timer5msCnt
002E 30E003            JNB     ACC.0,?C0047
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 430
0031 020000      R     LJMP    Timer10msEventA
                                           ; SOURCE LINE # 431
0034         ?C0047:
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
0034 120000      R     LCALL   Timer10msEventB
                                           ; SOURCE LINE # 435
0037 E500        E     MOV     A,Timer5msCnt
0039 24FC              ADD     A,#0FCH
003B 6011              JZ      ?C0051
003D 24FE              ADD     A,#0FEH
003F 6012              JZ      ?C0052
0041 24FE              ADD     A,#0FEH
0043 6013              JZ      ?C0053
0045 2406              ADD     A,#06H
0047 7020              JNZ     ?C0056
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 437
0049         ?C0050:
                                           ; SOURCE LINE # 438
0049 120000      R     LCALL   Timer50msEventA
                                           ; SOURCE LINE # 439
004C 801E              SJMP    ?C0049
                                           ; SOURCE LINE # 440
004E         ?C0051:
                                           ; SOURCE LINE # 441
004E 120000      R     LCALL   Timer50msEventB
                                           ; SOURCE LINE # 442
0051 8019              SJMP    ?C0049
                                           ; SOURCE LINE # 443
0053         ?C0052:
                                           ; SOURCE LINE # 444
0053 120000      R     LCALL   Timer50msEventC
                                           ; SOURCE LINE # 445
0056 8014              SJMP    ?C0049
                                           ; SOURCE LINE # 446
0058         ?C0053:
                                           ; SOURCE LINE # 447
0058 0500        E     INC     Timer100msCntB
                                           ; SOURCE LINE # 448
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 29  

005A E500        E     MOV     A,Timer100msCntB
005C 30E005            JNB     ACC.0,?C0054
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 450
005F 120000      R     LCALL   Timer100msEventA
                                           ; SOURCE LINE # 451
0062 8008              SJMP    ?C0049
0064         ?C0054:
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
0064 120000      R     LCALL   Timer100msEventB
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
0067 8003              SJMP    ?C0049
                                           ; SOURCE LINE # 458
0069         ?C0056:
                                           ; SOURCE LINE # 459
0069 E4                CLR     A
006A F500        E     MOV     Timer5msCnt,A
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 461
006C         ?C0049:
                                           ; SOURCE LINE # 463
006C E500        E     MOV     A,Timer5msCnt
006E 7056              JNZ     ?C0045
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
0070 0500        E     INC     Timer100msCnt
                                           ; SOURCE LINE # 466
0072 E500        E     MOV     A,Timer100msCnt
0074 30E003            JNB     ACC.0,?C0058
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
0077 020000      R     LJMP    Timer100msEventC
                                           ; SOURCE LINE # 469
007A         ?C0058:
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
007A E500        E     MOV     A,Timer100msCnt
007C 120000      E     LCALL   ?C?CCASE
007F 0000        R     DW      ?C0061
0081 02                DB      02H
0082 0000        R     DW      ?C0062
0084 04                DB      04H
0085 0000        R     DW      ?C0063
0087 06                DB      06H
0088 0000        R     DW      ?C0064
008A 08                DB      08H
008B 0000        R     DW      ?C0065
008D 0A                DB      0AH
008E 0000        R     DW      ?C0066
0090 0C                DB      0CH
0091 0000        R     DW      ?C0067
0093 0E                DB      0EH
0094 0000        R     DW      ?C0063
0096 10                DB      010H
0097 0000        R     DW      ?C0069
0099 12                DB      012H
009A 0000              DW      00H
009C 0000        R     DW      ?C0070
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 30  

009E         ?C0061:
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
009E 800A              SJMP    ?C0127
                                           ; SOURCE LINE # 477
00A0         ?C0062:
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
00A0 800B              SJMP    ?C0128
                                           ; SOURCE LINE # 480
00A2         ?C0063:
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
00A2 800C              SJMP    ?C0129
                                           ; SOURCE LINE # 483
00A4         ?C0064:
                                           ; SOURCE LINE # 484
00A4 020000      R     LJMP    Timer1SecEventA
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
00A7         ?C0065:
                                           ; SOURCE LINE # 487
00A7 020000      R     LJMP    Timer1SecEventB
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
00AA         ?C0066:
                                           ; SOURCE LINE # 490
00AA         ?C0127:
00AA 020000      R     LJMP    Timer500msEventA
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
00AD         ?C0067:
                                           ; SOURCE LINE # 493
00AD         ?C0128:
00AD 020000      R     LJMP    Timer500msEventB
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 495
00B0         ?C0129:
00B0 020000      R     LJMP    Timer500msEventC
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
00B3         ?C0069:
                                           ; SOURCE LINE # 499
00B3 020000      R     LJMP    Timer1SecEventC
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
00B6         ?C0070:
                                           ; SOURCE LINE # 502
00B6 E4                CLR     A
00B7 F500        E     MOV     Timer100msCnt,A
                                           ; SOURCE LINE # 503
00B9 0500        E     INC     Timer1SecCnt
                                           ; SOURCE LINE # 504
00BB E500        E     MOV     A,Timer1SecCnt
00BD B43C06            CJNE    A,#03CH,?C0045
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
00C0 120000      R     LCALL   Timer1MinEvent
                                           ; SOURCE LINE # 507
00C3 E4                CLR     A
00C4 F500        E     MOV     Timer1SecCnt,A
                                           ; SOURCE LINE # 508
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 31  

                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
00C6         ?C0045:
00C6 22                RET     
             ; FUNCTION service_1mS (END)

             ; FUNCTION Timer1msEvent (BEGIN)
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 522
0000 120000      E     LCALL   ReSendPS2PendingData
                                           ; SOURCE LINE # 523
0003 AF00        E     MOV     R7,Timer1msCnt
0005 020000      E     LJMP    _Hook_Timer1msEvent
             ; FUNCTION Timer1msEvent (END)

             ; FUNCTION Timer5msEvent (BEGIN)
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
0000 D200        E     SETB    F_Service_Low_LV
                                           ; SOURCE LINE # 532
0002 AF00        E     MOV     R7,Timer_A
0004 EF                MOV     A,R7
0005 C4                SWAP    A
0006 540F              ANL     A,#0FH
0008 30E002            JNB     ACC.0,?C0073
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
000B D200        E     SETB    F_Service_KEY
                                           ; SOURCE LINE # 535
000D         ?C0073:
                                           ; SOURCE LINE # 536
000D 020000      E     LJMP    Hook_Timer5msEvent
             ; FUNCTION Timer5msEvent (END)

             ; FUNCTION Timer10msEventA (BEGIN)
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
0000 120000      E     LCALL   SetStartScanAUXFlag
                                           ; SOURCE LINE # 545
0003 020000      E     LJMP    Hook_Timer10msEventA
             ; FUNCTION Timer10msEventA (END)

             ; FUNCTION Timer10msEventB (BEGIN)
                                           ; SOURCE LINE # 551
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 553
0000 020000      E     LJMP    Hook_Timer10msEventB
             ; FUNCTION Timer10msEventB (END)

             ; FUNCTION Timer50msEventA (BEGIN)
                                           ; SOURCE LINE # 559
                                           ; SOURCE LINE # 560
                                           ; SOURCE LINE # 561
0000 020000      E     LJMP    Hook_Timer50msEventA
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 32  

             ; FUNCTION Timer50msEventA (END)

             ; FUNCTION Timer50msEventB (BEGIN)
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
0000 020000      E     LJMP    Hook_Timer50msEventB
             ; FUNCTION Timer50msEventB (END)

             ; FUNCTION Timer50msEventC (BEGIN)
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
0000 020000      E     LJMP    Hook_Timer50msEventC
             ; FUNCTION Timer50msEventC (END)

             ; FUNCTION Timer100msEventA (BEGIN)
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 585
0000 020000      E     LJMP    Hook_Timer100msEventA
             ; FUNCTION Timer100msEventA (END)

             ; FUNCTION Timer100msEventB (BEGIN)
                                           ; SOURCE LINE # 591
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
0000 020000      E     LJMP    Hook_Timer100msEventB
             ; FUNCTION Timer100msEventB (END)

             ; FUNCTION Timer100msEventC (BEGIN)
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 601
0000 020000      E     LJMP    Hook_Timer100msEventC
             ; FUNCTION Timer100msEventC (END)

             ; FUNCTION Timer500msEventA (BEGIN)
                                           ; SOURCE LINE # 607
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
0000 020000      E     LJMP    Hook_Timer500msEventA
             ; FUNCTION Timer500msEventA (END)

             ; FUNCTION Timer500msEventB (BEGIN)
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 617
0000 020000      E     LJMP    Hook_Timer500msEventB
             ; FUNCTION Timer500msEventB (END)

             ; FUNCTION Timer500msEventC (BEGIN)
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 624
                                           ; SOURCE LINE # 625
0000 020000      E     LJMP    Hook_Timer500msEventC
             ; FUNCTION Timer500msEventC (END)

             ; FUNCTION Timer1SecEventA (BEGIN)
                                           ; SOURCE LINE # 631
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 633
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 33  

0000 020000      E     LJMP    Hook_Timer1SecEventA
             ; FUNCTION Timer1SecEventA (END)

             ; FUNCTION Timer1SecEventB (BEGIN)
                                           ; SOURCE LINE # 639
                                           ; SOURCE LINE # 640
                                           ; SOURCE LINE # 641
0000 020000      E     LJMP    Hook_Timer1SecEventB
             ; FUNCTION Timer1SecEventB (END)

             ; FUNCTION Timer1SecEventC (BEGIN)
                                           ; SOURCE LINE # 647
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
0000 020000      E     LJMP    Hook_Timer1SecEventC
             ; FUNCTION Timer1SecEventC (END)

             ; FUNCTION Timer1MinEvent (BEGIN)
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
                                           ; SOURCE LINE # 657
0000 020000      E     LJMP    Hook_Timer1MinEvent
             ; FUNCTION Timer1MinEvent (END)

             ; FUNCTION CheckCanEnterDeepSleep (BEGIN)
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 664
;---- Variable 'resault' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 665
0002 900000      E     MOV     DPTR,#GPDRB
0005 E0                MOVX    A,@DPTR
0006 30E001            JNB     ACC.0,?C0090
                                           ; SOURCE LINE # 666
                                           ; SOURCE LINE # 667
0009 0F                INC     R7
                                           ; SOURCE LINE # 668
000A         ?C0090:
                                           ; SOURCE LINE # 669
000A 900000      E     MOV     DPTR,#SysPowState
000D E0                MOVX    A,@DPTR
000E B41102            CJNE    A,#011H,?C0091
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
0011 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 672
0013         ?C0091:
                                           ; SOURCE LINE # 674
0013 900000      E     MOV     DPTR,#CMOS_TEST
0016 E0                MOVX    A,@DPTR
0017 30E002            JNB     ACC.0,?C0092
                                           ; SOURCE LINE # 675
                                           ; SOURCE LINE # 676
001A 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 677
001C         ?C0092:
                                           ; SOURCE LINE # 680
001C 900000      E     MOV     DPTR,#GPDRB
001F E0                MOVX    A,@DPTR
0020 20E302            JB      ACC.3,?C0093
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 34  

                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 682
0023 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 683
0025         ?C0093:
                                           ; SOURCE LINE # 684
0025 900000      E     MOV     DPTR,#LOWBATT_3TIMES
0028 E0                MOVX    A,@DPTR
0029 6002              JZ      ?C0094
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
002B 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 687
002D         ?C0094:
                                           ; SOURCE LINE # 688
002D 900000      E     MOV     DPTR,#ACPI_HOTKEY
0030 E0                MOVX    A,@DPTR
0031 30E602            JNB     ACC.6,?C0095
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 690
0034 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 691
0036         ?C0095:
                                           ; SOURCE LINE # 693
0036 900000      E     MOV     DPTR,#ACPI_HOTKEY
0039 E0                MOVX    A,@DPTR
003A 30E702            JNB     ACC.7,?C0096
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
003D 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 696
003F         ?C0096:
                                           ; SOURCE LINE # 698
003F 900000      E     MOV     DPTR,#GPDRB
0042 E0                MOVX    A,@DPTR
0043 30E010            JNB     ACC.0,?C0097
0046 900000      E     MOV     DPTR,#nBattery0x16L
0049 E0                MOVX    A,@DPTR
004A 20E509            JB      ACC.5,?C0097
004D 900000      E     MOV     DPTR,#BT1_STATUS1
0050 E0                MOVX    A,@DPTR
0051 30E002            JNB     ACC.0,?C0097
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 700
0054 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 701
0056         ?C0097:
                                           ; SOURCE LINE # 702
0056 900000      E     MOV     DPTR,#LID_DEBOUNCE_CNT
0059 E0                MOVX    A,@DPTR
005A D3                SETB    C
005B 9400              SUBB    A,#00H
005D 4002              JC      ?C0098
                                           ; SOURCE LINE # 703
                                           ; SOURCE LINE # 704
005F 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 705
0061         ?C0098:
                                           ; SOURCE LINE # 713
0061 900000      E     MOV     DPTR,#POWER_FLAG1
0064 E0                MOVX    A,@DPTR
0065 30E102            JNB     ACC.1,?C0099
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 35  

                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 715
0068 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 716
006A         ?C0099:
                                           ; SOURCE LINE # 723
006A 900000      E     MOV     DPTR,#SysPowState
006D E0                MOVX    A,@DPTR
006E 6450              XRL     A,#050H
0070 6022              JZ      ?C0101
0072 E0                MOVX    A,@DPTR
0073 6440              XRL     A,#040H
0075 601D              JZ      ?C0101
0077 E0                MOVX    A,@DPTR
0078 6430              XRL     A,#030H
007A 6018              JZ      ?C0101
007C E0                MOVX    A,@DPTR
007D 6405              XRL     A,#05H
007F 6013              JZ      ?C0101
0081 E0                MOVX    A,@DPTR
0082 6404              XRL     A,#04H
0084 600E              JZ      ?C0101
0086 E0                MOVX    A,@DPTR
0087 6403              XRL     A,#03H
0089 6009              JZ      ?C0101
008B E0                MOVX    A,@DPTR
008C 6406              XRL     A,#06H
008E 6004              JZ      ?C0101
0090 E0                MOVX    A,@DPTR
0091 B46002            CJNE    A,#060H,?C0100
0094         ?C0101:
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
0094 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 728
0096         ?C0100:
                                           ; SOURCE LINE # 730
0096 EF                MOV     A,R7
0097 7014              JNZ     ?C0102
                                           ; SOURCE LINE # 731
                                           ; SOURCE LINE # 732
0099 900000      E     MOV     DPTR,#DeepSleepCunt
009C E0                MOVX    A,@DPTR
009D C3                CLR     C
009E 94FA              SUBB    A,#0FAH
00A0 5007              JNC     ?C0103
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 734
00A2 E0                MOVX    A,@DPTR
00A3 04                INC     A
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 735
00A5 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 736
00A7 8009              SJMP    ?C0105
00A9         ?C0103:
                                           ; SOURCE LINE # 738
                                           ; SOURCE LINE # 739
00A9 E4                CLR     A
00AA FF                MOV     R7,A
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 741
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 36  

                                           ; SOURCE LINE # 742
00AB 8001              SJMP    ?C0130
00AD         ?C0102:
                                           ; SOURCE LINE # 744
                                           ; SOURCE LINE # 745
00AD E4                CLR     A
00AE         ?C0130:
00AE 900000      E     MOV     DPTR,#DeepSleepCunt
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 746
00B2         ?C0105:
                                           ; SOURCE LINE # 748
00B2 EF                MOV     A,R7
00B3 14                DEC     A
00B4 6009              JZ      ?C0109
00B6 14                DEC     A
00B7 600D              JZ      ?C0106
00B9 2402              ADD     A,#02H
00BB 7009              JNZ     ?C0106
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 750
00BD         ?C0107:
                                           ; SOURCE LINE # 751
00BD D3                SETB    C
00BE 22                RET     
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 754
00BF         ?C0109:
                                           ; SOURCE LINE # 755
00BF E4                CLR     A
00C0 900000      E     MOV     DPTR,#DeepSleepCunt
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 756
00C4 C3                CLR     C
00C5 22                RET     
                                           ; SOURCE LINE # 757
                                           ; SOURCE LINE # 759
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 762
00C6         ?C0106:
                                           ; SOURCE LINE # 764
00C6 C3                CLR     C
                                           ; SOURCE LINE # 767
00C7         ?C0108:
00C7 22                RET     
             ; FUNCTION CheckCanEnterDeepSleep (END)

             ; FUNCTION InitEnterDeepSleep (BEGIN)
                                           ; SOURCE LINE # 770
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
0000 900000      E     MOV     DPTR,#ADCSTS
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#EC_DeepSleep_Temp0
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
0008 900000      E     MOV     DPTR,#ADCCFG
000B E0                MOVX    A,@DPTR
000C 900000      E     MOV     DPTR,#EC_DeepSleep_Temp1
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 774
0010 900000      E     MOV     DPTR,#DACPWRDN
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 37  

0013 E0                MOVX    A,@DPTR
0014 900000      E     MOV     DPTR,#EC_DeepSleep_Temp2
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 775
0018 900000      E     MOV     DPTR,#CGCTRL1R
001B E0                MOVX    A,@DPTR
001C 900000      E     MOV     DPTR,#EC_DeepSleep_Temp3
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 777
0020 900000      E     MOV     DPTR,#GPDRA
0023 E0                MOVX    A,@DPTR
0024 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortA
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 778
0028 900000      E     MOV     DPTR,#GPDRB
002B E0                MOVX    A,@DPTR
002C 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortB
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 779
0030 900000      E     MOV     DPTR,#GPDRC
0033 E0                MOVX    A,@DPTR
0034 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortC
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 780
0038 900000      E     MOV     DPTR,#GPDRD
003B E0                MOVX    A,@DPTR
003C 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortD
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 781
0040 900000      E     MOV     DPTR,#GPDRE
0043 E0                MOVX    A,@DPTR
0044 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortE
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 782
0048 900000      E     MOV     DPTR,#GPDRF
004B E0                MOVX    A,@DPTR
004C 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortF
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 783
0050 900000      E     MOV     DPTR,#GPDRG
0053 E0                MOVX    A,@DPTR
0054 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortG
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 784
0058 900000      E     MOV     DPTR,#GPDRH
005B E0                MOVX    A,@DPTR
005C 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortH
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 785
0060 900000      E     MOV     DPTR,#GPDRI
0063 E0                MOVX    A,@DPTR
0064 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortI
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 786
0068 900000      E     MOV     DPTR,#GPDRJ
006B E0                MOVX    A,@DPTR
006C 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortJ
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 788
0070 C2AF              CLR     EA
                                           ; SOURCE LINE # 789
0072 E4                CLR     A
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 38  

0073 900000      E     MOV     DPTR,#KSOL
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 790
                                           ; SOURCE LINE # 791
0077 120000      R     LCALL   L?0138
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 792
007B 900000      E     MOV     DPTR,#KSICTRL
                                           ; SOURCE LINE # 802
007E 120000      R     LCALL   L?0140
0081 7029              JNZ     ?C0111
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
0083 900000      E     MOV     DPTR,#GPDRF
0086 E0                MOVX    A,@DPTR
0087 54FD              ANL     A,#0FDH
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
008A 900000      E     MOV     DPTR,#GPDRA
008D E0                MOVX    A,@DPTR
008E 54FB              ANL     A,#0FBH
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 806
0091 E0                MOVX    A,@DPTR
0092 54FD              ANL     A,#0FDH
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 807
0095 E0                MOVX    A,@DPTR
0096 54FE              ANL     A,#0FEH
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 808
0099 900000      E     MOV     DPTR,#GPDRE
009C E0                MOVX    A,@DPTR
009D 547F              ANL     A,#07FH
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 809
00A0 900000      E     MOV     DPTR,#GPDRH
00A3 E0                MOVX    A,@DPTR
00A4 54F7              ANL     A,#0F7H
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 810
00A7 7480              MOV     A,#080H
                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 812
00A9 120000      R     LCALL   L?0136
                                           ; SOURCE LINE # 813
00AC         ?C0111:
                                           ; SOURCE LINE # 815
00AC 900000      E     MOV     DPTR,#FPCFG
00AF E0                MOVX    A,@DPTR
00B0 54BF              ANL     A,#0BFH
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 816
00B3 900000      E     MOV     DPTR,#ADCCFG
00B6 E0                MOVX    A,@DPTR
00B7 54FE              ANL     A,#0FEH
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 817
00BA 900000      E     MOV     DPTR,#CGCTRL2R
00BD 7470              MOV     A,#070H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 818
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 39  

00C0 900000      E     MOV     DPTR,#CGCTRL3R
00C3 742F              MOV     A,#02FH
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 820
00C6 900000      E     MOV     DPTR,#SysPowState
00C9 E0                MOVX    A,@DPTR
00CA B46603            CJNE    A,#066H,?C0113
00CD D3                SETB    C
00CE 8001              SJMP    ?C0114
00D0         ?C0113:
00D0 C3                CLR     C
00D1         ?C0114:
00D1 4003              JC      ?C0112
                                           ; SOURCE LINE # 821
00D3 120000      E     LCALL   ECPowerDownEnableExternalTimer2
00D6         ?C0112:
                                           ; SOURCE LINE # 823
00D6 120000      E     LCALL   SetACIN_Int
                                           ; SOURCE LINE # 824
00D9 120000      E     LCALL   Setlanwake_Int
                                           ; SOURCE LINE # 825
00DC 120000      E     LCALL   SetPWRSW_Int
                                           ; SOURCE LINE # 826
00DF 120000      E     LCALL   SetNovo_Int
                                           ; SOURCE LINE # 827
00E2 120000      E     LCALL   MXLID_Wake_En
                                           ; SOURCE LINE # 828
00E5 120000      E     LCALL   SlpS3_Wake_En
                                           ; SOURCE LINE # 829
00E8 120000      E     LCALL   InterKBDWakeEnable
                                           ; SOURCE LINE # 831
00EB E4                CLR     A
00EC 900000      E     MOV     DPTR,#ADCSTS
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 832
00F0 900000      E     MOV     DPTR,#ADCCFG
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 833
00F4 900000      E     MOV     DPTR,#DACPWRDN
00F7 74FF              MOV     A,#0FFH
00F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 834
00FA 900000      E     MOV     DPTR,#CGCTRL1R
00FD 740F              MOV     A,#0FH
                                           ; SOURCE LINE # 836
00FF 120000      R     LCALL   L?0140
0102 701B              JNZ     ?C0115
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 839
0104 900000      E     MOV     DPTR,#GPDRC
0107 E0                MOVX    A,@DPTR
0108 4402              ORL     A,#02H
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 840
010B E0                MOVX    A,@DPTR
010C 4404              ORL     A,#04H
010E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 841
010F 900000      E     MOV     DPTR,#GPCRC1
0112 7480              MOV     A,#080H
0114 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 842
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 40  

0115 900000      E     MOV     DPTR,#GPCRC2
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 847
0119 900000      E     MOV     DPTR,#GPCRA5
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 850
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 858
011C 120000      R     LCALL   L?0133
                                           ; SOURCE LINE # 859
011F         ?C0115:
                                           ; SOURCE LINE # 861
011F 900000      E     MOV     DPTR,#WUESR1
0122 74FF              MOV     A,#0FFH
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 863
                                           ; SOURCE LINE # 864
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 867
0124 120000      R     LCALL   L?0134
                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 870
                                           ; SOURCE LINE # 871
                                           ; SOURCE LINE # 872
0127 120000      R     LCALL   L?0135
                                           ; SOURCE LINE # 873
012A 900000      E     MOV     DPTR,#ISR13
012D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 874
012E 900000      E     MOV     DPTR,#ISR16
0131 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 875
0132 22                RET     
             ; FUNCTION InitEnterDeepSleep (END)

             ; FUNCTION InitWakeFromDeepSleep (BEGIN)
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
                                           ; SOURCE LINE # 880
0000 900000      E     MOV     DPTR,#SysPowState
0003 E0                MOVX    A,@DPTR
0004 B46603            CJNE    A,#066H,?C0118
0007 D3                SETB    C
0008 8001              SJMP    ?C0119
000A         ?C0118:
000A C3                CLR     C
000B         ?C0119:
000B 4003              JC      ?C0117
                                           ; SOURCE LINE # 881
000D 120000      E     LCALL   ECDisableExternalTimer2
0010         ?C0117:
                                           ; SOURCE LINE # 883
0010 900000      E     MOV     DPTR,#FPCFG
0013 E0                MOVX    A,@DPTR
0014 4440              ORL     A,#040H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 884
0017 900000      E     MOV     DPTR,#ADCCFG
001A E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 41  

001B 4401              ORL     A,#01H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 885
001E E4                CLR     A
001F 900000      E     MOV     DPTR,#CGCTRL2R
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 886
0023 900000      E     MOV     DPTR,#CGCTRL3R
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 888
0027 900000      E     MOV     DPTR,#IER0
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 889
002B 900000      E     MOV     DPTR,#IER1
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 890
002F 900000      E     MOV     DPTR,#IER2
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 891
0033 900000      E     MOV     DPTR,#IER3
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 892
0037 900000      E     MOV     DPTR,#IER4
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 893
003B 900000      E     MOV     DPTR,#IER9
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 894
003F 900000      E     MOV     DPTR,#IER13
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 895
0043 900000      E     MOV     DPTR,#IER16
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 899
0047 900000      E     MOV     DPTR,#ISR0
004A 74FF              MOV     A,#0FFH
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 901
                                           ; SOURCE LINE # 902
                                           ; SOURCE LINE # 903
004D 120000      R     LCALL   L?0135
                                           ; SOURCE LINE # 904
0050 900000      E     MOV     DPTR,#ISR9
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 905
0054 900000      E     MOV     DPTR,#ISR13
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 906
0058 900000      E     MOV     DPTR,#ISR16
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 909
005C 900000      E     MOV     DPTR,#WUESR1
                                           ; SOURCE LINE # 910
                                           ; SOURCE LINE # 911
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 913
                                           ; SOURCE LINE # 914
                                           ; SOURCE LINE # 915
005F 120000      R     LCALL   L?0134
                                           ; SOURCE LINE # 917
0062 900000      E     MOV     DPTR,#EC_DeepSleep_Temp0
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 42  

0065 E0                MOVX    A,@DPTR
0066 900000      E     MOV     DPTR,#ADCSTS
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 918
006A 900000      E     MOV     DPTR,#EC_DeepSleep_Temp1
006D E0                MOVX    A,@DPTR
006E 900000      E     MOV     DPTR,#ADCCFG
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 919
0072 900000      E     MOV     DPTR,#EC_DeepSleep_Temp2
0075 E0                MOVX    A,@DPTR
0076 900000      E     MOV     DPTR,#DACPWRDN
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 920
007A 900000      E     MOV     DPTR,#EC_DeepSleep_Temp3
007D E0                MOVX    A,@DPTR
007E 900000      E     MOV     DPTR,#CGCTRL1R
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 922
0082 120000      E     LCALL   Init_Kbd
                                           ; SOURCE LINE # 923
0085 120000      E     LCALL   Core_Init_Regs
                                           ; SOURCE LINE # 924
0088 120000      E     LCALL   Init_Regs
                                           ; SOURCE LINE # 925
008B 120000      E     LCALL   Enable_Any_Key_Irq
                                           ; SOURCE LINE # 934
008E 120000      R     LCALL   L?0141
0091 6005              JZ      ?C0121
0093 E0                MOVX    A,@DPTR
0094 6455              XRL     A,#055H
0096 7036              JNZ     ?C0120
0098         ?C0121:
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 937
0098 E4                CLR     A
0099 900000      E     MOV     DPTR,#GPCRC1
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 938
009D 900000      E     MOV     DPTR,#GPCRC2
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 941
00A1 7440              MOV     A,#040H
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 943
00A3 120000      R     LCALL   L?0136
                                           ; SOURCE LINE # 944
00A6 900000      E     MOV     DPTR,#GPDRA
00A9 E0                MOVX    A,@DPTR
00AA 4404              ORL     A,#04H
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 945
00AD E0                MOVX    A,@DPTR
00AE 4401              ORL     A,#01H
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 946
00B1 900000      E     MOV     DPTR,#GPDRE
00B4 E0                MOVX    A,@DPTR
00B5 4480              ORL     A,#080H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 947
00B8 900000      E     MOV     DPTR,#GPDRH
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 43  

00BB E0                MOVX    A,@DPTR
00BC 4408              ORL     A,#08H
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 948
00BF 900000      E     MOV     DPTR,#GPDRA
00C2 E0                MOVX    A,@DPTR
00C3 4402              ORL     A,#02H
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 952
00C6 900000      E     MOV     DPTR,#GPCRA5
00C9 7440              MOV     A,#040H
                                           ; SOURCE LINE # 955
                                           ; SOURCE LINE # 956
                                           ; SOURCE LINE # 958
                                           ; SOURCE LINE # 959
                                           ; SOURCE LINE # 970
                                           ; SOURCE LINE # 971
00CB 120000      R     LCALL   L?0133
                                           ; SOURCE LINE # 972
00CE         ?C0120:
                                           ; SOURCE LINE # 974
00CE 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortA
00D1 E0                MOVX    A,@DPTR
00D2 900000      E     MOV     DPTR,#GPDRA
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 975
00D6 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortB
00D9 E0                MOVX    A,@DPTR
00DA 900000      E     MOV     DPTR,#GPDRB
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 976
00DE 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortC
00E1 E0                MOVX    A,@DPTR
00E2 900000      E     MOV     DPTR,#GPDRC
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 977
00E6 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortD
00E9 E0                MOVX    A,@DPTR
00EA 900000      E     MOV     DPTR,#GPDRD
00ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 978
00EE 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortE
00F1 E0                MOVX    A,@DPTR
00F2 900000      E     MOV     DPTR,#GPDRE
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 979
00F6 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortF
00F9 E0                MOVX    A,@DPTR
00FA 900000      E     MOV     DPTR,#GPDRF
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 980
00FE 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortG
0101 E0                MOVX    A,@DPTR
0102 900000      E     MOV     DPTR,#GPDRG
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 981
0106 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortH
0109 E0                MOVX    A,@DPTR
010A 900000      E     MOV     DPTR,#GPDRH
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 982
010E 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortI
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 44  

0111 E0                MOVX    A,@DPTR
0112 900000      E     MOV     DPTR,#GPDRI
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 983
0116 900000      E     MOV     DPTR,#EC_DeepSleep_TempPortJ
0119 E0                MOVX    A,@DPTR
011A 900000      E     MOV     DPTR,#GPDRJ
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 985
011E 22                RET     
             ; FUNCTION InitWakeFromDeepSleep (END)

             ; FUNCTION CheckCrisisMode (BEGIN)
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 992
                                           ; SOURCE LINE # 994
0000 900000      E     MOV     DPTR,#KSOL
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
;---- Variable 'BKSOL' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 995
0005 900000      E     MOV     DPTR,#KSOH1
0008 E0                MOVX    A,@DPTR
0009 FE                MOV     R6,A
;---- Variable 'BKSOH1' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 996
000A 900000      E     MOV     DPTR,#KSOH2
000D E0                MOVX    A,@DPTR
000E FD                MOV     R5,A
;---- Variable 'BKSOH2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 998
000F 900000      E     MOV     DPTR,#KSOL
0012 74FF              MOV     A,#0FFH
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 999
0015 74BF              MOV     A,#0BFH
                                           ; SOURCE LINE # 1000
0017 120000      R     LCALL   L?0137
001A 74FF              MOV     A,#0FFH
                                           ; SOURCE LINE # 1001
                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1003
001C 120000      R     LCALL   L?0139
001F 30E40B            JNB     ACC.4,?C0123
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
0022 900000      E     MOV     DPTR,#KSOH1
0025 74FF              MOV     A,#0FFH
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1006
0028 900000      E     MOV     DPTR,#KSOL
                                           ; SOURCE LINE # 1007
                                           ; SOURCE LINE # 1008
                                           ; SOURCE LINE # 1009
002B 8017              SJMP    ?C0131
                                           ; SOURCE LINE # 1010
002D         ?C0123:
                                           ; SOURCE LINE # 1012
002D 900000      E     MOV     DPTR,#KSOL
0030 74EF              MOV     A,#0EFH
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1013
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 45  

0033 74FF              MOV     A,#0FFH
                                           ; SOURCE LINE # 1014
0035 120000      R     LCALL   L?0137
                                           ; SOURCE LINE # 1015
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1017
0038 120000      R     LCALL   L?0139
003B 900000      E     MOV     DPTR,#KSOL
003E 30E211            JNB     ACC.2,?C0125
                                           ; SOURCE LINE # 1018
                                           ; SOURCE LINE # 1019
0041 74FF              MOV     A,#0FFH
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1020
0044         ?C0131:
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1021
0046 900000      E     MOV     DPTR,#KSOH1
0049 EE                MOV     A,R6
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1022
004B 900000      E     MOV     DPTR,#KSOH2
004E ED                MOV     A,R5
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1023
0050 C3                CLR     C
0051 22                RET     
                                           ; SOURCE LINE # 1024
0052         ?C0125:
                                           ; SOURCE LINE # 1025
0052 74FF              MOV     A,#0FFH
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1027
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1028
0057 CF                XCH     A,R7
0058 EE                MOV     A,R6
0059 CF                XCH     A,R7
005A 900000      E     MOV     DPTR,#KSOH1
005D EE                MOV     A,R6
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1029
005F CF                XCH     A,R7
0060 ED                MOV     A,R5
0061 CF                XCH     A,R7
0062 900000      E     MOV     DPTR,#KSOH2
0065 ED                MOV     A,R5
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1031
0067 D3                SETB    C
                                           ; SOURCE LINE # 1032
0068         ?C0124:
0068 22                RET     
             ; FUNCTION CheckCrisisMode (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1835    ----
   CONSTANT SIZE    =     54    ----
C51 COMPILER V8.12   CORE_MAIN                                                             07/28/2018 12:03:33 PAGE 46  

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
